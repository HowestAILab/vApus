<ConnectionProxies>
  <Items>
    <ConnectionProxy>
      <Items>
        <ConnectionProxyRuleSet>
          <Items>
            <ConnectionProxySyntaxItem>
              <Items>
                <Rule>
                  <Items />
                  <RegExp>
                  </RegExp>
                  <IgnoreCase>False</IgnoreCase>
                  <ValueType>stringType</ValueType>
                  <DisplayAsPassword>False</DisplayAsPassword>
                  <Description>
                  </Description>
                  <Label>http://</Label>
                  <ShowInGui>True</ShowInGui>
                  <IsDefaultItem>False</IsDefaultItem>
                  <IsEmpty>False</IsEmpty>
                </Rule>
              </Items>
              <DefaultValue>
              </DefaultValue>
              <Description>Must start with 'http://' and may not end with /.</Description>
              <Label>Uri</Label>
              <ShowInGui>True</ShowInGui>
              <IsDefaultItem>False</IsDefaultItem>
              <IsEmpty>False</IsEmpty>
            </ConnectionProxySyntaxItem>
            <ConnectionProxySyntaxItem>
              <Items />
              <DefaultValue>
              </DefaultValue>
              <Description>Examples: application/x-www-form-urlencoded; application/x-amf</Description>
              <Label>Content Type</Label>
              <ShowInGui>True</ShowInGui>
              <IsDefaultItem>False</IsDefaultItem>
              <IsEmpty>False</IsEmpty>
            </ConnectionProxySyntaxItem>
          </Items>
          <Connected>False</Connected>
          <TracertField>1</TracertField>
          <ChildDelimiter>;</ChildDelimiter>
          <Description>
          </Description>
          <ShowInGui>True</ShowInGui>
          <IsDefaultItem>False</IsDefaultItem>
          <IsEmpty>False</IsEmpty>
        </ConnectionProxyRuleSet>
        <ConnectionProxyCode>
          <Items />
          <Code>/*
    ConnectionProxy generated by vApus
    vApus is Copyrighted by Sizing Servers Lab
    University College of West-Flanders, Department GKG
    
    Note: If you want to edit this connection proxy code you need to know what you are doing. You might break your stresstest.
    
    VERSION STABLE-20171109165852
*/

// The following line is used to add references when compiling, you can edit this here or in the references tab page. Please use the 'Browse...' button for dlls that are not in the GAC.
// dllreferences:System.dll;System.Data.dll;vApus.Util.dll;vApus.SolutionTree.dll;vApus.Stresstest.dll;System.Web.dll;

#region Preprocessors
    // Enable DEBUG mode
    //#define DEBUGMODE
#endregion // Preprocessors

#region Usings
    using System;
    using System.Data;
    using System.Diagnostics;
    using vApus.Util;
    using System.IO;
    using System.Net;    
    using System.Net.Security;
    using System.Collections.Generic;    
    using System.Security.Cryptography.X509Certificates;
#endregion // Usings

namespace vApus.StressTest {
    public class ConnectionProxy : IConnectionProxy {
        
        #region Fields
            Stopwatch _stopwatch = new Stopwatch();
            bool _isDisposed;
            // Please do not edit the following lines (RuleSetFields).
            // -- RuleSetFields --
            System.String _connectionProxySyntaxItem0 = string.Empty; // Uri
            System.String _connectionProxySyntaxItem1 = string.Empty; // Content Type
            // -- RuleSetFields --
            
            StringTree _parameterizedRequest;
            HttpWebRequest _httpWebRequest;
            HttpWebResponse _httpWebResponse;
            CookieCollection _cookies;
            StreamReader _streamReader;
            const int _bytes = 1;
            
            // A 60 second timeout should be reasonable.
            const int REQUEST_TIMEOUT_IN_MS = 60000;
        #endregion // Fields
        
        #region Properties
            public bool IsConnectionOpen { get { return true; } }
            public bool IsDisposed { get { return _isDisposed; } }
        #endregion // Properties
        
        public ConnectionProxy() {
            // Trust all certificates for https testing.
            ServicePointManager.ServerCertificateValidationCallback = (object sender, X509Certificate cert, X509Chain chain, SslPolicyErrors errors) =&gt; { return true; };
        }
        
        #region Functions
            public void TestConnection(out string error) {
                error = null;
                
                try {
                    _httpWebRequest                   = (HttpWebRequest)System.Net.WebRequest.Create(new Uri(_connectionProxySyntaxItem0));
                    _httpWebRequest.UserAgent         = "vApus - Test connection function";
                    _httpWebRequest.Timeout           = REQUEST_TIMEOUT_IN_MS;
                    _httpWebRequest.ReadWriteTimeout  = _httpWebRequest.Timeout;
                    _httpWebRequest.AllowAutoRedirect = false;
                    _httpWebRequest.Method            = "GET";
                    _httpWebRequest.ContentLength     = 0;
                    
                    _httpWebResponse = _httpWebRequest.GetResponse() as HttpWebResponse;
                }
                catch (Exception ex) {
                    error = ex.ToString();
                }
                finally {
                    _cookies = null;
                    if (_streamReader != null) {
                        try {
                            _streamReader.Close();
                            _streamReader.Dispose();
                            _streamReader = null;
                        }
                        catch {
                        }
                    }
                }
            }
            
            public void OpenConnection() { }
            
            public void CloseConnection() { }
            
            public void SendAndReceive(StringTree parameterizedRequest, out DateTime sentAt, out TimeSpan timeToLastByte, out string meta, out Exception exception) {
                _parameterizedRequest = parameterizedRequest;
                exception = null;
                meta = null;
                
                //
                // parameterizedRequest is the request parsed to a String Tree using the Scenario Rule Set.
                // String Tree is a simple class: it can have either a value (string Value { get; }) or childs who are also String Trees (e.g. StringTree foo = parameterizedRequest[n] where n is an integer value).
                // You can get the combined value of the childs using the function CombineValues() (not shallow, returns a string), this uses the child delimiters in the rule set to glue these values together.
                //
                
                sentAt = HighResolutionDateTime.UtcNow;
                if (_isDisposed) {
                    timeToLastByte = new TimeSpan();
                    return;
                }
                try {
                    _stopwatch.Start();
                    Stream stream = null;
                    try {
                        string request = _parameterizedRequest[_bytes].Value;
                        
                        // A parameterizing solution.
                        // string find = "foo";
                        // int index = request.IndexOf(find);
                        
                        byte[] bytes = ParseRequestToBytes(request);
                        
                        // bytes = RemoveAt(bytes, index, find.Length);
                        // bytes = InsertAt(bytes, index, "bar");
                        
                        // or
                        
                        // var clp = ASTNode.CustomListParameters[0] as CustomListParameter;
                        // clp.Next();
                        // bytes = InsertAt(bytes, index, clp.Value);
                        
                        InitHttpWebRequest(bytes.Length);
                        HandleCookiesBeforeRequest();
                        stream = _httpWebRequest.GetRequestStream();
                        
                        stream.Write(bytes, 0, bytes.Length);
                        stream.Flush();
                        stream.Close();
                        stream.Dispose();
                        stream = null;
                        
                        _httpWebResponse = _httpWebRequest.GetResponse() as HttpWebResponse;
                        stream = _httpWebResponse.GetResponseStream();
                        
                        StreamReader streamReader = new StreamReader(stream);
                        char[] buffer = new char[1024];
                        int count = 0;
                        do {
                            count = streamReader.Read(buffer, 0, 1024);
                        } while (count != 0);
                        
                        stream.Close();
                        stream.Dispose();
                        stream = null;
                        
                        HandleCookiesAfterRequest();
                    }
                    catch (Exception ex) {
                        exception = ex;
                        #if DEBUGMODE
                            EventPanel.AddEvent("SendAndReceive Exception: " + parameterizedRequest.CombineValues() + " " + exception);
                        #endif
                    }
                    finally {
                        if(stream != null) {
                            try {
                                stream.Close();
                                stream.Dispose();
                            }
                            finally {
                                stream = null;
                            }
                        }
                    }
                }
                catch {
                    //
                    // Always throw the exception, if any, if 'stuff' cannot be closed.
                    // vApus will handle it as a connection problem.
                    //
                    
                    throw;
                }
                finally {
                    _stopwatch.Stop();
                    timeToLastByte = _stopwatch.Elapsed;
                    _stopwatch.Reset();
                }
            }
            
            public void Dispose() {
                if (!_isDisposed) {
                    _isDisposed = true;
                    try {
                        // Timeout immediately.
                        if(_httpWebRequest != null) {
                            _httpWebRequest.Abort();
                        }
                    } 
                    catch {
                    }
                    _httpWebRequest = null;
                    _httpWebResponse = null;
                    if (_streamReader != null) {
                        try {
                            _streamReader.Close();
                            _streamReader.Dispose();
                            _streamReader = null;
                        } 
                        catch { 
                        }
                    }
                }
            }
        #endregion // Functions
        
        #region Free Coding
            private byte[] ParseRequestToBytes(string s) {
                string[] array = s.Split(',');
                byte[] bytes = new byte[array.Length];
                
                for (int i = 0; i &lt; array.Length; i++) {
                    bytes[i] = (byte)int.Parse(array[i]);
                }
                
                return bytes;
            }
            
            // Following two fx's can be used for a parameterizing solution in the connection proxy code.
            private byte[] RemoveAt(byte[] source, int index, int count) {
                var newB = new List&lt;Byte&gt;(index + 1);
                int exclusiveLastIndex = index + count;
                for (int i = 0; i &lt; source.Length; i++) {
                    if (i &lt; index || i &gt; exclusiveLastIndex) {
                        newB.Add(source[i]);
                    }
                }
                return newB.ToArray();
            }
            
            // Replaces the bytes at the given index with the bytes of s.
            private byte[] InsertAt(byte[] source, int index, string s) {
                byte[] toInsert = System.Text.Encoding.Default.GetBytes(s);
                var newB = new List&lt;Byte&gt;(source.Length + toInsert.Length);
                for (int i = 0; i &lt; index; i++) {
                    if (i &gt;= source.Length) {
                        break;
                    }
                    newB.Add(source[i]);
                }
                newB.AddRange(toInsert);
                for (int i = index; i &lt; source.Length; i++) {
                    newB.Add(source[i]);
                }
                return newB.ToArray();
            }
            
            private void InitHttpWebRequest(int contentLength) {
                _httpWebRequest           = HttpWebRequest.Create(_connectionProxySyntaxItem0) as HttpWebRequest;
                _httpWebRequest.UserAgent = "vApus";
                // Allow keepalive.
                _httpWebRequest.KeepAlive         = true;
                _httpWebRequest.Timeout           = REQUEST_TIMEOUT_IN_MS;
                _httpWebRequest.ReadWriteTimeout  = _httpWebRequest.Timeout;
                _httpWebRequest.AllowAutoRedirect = false;
                
                // Send post data with the same request.
                _httpWebRequest.ServicePoint.Expect100Continue = false;
                // Set the connection limit to our concurrency.
                _httpWebRequest.ServicePoint.ConnectionLimit = (this.GetParent() as ConnectionProxyPool).PoolSize;
                
                _httpWebRequest.Method = "POST";
                _httpWebRequest.ContentLength = contentLength;
                
                // Default: "application/x-www-form-urlencoded"
                _httpWebRequest.ContentType = _connectionProxySyntaxItem1;
            }
            
            private void HandleCookiesBeforeRequest() {
                if (_cookies == null) {
                    _cookies = new CookieCollection();
                }
                _httpWebRequest.CookieContainer = new CookieContainer();
                _httpWebRequest.CookieContainer.Add(_cookies);
            }
            
            private void HandleCookiesAfterRequest() {
                if (_httpWebRequest.CookieContainer.Count &gt; 0) {
                    foreach (Cookie cookie in _httpWebRequest.CookieContainer.GetCookies(_httpWebRequest.RequestUri)) {
                        int cookieIndex = GetCookieIndex(cookie.Name);
                        if (cookieIndex == -1) {
                            _cookies.Add(cookie);
                        }
                        else {
                            _cookies[cookieIndex].Value = cookie.Value;
                        }
                    }
                }
                if (_httpWebResponse.Cookies.Count &gt; 0) {
                    foreach (Cookie cookie in _httpWebResponse.Cookies) {
                        int cookieIndex = GetCookieIndex(cookie.Name);
                        if (cookieIndex == -1) {
                            _cookies.Add(cookie);
                        }
                        else {
                            _cookies[cookieIndex].Value = cookie.Value;
                        }
                    }
                    
                }
            }
            
            private int GetCookieIndex(string cookieName) {
                for (int i = 0; i &lt; _cookies.Count; i++) {
                    if (_cookies[i].Name == cookieName) {
                        return i;
                    }
                }
                return -1;
            }
        #endregion // Free Coding
    } // ConnectionProxy
} // vApus.Stresstest</Code>
          <ShowInGui>True</ShowInGui>
          <IsDefaultItem>False</IsDefaultItem>
          <IsEmpty>False</IsEmpty>
        </ConnectionProxyCode>
      </Items>
      <Label>HTTP(S) Binary POST STABLE-20171109165852</Label>
      <ShowInGui>True</ShowInGui>
      <IsDefaultItem>False</IsDefaultItem>
      <IsEmpty>False</IsEmpty>
    </ConnectionProxy>
  </Items>
</ConnectionProxies>
