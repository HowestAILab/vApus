<ConnectionProxies>
  <Items>
    <ConnectionProxy>
      <Items>
        <ConnectionProxyRuleSet>
          <Items />
          <Connected>False</Connected>
          <TracertField>1</TracertField>
          <ChildDelimiter>&lt;16 0C 02 12$&gt;</ChildDelimiter>
          <Description>https://sites.google.com/a/webpagetest.org/docs/advanced-features/webpagetest-restful-apis</Description>
          <ShowInGui>True</ShowInGui>
          <IsDefaultItem>False</IsDefaultItem>
          <IsEmpty>False</IsEmpty>
        </ConnectionProxyRuleSet>
        <ConnectionProxyCode>
          <Items />
          <Code>/*
    ConnectionProxy generated by vApus
    vApus is Copyrighted by Sizing Servers Lab
    University College of West-Flanders, Department GKG
    
    Note: If you want to edit this connection proxy code you need to know what you are doing. You might break your stresstest.
    
    VERSION STABLE-20171109165852
*/

// The following line is used to add references when compiling, you can edit this here or in the references tab page. Please use the 'Browse...' button for dlls that are not in the GAC.
// dllreferences:System.Core.dll;System.Data.dll;System.dll;System.Web.dll;System.Windows.Forms.dll;vApus.SolutionTree.dll;vApus.Stresstest.dll;vApus.Util.dll;Newtonsoft.Json.dll;Microsoft.CSharp.dll;

#region Preprocessors
    // Enable debug mode
    //#define DEBUGMODE
#endregion // Preprocessors

#region Usings
    using System;
    using System.Data;
    using System.Diagnostics;
    using System.IO;
    using System.IO.Compression;
    using System.Linq;
    using System.Net;
    using System.Net.NetworkInformation;
    using System.Net.Security;
    using System.Text;
    using System.Threading;
    using System.Web;
    using System.Windows.Forms;
    using System.Security.Cryptography.X509Certificates;
    using vApus.Util;
    using Newtonsoft.Json.Linq;
#endregion // Usings

namespace vApus.StressTest {
    public class ConnectionProxy : IConnectionProxy {
        
        #region Fields
            Stopwatch _stopwatch = new Stopwatch();
            bool _isDisposed;
            // Please do not edit the following lines (RuleSetFields).
            // -- RuleSetFields --
            // -- RuleSetFields --
            
            StringTree _parameterizedRequest;
            HttpWebRequest _httpWebRequest;
            HttpWebResponse _httpWebResponse;
            StreamReader _streamReader;
            
            
            AutoResetEvent _waitForTestCompleteWaitHandle = new AutoResetEvent(false);
            
            // A 60 seconds timeout should be reasonable.
            const int REQUEST_TIMEOUT_IN_MS = 60000;
            
            // Labels, for the index values of the StringTree nodes (eg. int ip = 0).
            enum SyntaxItem {
                Url = 0
            }
        #endregion // Fields
        
        #region Properties
            public bool IsConnectionOpen { get { return true; } }
            public bool IsDisposed { get { return _isDisposed; } }
        #endregion // Properties
        
        public ConnectionProxy() {
            // Trust all certificates for https testing.
            ServicePointManager.ServerCertificateValidationCallback = (object sender, X509Certificate cert, X509Chain chain, SslPolicyErrors errors) =&gt; { return true; };
            
        }
        
        #region Functions
            public void TestConnection(out string error) {
                error = null;
                
                try {
                    _httpWebRequest                   = (HttpWebRequest)WebRequest.Create(new Uri("https://developers.google.com/apis-explorer/#p/"));
                    _httpWebRequest.UserAgent         = "vApus - Test connection function";
                    _httpWebRequest.Timeout           = REQUEST_TIMEOUT_IN_MS;
                    _httpWebRequest.ReadWriteTimeout  = _httpWebRequest.Timeout;
                    _httpWebRequest.AllowAutoRedirect = false;
                    _httpWebRequest.Method            = "GET";
                    _httpWebRequest.ContentLength     = 0;
                    
                    _httpWebResponse = _httpWebRequest.GetResponse() as HttpWebResponse;
                }
                catch (Exception ex) {
                    error = ex.ToString();
                }
            }
            
            public void OpenConnection() { }
            
            public void CloseConnection() { }
            
            public void SendAndReceive(StringTree parameterizedRequest, out DateTime sentAt, out TimeSpan timeToLastByte, out string meta, out Exception exception) {
                _parameterizedRequest = parameterizedRequest;
                sentAt = DateTime.Now;
                meta                  = null;
                exception             = null;
                
                //
                // parameterizedRequest is the request parsed to a String Tree using the Scenario Rule Set.
                // String Tree is a simple class: it can have either a value (property: string Value) or childs who are also String Trees (e.g. StringTree foo = parameterizedRequest[n] where n is an integer value).
                // You can get the combined value of the childs using the function CombineValues() (not shallow, returns a string), this uses the child delimiters in the rule set to glue these values together.
                //
                
                if (_isDisposed) {
                    timeToLastByte = new TimeSpan();
                    return;
                }
                try {
                    _stopwatch.Start();
                    try {
                        string response = Browse(new Uri("https://www.googleapis.com/pagespeedonline/v2/runPagespeed?url=" + HttpUtility.UrlEncode(_parameterizedRequest[(int)SyntaxItem.Url].Value)));
                        
                        #if (DEBUGMODE)
                            EventPanel.AddEvent("Response: " + response);
                        #endif
                        
                        
                        dynamic jObject = new JObject();
                        jObject.type   = "PageSpeedOnline"; //Define the type for correct vizualization of the meta.
                        jObject.result = JObject.Parse(response);
                        
                        meta = jObject.ToString();
                    }
                    catch (Exception ex) {
                        exception = ex;
                        #if (DEBUGMODE)
                            EventPanel.AddEvent("SendAndReceive Exception: " + parameterizedRequest.CombineValues() + " " + exception);
                        #endif
                    }
                }
                catch {
                    //
                    // Always throw the exception, if any, if 'stuff' cannot be closed.
                    // vApus will handle it as a connection problem.
                    //
                    
                    throw;
                }
                finally {
                    _stopwatch.Stop();
                    timeToLastByte = _stopwatch.Elapsed;
                    _stopwatch.Reset();
                }
            }
            
            public void Dispose() {
                if (!_isDisposed) {
                    _isDisposed = true;
                    try {
                        // Timeout immediately.
                        if(_httpWebRequest != null){
                            _httpWebRequest.Abort();
                        }
                    } 
                    catch { }
                    _httpWebRequest  = null;
                    _httpWebResponse = null;
                    if (_streamReader != null) {
                        try {
                            _streamReader.Close();
                            _streamReader.Dispose();
                            _streamReader = null;
                        } 
                        catch {
                        }
                    }
                    
                    if(_waitForTestCompleteWaitHandle != null){
                        _waitForTestCompleteWaitHandle.Set();
                        _waitForTestCompleteWaitHandle.Dispose();
                        _waitForTestCompleteWaitHandle = null;
                    }
                }
            }
        #endregion // Functions
        
        #region Free Coding
            //Returns the response
            private string Browse(Uri uri) {
                try{
                    _httpWebRequest = (HttpWebRequest)WebRequest.Create(uri);
                    // Set the HTTP request method (GET/POST).
                    _httpWebRequest.Method = "GET";
                    // Set the User Agent.
                    _httpWebRequest.UserAgent        = "vApus";            
                    _httpWebRequest.Timeout          = REQUEST_TIMEOUT_IN_MS;
                    _httpWebRequest.ReadWriteTimeout = _httpWebRequest.Timeout;
                    // Allow keepalive.
                    _httpWebRequest.KeepAlive = true;
                    // Allow compression.
                    _httpWebRequest.Headers.Add("Accept-Encoding: gzip, deflate");
                    // Set the Accept-Language header.
                    _httpWebRequest.Headers.Add("Accept-Language: en-US");
                    // Don't autoredirect: redirects are already recorded.
                    _httpWebRequest.AllowAutoRedirect = false;
                    // Set the initial content length to 0.
                    _httpWebRequest.ContentLength = 0;
                    // Send post data with the same request.
                    _httpWebRequest.ServicePoint.Expect100Continue = false;
                    // Set the connection limit to our concurrency.
                    _httpWebRequest.ServicePoint.ConnectionLimit = (this.GetParent() as ConnectionProxyPool).PoolSize;
                    
                    
                    _httpWebResponse = _httpWebRequest.GetResponse() as HttpWebResponse;
                    
                    if (_httpWebResponse.ContentEncoding.ToLower().Contains("gzip")) {
                        _streamReader = new StreamReader(new GZipStream(_httpWebResponse.GetResponseStream(), CompressionMode.Decompress));
                    }
                    else if(_httpWebResponse.ContentEncoding.ToLower().Contains("deflate")){
                        _streamReader = new StreamReader(new DeflateStream(_httpWebResponse.GetResponseStream(), CompressionMode.Decompress));
                    }
                    else {
                        _streamReader = new StreamReader(_httpWebResponse.GetResponseStream(), _httpWebResponse.ContentEncoding.Length != 0 ?
                        System.Text.Encoding.GetEncoding(_httpWebResponse.ContentEncoding) : System.Text.Encoding.GetEncoding(1252));
                    }
                    
                    
                    return _streamReader.ReadToEnd();
                }
                finally {
                    if (_streamReader != null) {
                        try {
                            _streamReader.Close();
                            _streamReader.Dispose();
                        }
                        finally {
                            _streamReader = null;
                        }
                    }
                }
            }
        #endregion // Free Coding
    } // ConnectionProxy
    
} // vApus.Stresstest</Code>
          <ShowInGui>True</ShowInGui>
          <IsDefaultItem>False</IsDefaultItem>
          <IsEmpty>False</IsEmpty>
        </ConnectionProxyCode>
      </Items>
      <Label>PageSpeedOnline STABLE-20171109165852</Label>
      <ShowInGui>True</ShowInGui>
      <IsDefaultItem>False</IsDefaultItem>
      <IsEmpty>False</IsEmpty>
    </ConnectionProxy>
  </Items>
</ConnectionProxies>
