<ConnectionProxies>
  <Items>
    <ConnectionProxy>
      <Items>
        <ConnectionProxyRuleSet>
          <Items>
            <ConnectionProxySyntaxItem>
              <Items />
              <DefaultValue>
              </DefaultValue>
              <Description>
              </Description>
              <Label>IP</Label>
              <ShowInGui>True</ShowInGui>
              <IsDefaultItem>False</IsDefaultItem>
              <IsEmpty>False</IsEmpty>
            </ConnectionProxySyntaxItem>
            <ConnectionProxySyntaxItem>
              <Items>
                <Rule>
                  <Items />
                  <RegExp>
                  </RegExp>
                  <IgnoreCase>False</IgnoreCase>
                  <ValueType>intType</ValueType>
                  <DisplayAsPassword>False</DisplayAsPassword>
                  <Description>
                  </Description>
                  <Label>
                  </Label>
                  <ShowInGui>True</ShowInGui>
                  <IsDefaultItem>False</IsDefaultItem>
                  <IsEmpty>False</IsEmpty>
                </Rule>
              </Items>
              <DefaultValue>
              </DefaultValue>
              <Description>Examples: application/x-www-form-urlencoded; application/x-amf</Description>
              <Label>Port</Label>
              <ShowInGui>True</ShowInGui>
              <IsDefaultItem>False</IsDefaultItem>
              <IsEmpty>False</IsEmpty>
            </ConnectionProxySyntaxItem>
          </Items>
          <Connected>False</Connected>
          <TracertField>1</TracertField>
          <ChildDelimiter>;</ChildDelimiter>
          <Description>
          </Description>
          <ShowInGui>True</ShowInGui>
          <IsDefaultItem>False</IsDefaultItem>
          <IsEmpty>False</IsEmpty>
        </ConnectionProxyRuleSet>
        <ConnectionProxyCode>
          <Items />
          <Code>/*
    ConnectionProxy generated by vApus
    vApus is Copyrighted by Sizing Servers Lab
    University College of West-Flanders, Department GKG
    
    Note: If you want to edit this connection proxy code you need to know what you are doing. You might break your stresstest.
    
    VERSION STABLE-20171109165852
*/

//This connection proxy serves at sending bytes over a socket to the server, those bytes are in the scenario represented as strings e.g. "0,0,1,12,255,1,0".

// The following line is used to add references when compiling, you can edit this here or in the references tab page. Please use the 'Browse...' button for dlls that are not in the GAC.
// dllreferences:System.dll;System.Data.dll;vApus.Util.dll;vApus.SolutionTree.dll;vApus.Stresstest.dll;System.Net.dll;

#region Preprocessors
    // Enable debug mode
    //#define DEBUGMODE
#endregion // Preprocessors

#region Usings
    using System;
    using System.Data;
    using System.Diagnostics;
    using vApus.Util;
    using System.Net.Sockets;
    using System.Collections.Generic;
#endregion // Usings

namespace vApus.StressTest {
    public class ConnectionProxy : IConnectionProxy {
        
        #region Fields
            Stopwatch _stopwatch = new Stopwatch();
            bool _isDisposed;
            // Please do not edit the following lines (RuleSetFields).
            // -- RuleSetFields --
            System.String _connectionProxySyntaxItem0 = string.Empty; // IP
            System.Int32 _connectionProxySyntaxItem1; // Port
            // -- RuleSetFields --
            
            SocketWrapper _socketWrapper;
            
            const int _sendBufferSize = 8912, _receiveBufferSize = 8912;
            const int _content = 2;
        #endregion // Fields
        
        #region Properties
            public bool IsConnectionOpen { get { return _socketWrapper != null &amp;&amp; _socketWrapper.Connected; } }
            public bool IsDisposed { get { return _isDisposed; } }
        #endregion // Properties
        
        public ConnectionProxy() {
            var socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            socket.SendTimeout = 3000;
            socket.ReceiveTimeout = 3000;
            
            socket.SendBufferSize = _sendBufferSize;
            socket.ReceiveBufferSize = _receiveBufferSize;
            
            _socketWrapper = new SocketWrapper(_connectionProxySyntaxItem0, _connectionProxySyntaxItem1, socket); 
        }
        
        #region Functions
            public void TestConnection(out string error) {
                error = null;
                try {
                    OpenConnection();
                    if (IsConnectionOpen) {
                        CloseConnection();
                    }
                    else {
                        error = "Could not open the connection.";
                    }
                }
                catch (Exception ex) {
                    error = ex.ToString();
                }
            }
            
            public void OpenConnection() {
                if (!IsConnectionOpen) {
                    _socketWrapper.Connect(3000, 2);
                }
            }
            
            public void CloseConnection() {
                if (IsConnectionOpen) {
                    _socketWrapper.Close();
                }
            }
            
            public void SendAndReceive(StringTree parameterizedRequest, out DateTime sentAt, out TimeSpan timeToLastByte, out string meta, out Exception exception) {
                exception = null;
                meta = null;
                
                //
                // parameterizedRequest is the request parsed to a String Tree using the Scenario Rule Set.
                // String Tree is a simple class: it can have either a value (string Value { get; }) or childs who are also String Trees (e.g. StringTree foo = parameterizedRequest[n] where n is an integer value).
                // You can get the combined value of the childs using the function CombineValues() (not shallow, returns a string), this uses the child delimiters in the rule set to glue these values together.
                //
                
                sentAt = HighResolutionDateTime.UtcNow;
                
                if (_isDisposed) {
                    timeToLastByte = new TimeSpan();
                    return;
                }
                try {
                    _stopwatch.Start();
                    try {
                        string request = parameterizedRequest[_content].Value;
                        
                        // A parameterizing solution.
                        // string find = "0,1,12,255";
                        // int index = request.IndexOf(find);
                        
                        byte[] bytes = ParseRequestToBytes(request);
                        
                        // bytes = RemoveAt(bytes, index, find.Length);
                        // bytes = InsertAt(bytes, index, "bar"); The string "bar" will be serialized to bytes.
                        
                        // or
                        
                        // var clp = ASTNode.CustomListParameters[0] as CustomListParameter;
                        // clp.Next();
                        // bytes = InsertAt(bytes, index, clp.Value);
                        
                        _socketWrapper.SendBytes(bytes);
                        _socketWrapper.ReceiveBytes();
                    }
                    catch (Exception ex) {
                        exception = ex;
                        #if DEBUGMODE
                            EventPanel.AddEvent("SendAndReceive Exception: " + parameterizedRequest.CombineValues() + " " + exception);
                        #endif
                    }
                }
                catch {
                    //
                    // Always throw the exception, if any, if 'stuff' cannot be closed.
                    // vApus will handle it as a connection problem.
                    //
                    
                    throw;
                }
                finally {
                    _stopwatch.Stop();
                    timeToLastByte = _stopwatch.Elapsed;
                    _stopwatch.Reset();
                }
            }
            
            public void Dispose() {
                if (!_isDisposed) {
                    _isDisposed = true;
                    CloseConnection();
                    _socketWrapper = null;
                }
            }
        #endregion // Functions
        
        #region Free Coding
            private byte[] ParseRequestToBytes(string s) {
                string[] array = s.Split(',');
                byte[] bytes = new byte[array.Length];
                
                for (int i = 0; i &lt; array.Length; i++) {
                    bytes[i] = (byte)int.Parse(array[i]);
                }
                
                return bytes;
            }
            
            // Following two fx's can be used for a parameterizing solution in the connection proxy code.
            private byte[] RemoveAt(byte[] source, int index, int count) {
                var newB = new List&lt;byte&gt;(index + 1);
                int exclusiveLastIndex = index + count;
                for (int i = 0; i &lt; source.Length; i++) {
                    if (i &lt; index || i &gt; exclusiveLastIndex) {
                        newB.Add(source[i]);
                    }
                }
                return newB.ToArray();
            }
            
            // Replaces the bytes at the given index with the bytes of s.
            private byte[] InsertAt(byte[] source, int index, string s) {
                byte[] toInsert = System.Text.Encoding.Default.GetBytes(s);
                var newB = new List&lt;byte&gt;(source.Length + toInsert.Length);
                for (int i = 0; i &lt; index; i++) {
                    if (i &gt;= source.Length) {
                        break;
                    }
                    newB.Add(source[i]);
                }
                newB.AddRange(toInsert);
                for (int i = index; i &lt; source.Length; i++) {
                    newB.Add(source[i]);
                }
                return newB.ToArray();
            }
        #endregion // Free Coding
    } // ConnectionProxy
} // vApus.Stresstest</Code>
          <ShowInGui>True</ShowInGui>
          <IsDefaultItem>False</IsDefaultItem>
          <IsEmpty>False</IsEmpty>
        </ConnectionProxyCode>
      </Items>
      <Label>TCP Binary STABLE-20171109165852</Label>
      <ShowInGui>True</ShowInGui>
      <IsDefaultItem>False</IsDefaultItem>
      <IsEmpty>False</IsEmpty>
    </ConnectionProxy>
  </Items>
</ConnectionProxies>
