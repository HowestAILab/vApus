<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SpreadsheetLight</name>
    </assembly>
    <members>
        <member name="T:SpreadsheetLight.SLRstType">
            <summary>
            Encapsulates properties and methods for handling rich string types. This includes the CommentText class, InlineString class and SharedStringItem class. This simulates the (abstract) DocumentFormat.OpenXml.Spreadsheet.RstType class.
            </summary>
            <remarks>This also take on double duty as rich text for other purposes such as charts. We do this so other developers don't have to learn another class.</remarks>
        </member>
        <member name="M:SpreadsheetLight.SLRstType.#ctor">
            <summary>
            Initializes an instance of SLRstType. It is recommended to use CreateRstType() of the SLDocument class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLRstType.SetText(System.String)">
            <summary>
            Set the text. If text formatting is needed, use one of the AppendText() functions.
            </summary>
            <param name="Text">The text.</param>
        </member>
        <member name="M:SpreadsheetLight.SLRstType.GetText">
            <summary>
            Get the text. This is the plain text string, and not the rich text runs.
            </summary>
            <returns>The plain text.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLRstType.GetRuns">
            <summary>
            Get a list of rich text runs.
            </summary>
            <returns>A list of rich text runs.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLRstType.ReplaceRuns(System.Collections.Generic.List{SpreadsheetLight.SLRun})">
            <summary>
            Replace the internal list of rich text runs.
            </summary>
            <param name="Runs">The new list of rich text runs for replacing.</param>
        </member>
        <member name="M:SpreadsheetLight.SLRstType.AppendText(System.String)">
            <summary>
            Append given text in the current theme's minor font and default font size.
            </summary>
            <param name="Text">The text.</param>
        </member>
        <member name="M:SpreadsheetLight.SLRstType.AppendText(System.String,SpreadsheetLight.SLFont)">
            <summary>
            Append given text with a given font style.
            </summary>
            <param name="Text">The text.</param>
            <param name="TextFont">The font style.</param>
        </member>
        <member name="M:SpreadsheetLight.SLRstType.FromCommentText(DocumentFormat.OpenXml.Spreadsheet.CommentText)">
            <summary>
            Form an SLRstType from DocumentFormat.OpenXml.Spreadsheet.CommentText class.
            </summary>
            <param name="Comment">A source DocumentFormat.OpenXml.Spreadsheet.CommentText class.</param>
        </member>
        <member name="M:SpreadsheetLight.SLRstType.ToCommentText">
            <summary>
            Form a DocumentFormat.OpenXml.Spreadsheet.CommentText class from this SLRstType class.
            </summary>
            <returns>A DocumentFormat.OpenXml.Spreadsheet.CommentText class.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLRstType.FromInlineString(DocumentFormat.OpenXml.Spreadsheet.InlineString)">
            <summary>
            Form an SLRstType from DocumentFormat.OpenXml.Spreadsheet.InlineString class.
            </summary>
            <param name="RichText">A source DocumentFormat.OpenXml.Spreadsheet.InlineString class.</param>
        </member>
        <member name="M:SpreadsheetLight.SLRstType.ToInlineString">
            <summary>
            Form a DocumentFormat.OpenXml.Spreadsheet.InlineString class from this SLRstType class.
            </summary>
            <returns>A DocumentFormat.OpenXml.Spreadsheet.InlineString class.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLRstType.FromSharedStringItem(DocumentFormat.OpenXml.Spreadsheet.SharedStringItem)">
            <summary>
            Form an SLRstType from DocumentFormat.OpenXml.Spreadsheet.SharedStringItem class.
            </summary>
            <param name="SharedString">A source DocumentFormat.OpenXml.Spreadsheet.SharedStringItem class.</param>
        </member>
        <member name="M:SpreadsheetLight.SLRstType.ToSharedStringItem">
            <summary>
            Form a DocumentFormat.OpenXml.Spreadsheet.SharedStringItem class from this SLRstType class.
            </summary>
            <returns>A DocumentFormat.OpenXml.Spreadsheet.SharedStringItem class.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLRstType.ToPlainString">
            <summary>
            Form a string with all the text formatting stripped out.
            </summary>
            <returns>An unformatted text string.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLRstType.Clone">
            <summary>
            Clone a new instance of SLRstType.
            </summary>
            <returns>A cloned instance of this SLRstType.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLTool.CalculateOuterBoundsOfRotatedRectangle(System.Single,System.Single,System.Double)">
            <summary>
            
            </summary>
            <param name="Width"></param>
            <param name="Height"></param>
            <param name="Angle">This is in degrees, not radians.</param>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetLight.SLTool.GetDefaultRowHeadingWidth(System.String,System.Boolean)">
            <summary>
            This returns the width in points
            </summary>
            <param name="FontName"></param>
            <param name="ThrowExceptionsIfAny"></param>
            <returns></returns>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLLineChartOptions">
            <summary>
            Chart customization options for line charts.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLLineChartOptions.#ctor">
            <summary>
            Initializes an instance of SLLineChartOptions. It is recommended to use SLChart.CreateLineChartOptions().
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLLineChartOptions.Clone">
            <summary>
            Clone an instance of SLLineChartOptions.
            </summary>
            <returns>An SLLineChartOptions object.</returns>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLLineChartOptions.GapDepth">
            <summary>
            The gap depth between line clusters (between different data series) as a percentage of bar or column width, ranging between 0% and 500% (both inclusive). The default is 150%. This is only used for 3D chart version.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLLineChartOptions.HasDropLines">
            <summary>
            Indicates if the line chart has drop lines.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLLineChartOptions.DropLines">
            <summary>
            Drop lines properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLLineChartOptions.HasHighLowLines">
            <summary>
            Indicates if the line chart has high-low lines. This is not applicable for 3D line charts.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLLineChartOptions.HighLowLines">
            <summary>
            High-low lines properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLLineChartOptions.HasUpDownBars">
            <summary>
            Indicates if the line chart has up-down bars. This is not applicable for 3D line charts.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLLineChartOptions.UpDownBars">
            <summary>
            Up-down bars properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLLineChartOptions.Smooth">
            <summary>
            Whether the line connecting data points use C splines (instead of straight lines).
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSheetType.DialogSheet">
            <summary>
            I hope I don't have to support this... This complements macro-enabled Excel files?
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSheetType.Macrosheet">
            <summary>
            In future? Is this for macro-enabled Excel files?
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLWorkbook.GetNextPossibleTableName">
            <summary>
            Call RefreshPossibleTableId() first!
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetLight.SLWorkbook.GetNextPossiblePivotTableName">
            <summary>
            Call RefreshPossiblePivotTableId() first!
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetLight.SLWorkbook.AddCalculationCell(SpreadsheetLight.SLCalculationCell)">
            <summary>
            Adds a calculation cell if it doesn't already exist
            </summary>
            <param name="cc"></param>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLSeriesAxis">
            <summary>
            Encapsulates properties and methods for setting series axes in charts.
            This simulates the DocumentFormat.OpenXml.Drawing.Charts.SeriesAxis class.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.EGAxShared">
            <summary>
            For CategoryAxis, ValueAxis, SeriesAxis and DateAxis from namespace DocumentFormat.OpenXml.Drawing.Charts.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLChartAlignment">
            <summary>
            Encapsulates properties and methods for setting alignment in charts.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChartAlignment.#ctor">
            <summary>
            Initializes an instance of SLChartAlignment.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChartAlignment.SetHorizontalTextDirection(SpreadsheetLight.Drawing.SLTextVerticalAlignment,System.Decimal)">
            <summary>
            Set a horizontal text direction.
            </summary>
            <param name="TextAlignment">The vertical text alignment in horizontal direction.</param>
            <param name="CustomAngle">Rotation angle, ranging from -90 to 90 degrees. Accurate to 1/60000 of a degree.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChartAlignment.SetStackedTextDirection(SpreadsheetLight.Drawing.SLTextHorizontalAlignment,System.Boolean)">
            <summary>
            Set a stacked (vertical) text direction.
            </summary>
            <param name="TextAlignment">The horizontal text alignment in vertical direction.</param>
            <param name="LeftToRight">True if the text runs left-to-right. False if the text runs right-to-left.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChartAlignment.SetTextRotated90Degrees">
            <summary>
            Set the text rotated 90 degrees.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChartAlignment.SetTextRotated270Degrees">
            <summary>
            Set the text rotated 270 degrees.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChartAlignment.RemoveTextAlignment">
            <summary>
            Remove all text alignment.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.EGAxShared.InReverseOrder">
            <summary>
            Display axis values in reverse order.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.EGAxShared.ShowMajorGridlines">
            <summary>
            Whether major gridlines are shown.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.EGAxShared.MajorGridlines">
            <summary>
            Major gridlines properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.EGAxShared.ShowMinorGridlines">
            <summary>
            Whether minor gridlines are shown.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.EGAxShared.MinorGridlines">
            <summary>
            Minor gridlines properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.EGAxShared.ShowTitle">
            <summary>
            Whether the axis title is shown.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.EGAxShared.Title">
            <summary>
            Axis title properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.EGAxShared.FormatCode">
            <summary>
            Format code for the axis. If you set a custom format code, you might also want to set SourceLinked to false.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.EGAxShared.SourceLinked">
            <summary>
            Whether the format code is linked to the data source.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.EGAxShared.MajorTickMark">
            <summary>
            Major tick mark type.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.EGAxShared.MinorTickMark">
            <summary>
            Minor tick mark type.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.EGAxShared.TickLabelPosition">
            <summary>
            Position of axis labels.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.EGAxShared.Fill">
            <summary>
            Fill properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.EGAxShared.Line">
            <summary>
            Line properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.EGAxShared.Shadow">
            <summary>
            Shadow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.EGAxShared.Glow">
            <summary>
            Glow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.EGAxShared.SoftEdge">
            <summary>
            Soft edge properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.EGAxShared.Format3D">
            <summary>
            3D format properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLSeriesAxis.TickLabelSkip">
            <summary>
            This is the interval between labels, and is at least 1. A suggested range is 1 to 255 (both inclusive).
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLSeriesAxis.TickMarkSkip">
            <summary>
            This is the interval between tick marks, and is at least 1. A suggested range is 1 to 31999 (both inclusive).
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLMarker">
            <summary>
            Encapsulates properties and methods for setting data markers in charts.
            This simulates the DocumentFormat.OpenXml.Drawing.Charts.Marker class.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLMarker.Symbol">
            <summary>
            Marker symbol.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLMarker.Size">
            <summary>
            Range is 2 to 72 inclusive. Default is 5 in Open XML but Excel uses 7.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLMarker.Fill">
            <summary>
            Fill properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLMarker.Line">
            <summary>
            Line properties.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLNumberDataSourceType">
            <summary>
            For BubbleSize, Minus, Plus, Values, YValues
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLStringReference.Points">
            <summary>
            This takes the place of StringCache
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Drawing.SLReflection">
            <summary>
            Encapsulates properties and methods for specifying reflection effects.
            This simulates the DocumentFormat.OpenXml.Drawing.Reflection class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLReflection.#ctor">
            <summary>
            Initializes an instance of SLReflection.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLReflection.SetTightReflection">
            <summary>
            Set a tight reflection.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLReflection.SetTightReflection(System.Decimal)">
            <summary>
            Set a tight reflection.
            </summary>
            <param name="Offset">Offset distance of the reflection, ranging from 0 pt to 2147483647 pt. A suggested range is 0 pt to 100 pt. Accurate to 1/12700 of a point. Default value is 0 pt.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLReflection.SetHalfReflection">
            <summary>
            Set a half reflection.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLReflection.SetHalfReflection(System.Decimal)">
            <summary>
            Set a half reflection.
            </summary>
            <param name="Offset">Offset distance of the reflection, ranging from 0 pt to 2147483647 pt. A suggested range is 0 pt to 100 pt. Accurate to 1/12700 of a point. Default value is 0 pt.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLReflection.SetFullReflection">
            <summary>
            Set a full reflection.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLReflection.SetFullReflection(System.Decimal)">
            <summary>
            Set a full reflection.
            </summary>
            <param name="Offset">Offset distance of the reflection, ranging from 0 pt to 2147483647 pt. A suggested range is 0 pt to 100 pt. Accurate to 1/12700 of a point. Default value is 0 pt.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLReflection.SetReflection(System.Decimal,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Set reflection.
            </summary>
            <param name="Transparency">Transparency ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
            <param name="Size">Size of reflection ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
            <param name="Distance">Distance of the reflection from the origin, ranging from 0 pt to 2147483647 pt. A suggested range is 0 pt to 100 pt. Accurate to 1/12700 of a point. Default value is 0 pt.</param>
            <param name="Blur">Blur radius of the reflection, ranging from 0 pt to 2147483647 pt. A suggested range is 0 pt to 100 pt. Accurate to 1/12700 of a point. Default value is 0 pt.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLReflection.SetReflection(System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,DocumentFormat.OpenXml.Drawing.RectangleAlignmentValues,System.Boolean)">
            <summary>
            Set a reflection of the picture.
            </summary>
            <param name="BlurRadius">Blur radius of the reflection, ranging from 0 pt to 2147483647 pt. A suggested range is 0 pt to 100 pt. Accurate to 1/12700 of a point. Default value is 0 pt.</param>
            <param name="StartOpacity">Start opacity of the reflection, ranging from 0% to 100%. Accurate to 1/1000 of a percent. Default value is 100%.</param>
            <param name="StartPosition">Position of start opacity of the reflection, ranging from 0% to 100%. Accurate to 1/1000 of a percent. Default value is 0%.</param>
            <param name="EndAlpha">End alpha of the reflection, ranging from 0% to 100%. Accurate to 1/1000 of a percent. Default value is 0%.</param>
            <param name="EndPosition">Position of end alpha of the reflection, ranging from 0% to 100%. Accurate to 1/1000 of a percent. Default value is 100%.</param>
            <param name="Distance">Distance of the reflection from the origin, ranging from 0 pt to 2147483647 pt. A suggested range is 0 pt to 100 pt. Accurate to 1/12700 of a point. Default value is 0 pt.</param>
            <param name="Direction">Direction of the alpha gradient relative to the origin, ranging from 0 degrees to 359.9 degrees. 0 degrees means to the right, 90 degrees is below, 180 degrees is to the right, and 270 degrees is above. Accurate to 1/60000 of a degree. Default value is 0 degrees.</param>
            <param name="FadeDirection">Direction to fade the reflection, ranging from 0 degrees to 359.9 degrees. 0 degrees means to the right, 90 degrees is below, 180 degrees is to the right, and 270 degrees is above. Accurate to 1/60000 of a degree. Default value is 90 degrees.</param>
            <param name="HorizontalRatio">Horizontal scaling ratio in percentage. A negative ratio flips the reflection horizontally. Accurate to 1/1000 of a percent. Default value is 100%.</param>
            <param name="VerticalRatio">Vertical scaling ratio in percentage. A negative ratio flips the reflection vertically. Accurate to 1/1000 of a percent. Default value is 100%.</param>
            <param name="HorizontalSkew">Horizontal skew angle, ranging from -90 degrees to 90 degrees. Accurate to 1/60000 of a degree. Default value is 0 degrees.</param>
            <param name="VerticalSkew">Vertical skew angle, ranging from -90 degrees to 90 degrees. Accurate to 1/60000 of a degree. Default value is 0 degrees.</param>
            <param name="Alignment">Sets the origin for the size scaling, angle skews and distance offsets. Default value is Bottom.</param>
            <param name="RotateWithShape">True if the reflection should rotate. False otherwise. Default value is true.</param>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLReflection.BlurRadius">
            <summary>
            Blur radius of the reflection, ranging from 0 pt to 2147483647 pt. A suggested range is 0 pt to 100 pt. Accurate to 1/12700 of a point. Default value is 0 pt.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLReflection.StartOpacity">
            <summary>
            Start opacity of the reflection, ranging from 0% to 100%. Accurate to 1/1000 of a percent. Default value is 100%.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLReflection.StartPosition">
            <summary>
            Position of start opacity of the reflection, ranging from 0% to 100%. Accurate to 1/1000 of a percent. Default value is 0%.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLReflection.EndAlpha">
            <summary>
            End alpha of the reflection, ranging from 0% to 100%. Accurate to 1/1000 of a percent. Default value is 0%.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLReflection.EndPosition">
            <summary>
            Position of end alpha of the reflection, ranging from 0% to 100%. Accurate to 1/1000 of a percent. Default value is 100%.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLReflection.Distance">
            <summary>
            Distance of the reflection from the origin, ranging from 0 pt to 2147483647 pt. A suggested range is 0 pt to 100 pt. Accurate to 1/12700 of a point. Default value is 0 pt.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLReflection.Direction">
            <summary>
            Direction of the alpha gradient, ranging from 0 degrees to 359.9 degrees. 0 degrees means to the right, 90 degrees is below, 180 degrees is to the right, and 270 degrees is above. Accurate to 1/60000 of a degree. Default value is 0 degrees.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLReflection.FadeDirection">
            <summary>
            Direction to fade the reflection, ranging from 0 degrees to 359.9 degrees. 0 degrees means to the right, 90 degrees is below, 180 degrees is to the right, and 270 degrees is above. Accurate to 1/60000 of a degree. Default value is 90 degrees.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLReflection.HorizontalRatio">
            <summary>
            Horizontal scaling ratio in percentage. A negative ratio flips the reflection horizontally. Accurate to 1/1000 of a percent. Default value is 100%.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLReflection.VerticalRatio">
            <summary>
            Vertical scaling ratio in percentage. A negative ratio flips the reflection vertically. Accurate to 1/1000 of a percent. Default value is 100%.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLReflection.HorizontalSkew">
            <summary>
            Horizontal skew angle, ranging from -90 degrees to 90 degrees. Accurate to 1/60000 of a degree. Default value is 0 degrees.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLReflection.VerticalSkew">
            <summary>
            Vertical skew angle, ranging from -90 degrees to 90 degrees. Accurate to 1/60000 of a degree. Default value is 0 degrees.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLReflection.Alignment">
            <summary>
            Sets the origin for the size scaling, angle skews and distance offsets. Default value is Bottom.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLReflection.RotateWithShape">
            <summary>
            True if the reflection should rotate as well. False otherwise.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLDocument">
            <summary>
            Encapsulates the main properties and methods to create and manipulate a spreadsheet.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CreateFont">
            <summary>
            Creates an instance of SLFont with theme information.
            </summary>
            <returns>An SLFont with theme information.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CreatePatternFill">
            <summary>
            Creates an instance of SLPatternFill with theme information.
            </summary>
            <returns>An SLPatternFill with theme information.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CreateGradientFill">
            <summary>
            Creates an instance of SLGradientFill with theme information.
            </summary>
            <returns>An SLGradientFill with theme information.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CreateFill">
            <summary>
            Creates an instance of SLFill with theme information.
            </summary>
            <returns>An SLFill with theme information.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CreateBorder">
            <summary>
            Creates an instance of SLBorder with theme information.
            </summary>
            <returns>An SLBorder with theme information.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CreateRstType">
            <summary>
            Creates an instance of SLRstType with theme information.
            </summary>
            <returns>An SLRstType with theme information.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CreateStyle">
            <summary>
            Creates an instance of SLStyle with theme information.
            </summary>
            <returns>An SLStyle with theme information.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CreateComment">
            <summary>
            Creates an instance of SLComment with theme information.
            </summary>
            <returns>An SLComment with theme information.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CreateDataValidation(System.String)">
            <summary>
            Creates an instance of SLDataValidation.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <returns>An SLDataValidation.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CreateDataValidation(System.String,System.String)">
            <summary>
            Creates an instance of SLDataValidation.
            </summary>
            <param name="StartCellReference">The cell reference of the start cell of the cell range, such as "A1". This is typically the top-left cell.</param>
            <param name="EndCellReference">The cell reference of the end cell of the cell range, such as "A1". This is typically the bottom-right cell.</param>
            <returns>An SLDataValidation.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CreateDataValidation(System.Int32,System.Int32)">
            <summary>
            Creates an instance of SLDataValidation.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <returns>An SLDataValidation.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CreateDataValidation(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an instance of SLDataValidation.
            </summary>
            <param name="StartRowIndex">The row index of the start row.</param>
            <param name="StartColumnIndex">The column index of the start column.</param>
            <param name="EndRowIndex">The row index of the end row.</param>
            <param name="EndColumnIndex">The column index of the end column.</param>
            <returns>An SLDataValidation.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CreateTable(System.String,System.String)">
            <summary>
            Creates an instance of SLTable, given cell references of opposite cells in a cell range.
            </summary>
            <param name="StartCellReference">The cell reference of the start cell of the cell range to be in the table, such as "A1". This is typically the top-left cell.</param>
            <param name="EndCellReference">The cell reference of the end cell of the cell range to be in the table, such as "A1". This is typically the bottom-right cell.</param>
            <returns>An SLTable with the required information.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CreateTable(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an instance of SLTable, given row and column indices of opposite cells in a cell range.
            </summary>
            <param name="StartRowIndex">The row index of the start row. This is typically the top row.</param>
            <param name="StartColumnIndex">The column index of the start column. This is typically the left-most column.</param>
            <param name="EndRowIndex">The row index of the end row. This is typically the bottom row.</param>
            <param name="EndColumnIndex">The column index of the end column. This is typically the right-most column.</param>
            <returns>An SLTable with the required information.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CreateSparklineGroup(System.String,System.String)">
            <summary>
            Creates an instance of SLSparklineGroup, given cell references of opposite cells in a cell range.
            </summary>
            <param name="StartCellReference">The cell reference of the start cell of the cell range to be in the sparkline, such as "A1". This is typically the top-left cell.</param>
            <param name="EndCellReference">The cell reference of the end cell of the cell range to be in the sparkline, such as "A1". This is typically the bottom-right cell.</param>
            <returns>An SLSparklineGroup with the required information.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CreateSparklineGroup(System.String,System.String,System.String)">
            <summary>
            Creates an instance of SLSparklineGroup, given cell references of opposite cells in a cell range.
            </summary>
            <param name="WorksheetName">The name of the source worksheet.</param>
            <param name="StartCellReference">The cell reference of the start cell of the cell range to be in the sparkline, such as "A1". This is typically the top-left cell.</param>
            <param name="EndCellReference">The cell reference of the end cell of the cell range to be in the sparkline, such as "A1". This is typically the bottom-right cell.</param>
            <returns>An SLSparklineGroup with the required information.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CreateSparklineGroup(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an instance of SLSparklineGroup, given row and column indices of opposite cells in a cell range.
            </summary>
            <param name="StartRowIndex">The row index of the start row. This is typically the top row.</param>
            <param name="StartColumnIndex">The column index of the start column. This is typically the left-most column.</param>
            <param name="EndRowIndex">The row index of the end row. This is typically the bottom row.</param>
            <param name="EndColumnIndex">The column index of the end column. This is typically the right-most column.</param>
            <returns>An SLSparklineGroup with the required information.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CreateSparklineGroup(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an instance of SLSparklineGroup, given row and column indices of opposite cells in a cell range.
            </summary>
            <param name="WorksheetName">The name of the source worksheet.</param>
            <param name="StartRowIndex">The row index of the start row. This is typically the top row.</param>
            <param name="StartColumnIndex">The column index of the start column. This is typically the left-most column.</param>
            <param name="EndRowIndex">The row index of the end row. This is typically the bottom row.</param>
            <param name="EndColumnIndex">The column index of the end column. This is typically the right-most column.</param>
            <returns>An SLSparklineGroup with the required information.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CreateChart(System.String,System.String)">
            <summary>
            Creates an instance of SLChart, given cell references of opposite cells in a cell range.
            </summary>
            <param name="StartCellReference">The cell reference of the start cell of the cell range to be in the chart, such as "A1". This is typically the top-left cell.</param>
            <param name="EndCellReference">The cell reference of the end cell of the cell range to be in the chart, such as "A1". This is typically the bottom-right cell.</param>
            <returns>An SLChart with the required information.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CreateChart(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            <strong>Obsolete. </strong>Creates an instance of SLChart, given cell references of opposite cells in a cell range and whether rows or columns contain the data series and if hidden data is used.
            </summary>
            <param name="StartCellReference">The cell reference of the start cell of the cell range to be in the chart, such as "A1". This is typically the top-left cell.</param>
            <param name="EndCellReference">The cell reference of the end cell of the cell range to be in the chart, such as "A1". This is typically the bottom-right cell.</param>
            <param name="RowsAsDataSeries">True if rows contain the data series. False if columns contain the data series.</param>
            <param name="ShowHiddenData">True if hidden data is used in the chart. False otherwise.</param>
            <returns>An SLChart with the required information.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CreateChart(System.String,System.String,SpreadsheetLight.Charts.SLCreateChartOptions)">
            <summary>
            Creates an instance of SLChart, given cell references of opposite cells in a cell range.
            </summary>
            <param name="StartCellReference">The cell reference of the start cell of the cell range to be in the chart, such as "A1". This is typically the top-left cell.</param>
            <param name="EndCellReference">The cell reference of the end cell of the cell range to be in the chart, such as "A1". This is typically the bottom-right cell.</param>
            <param name="Options">Chart creation options.</param>
            <returns>An SLChart with the required information.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CreateChart(System.String,System.String,System.String)">
            <summary>
            Creates an instance of SLChart, given cell references of opposite cells in a cell range.
            </summary>
            <param name="WorksheetName">The name of the source worksheet.</param>
            <param name="StartCellReference">The cell reference of the start cell of the cell range to be in the chart, such as "A1". This is typically the top-left cell.</param>
            <param name="EndCellReference">The cell reference of the end cell of the cell range to be in the chart, such as "A1". This is typically the bottom-right cell.</param>
            <returns>An SLChart with the required information.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CreateChart(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            <strong>Obsolete. </strong>Creates an instance of SLChart, given cell references of opposite cells in a cell range and whether rows or columns contain the data series.
            </summary>
            <param name="WorksheetName">The name of the source worksheet.</param>
            <param name="StartCellReference">The cell reference of the start cell of the cell range to be in the chart, such as "A1". This is typically the top-left cell.</param>
            <param name="EndCellReference">The cell reference of the end cell of the cell range to be in the chart, such as "A1". This is typically the bottom-right cell.</param>
            <param name="RowsAsDataSeries">True if rows contain the data series. False if columns contain the data series.</param>
            <param name="ShowHiddenData">True if hidden data is used in the chart. False otherwise.</param>
            <returns>An SLChart with the required information.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CreateChart(System.String,System.String,System.String,SpreadsheetLight.Charts.SLCreateChartOptions)">
            <summary>
            Creates an instance of SLChart, given cell references of opposite cells in a cell range.
            </summary>
            <param name="WorksheetName">The name of the source worksheet.</param>
            <param name="StartCellReference">The cell reference of the start cell of the cell range to be in the chart, such as "A1". This is typically the top-left cell.</param>
            <param name="EndCellReference">The cell reference of the end cell of the cell range to be in the chart, such as "A1". This is typically the bottom-right cell.</param>
            <param name="Options">Chart creation options.</param>
            <returns>An SLChart with the required information.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CreateChart(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an instance of SLChart, given row and column indices of opposite cells in a cell range.
            </summary>
            <param name="StartRowIndex">The row index of the start row. This is typically the top row.</param>
            <param name="StartColumnIndex">The column index of the start column. This is typically the left-most column.</param>
            <param name="EndRowIndex">The row index of the end row. This is typically the bottom row.</param>
            <param name="EndColumnIndex">The column index of the end column. This is typically the right-most column.</param>
            <returns>An SLChart with the required information.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CreateChart(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            <strong>Obsolete. </strong>Creates an instance of SLChart, given row and column indices of opposite cells in a cell range and whether rows or columns contain the data series and if hidden data is used.
            </summary>
            <param name="StartRowIndex">The row index of the start row. This is typically the top row.</param>
            <param name="StartColumnIndex">The column index of the start column. This is typically the left-most column.</param>
            <param name="EndRowIndex">The row index of the end row. This is typically the bottom row.</param>
            <param name="EndColumnIndex">The column index of the end column. This is typically the right-most column.</param>
            <param name="RowsAsDataSeries">True if rows contain the data series. False if columns contain the data series.</param>
            <param name="ShowHiddenData">True if hidden data is used in the chart. False otherwise.</param>
            <returns>An SLChart with the required information.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CreateChart(System.Int32,System.Int32,System.Int32,System.Int32,SpreadsheetLight.Charts.SLCreateChartOptions)">
            <summary>
            Creates an instance of SLChart, given row and column indices of opposite cells in a cell range.
            </summary>
            <param name="StartRowIndex">The row index of the start row. This is typically the top row.</param>
            <param name="StartColumnIndex">The column index of the start column. This is typically the left-most column.</param>
            <param name="EndRowIndex">The row index of the end row. This is typically the bottom row.</param>
            <param name="EndColumnIndex">The column index of the end column. This is typically the right-most column.</param>
            <param name="Options">Chart creation options.</param>
            <returns>An SLChart with the required information.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CreateChart(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an instance of SLChart, given row and column indices of opposite cells in a cell range.
            </summary>
            <param name="WorksheetName">The name of the source worksheet.</param>
            <param name="StartRowIndex">The row index of the start row. This is typically the top row.</param>
            <param name="StartColumnIndex">The column index of the start column. This is typically the left-most column.</param>
            <param name="EndRowIndex">The row index of the end row. This is typically the bottom row.</param>
            <param name="EndColumnIndex">The column index of the end column. This is typically the right-most column.</param>
            <returns>An SLChart with the required information.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CreateChart(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            <strong>Obsolete. </strong>Creates an instance of SLChart, given row and column indices of opposite cells in a cell range and whether rows or columns contain the data series and if hidden data is used.
            </summary>
            <param name="WorksheetName">The name of the source worksheet.</param>
            <param name="StartRowIndex">The row index of the start row. This is typically the top row.</param>
            <param name="StartColumnIndex">The column index of the start column. This is typically the left-most column.</param>
            <param name="EndRowIndex">The row index of the end row. This is typically the bottom row.</param>
            <param name="EndColumnIndex">The column index of the end column. This is typically the right-most column.</param>
            <param name="RowsAsDataSeries">True if rows contain the data series. False if columns contain the data series.</param>
            <param name="ShowHiddenData">True if hidden data is used in the chart. False otherwise.</param>
            <returns>An SLChart with the required information.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CreateChart(System.String,System.Int32,System.Int32,System.Int32,System.Int32,SpreadsheetLight.Charts.SLCreateChartOptions)">
            <summary>
            Creates an instance of SLChart, given row and column indices of opposite cells in a cell range.
            </summary>
            <param name="WorksheetName">The name of the source worksheet.</param>
            <param name="StartRowIndex">The row index of the start row. This is typically the top row.</param>
            <param name="StartColumnIndex">The column index of the start column. This is typically the left-most column.</param>
            <param name="EndRowIndex">The row index of the end row. This is typically the bottom row.</param>
            <param name="EndColumnIndex">The column index of the end column. This is typically the right-most column.</param>
            <param name="Options">Chart creation options.</param>
            <returns>An SLChart with the required information.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.ImportText(System.String,System.String)">
            <summary>
            Import a text file as a data source, with the first data row and first data column at a specific cell.
            </summary>
            <param name="FileName">The file name.</param>
            <param name="AnchorCellReference">The anchor cell reference, such as "A1".</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.ImportText(System.String,System.String,SpreadsheetLight.SLTextImportOptions)">
            <summary>
            Import a text file as a data source, with the first data row and first data column at a specific cell.
            </summary>
            <param name="FileName">The file name.</param>
            <param name="AnchorCellReference">The anchor cell reference, such as "A1".</param>
            <param name="Options">Text import options.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.ImportText(System.String,System.Int32,System.Int32)">
            <summary>
            Import a text file as a data source, with the first data row and first data column at a specific cell.
            </summary>
            <param name="FileName">The file name.</param>
            <param name="AnchorRowIndex">The row index of the anchor cell.</param>
            <param name="AnchorColumnIndex">The column index of the anchor cell.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.ImportText(System.String,System.Int32,System.Int32,SpreadsheetLight.SLTextImportOptions)">
            <summary>
            Import a text file as a data source, with the first data row and first data column at a specific cell.
            </summary>
            <param name="FileName">The file name.</param>
            <param name="AnchorRowIndex">The row index of the anchor cell.</param>
            <param name="AnchorColumnIndex">The column index of the anchor cell.</param>
            <param name="Options">Text import options.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.ImportDataTable(System.String,System.Data.DataTable,System.Boolean)">
            <summary>
            Import a System.Data.DataTable as a data source, with the first data row and first data column at a specific cell.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <param name="Data">The data table.</param>
            <param name="IncludeHeader">True if the data table's column names are to be used in the first row as a header row. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.ImportDataTable(System.Int32,System.Int32,System.Data.DataTable,System.Boolean)">
            <summary>
            Import a System.Data.DataTable as a data source, with the first data row and first data column at a specific cell.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <param name="Data">The data table.</param>
            <param name="IncludeHeader">True if the data table's column names are to be used in the first row as a header row. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.#ctor">
            <summary>
            Create a new spreadsheet with a worksheet with the default sheet name.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.#ctor(SpreadsheetLight.SLThemeTypeValues)">
            <summary>
            Create a new spreadsheet with a selected theme of fonts and colors.
            </summary>
            <param name="ThemeType">The selected theme.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.#ctor(SpreadsheetLight.SLThemeSettings)">
            <summary>
            Create a new spreadsheet with a custom theme.
            </summary>
            <param name="ThemeSettings">Custom theme settings.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.#ctor(System.String)">
            <summary>
            Open an existing spreadsheet, with the first available worksheet loaded.
            Note that the first available worksheet may not be visible, nor in the order you think it is.
            </summary>
            <param name="SpreadsheetFileName">The file name of the existing spreadsheet.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.#ctor(System.String,System.String)">
            <summary>
            Open an existing spreadsheet, with the desired worksheet ready for use.
            This optimizes loading so the desired worksheet's contents are loaded directly instead of first loading the first available worksheet.
            Note that if the given sheet name doesn't exist, the first available worksheet is loaded.
            </summary>
            <param name="SpreadsheetFileName">The file name of the existing spreadsheet.</param>
            <param name="SheetNameOnOpen">The sheet name of desired worksheet on opening the spreadsheet.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.#ctor(System.IO.Stream)">
            <summary>
            Open an existing spreadsheet from a Stream, with the first available worksheet loaded.
            Note that the first available worksheet may not be visible, nor in the order you think it is.
            </summary>
            <param name="SpreadsheetStream">Stream containing spreadsheet content.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.#ctor(System.IO.Stream,System.String)">
            <summary>
            Open an existing spreadsheet from a Stream, with the desired worksheet ready for use.
            This optimizes loading so the desired worksheet's contents are loaded directly instead of first loading the first available worksheet.
            Note that if the given sheet name doesn't exist, the first available worksheet is loaded.
            </summary>
            <param name="SpreadsheetStream">Stream containing spreadsheet content.</param>
            <param name="SheetNameOnOpen">The sheet name of desired worksheet on opening the spreadsheet.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.WriteTabSelectedWorksheet">
            <summary>
            Make sure to call this only after all worksheets are done! But before writing the workbook!
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.Save">
            <summary>
            Saves the spreadsheet. If it's a newly created spreadsheet, the default blank file name is used. If it's an existing spreadsheet, the given file name is used. WARNING: The existing spreadsheet will be overwritten without prompts.
            NOTE: This is a terminal method, meaning all internal memory stores will be nulled, cleared and nuked after executing this method. If you want some data, get it before this.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SaveAs(System.String)">
            <summary>
            Saves the spreadsheet to a given file name.
            NOTE: This is a terminal method, meaning all internal memory stores will be nulled, cleared and nuked after executing this method. If you want some data, get it before this.
            </summary>
            <param name="FileName">The file name of the spreadsheet to be saved to.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SaveAs(System.IO.Stream)">
            <summary>
            Saves the spreadsheet to a stream.
            NOTE: This is a terminal method, meaning all internal memory stores will be nulled, cleared and nuked after executing this method. If you want some data, get it before this.
            </summary>
            <param name="OutputStream">The output stream.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CloseWithoutSaving">
            <summary>
            Close the spreadsheet without saving.
            NOTE: This is a terminal method, meaning all internal memory stores will be nulled, cleared and nuked after executing this method. If you want some data, get it before this.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.Dispose">
            <summary>
            Releases all resources.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.Sort(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sort data by column.
            </summary>
            <param name="StartCellReference">The cell reference of the start cell of the cell range to be sorted, such as "A1". This is typically the top-left cell.</param>
            <param name="EndCellReference">The cell reference of the end cell of the cell range to be sorted, such as "A1". This is typically the bottom-right cell.</param>
            <param name="SortByColumnName">The column name of the column to be sorted by, such as "AA".</param>
            <param name="SortAscending">True to sort in ascending order. False to sort in descending order.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.Sort(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Sort data by row.
            </summary>
            <param name="StartCellReference">The cell reference of the start cell of the cell range to be sorted, such as "A1". This is typically the top-left cell.</param>
            <param name="EndCellReference">The cell reference of the end cell of the cell range to be sorted, such as "A1". This is typically the bottom-right cell.</param>
            <param name="SortByRowIndex">The row index of the row to be sorted by.</param>
            <param name="SortAscending">True to sort in ascending order. False to sort in descending order.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.Sort(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sort data by column.
            </summary>
            <param name="StartRowIndex">The row index of the start row. This is typically the top row.</param>
            <param name="StartColumnIndex">The column index of the start column. This is typically the left-most column.</param>
            <param name="EndRowIndex">The row index of the end row. This is typically the bottom row.</param>
            <param name="EndColumnIndex">The column index of the end column. This is typically the right-most column.</param>
            <param name="SortByColumnIndex">The column index of the column to be sorted by.</param>
            <param name="SortAscending">True to sort in ascending order. False to sort in descending order.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.Sort(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Sort data either by column or row.
            </summary>
            <param name="StartRowIndex">The row index of the start row. This is typically the top row.</param>
            <param name="StartColumnIndex">The column index of the start column. This is typically the left-most column.</param>
            <param name="EndRowIndex">The row index of the end row. This is typically the bottom row.</param>
            <param name="EndColumnIndex">The column index of the end column. This is typically the right-most column.</param>
            <param name="SortByColumn">True to sort by column. False to sort by row.</param>
            <param name="SortByIndex">The row or column index of the row or column to be sorted by, depending on <paramref name="SortByColumn"/></param>
            <param name="SortAscending">True to sort in ascending order. False to sort in descending order.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.WhatIsColumnName(System.Int32)">
            <summary>
            <strong>Obsolete. </strong>Get the column name given the column index.
            </summary>
            <param name="ColumnIndex">The column index.</param>
            <returns>The column name.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.WhatIsColumnIndex(System.String)">
            <summary>
            <strong>Obsolete. </strong>Get the column index given a cell reference or column name.
            </summary>
            <param name="Input">A cell reference such as "A1" or column name such as "A". If the input is invalid, then -1 is returned.</param>
            <returns>The column index.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.WhatIsCellReference(System.Int32,System.Int32)">
            <summary>
            <strong>Obsolete. </strong>Get the cell reference given the row index and column index.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <returns>The cell reference.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.WhatIsRowColumnIndex(System.String,System.Int32@,System.Int32@)">
            <summary>
            Get the row and column indices given a cell reference such as "C5". A return value indicates whether the conversion succeeded.
            </summary>
            <param name="CellReference">The cell reference in A1 format, such as "C5".</param>
            <param name="RowIndex">When this method returns, this contains the row index of the given cell reference if the conversion succeeded.</param>
            <param name="ColumnIndex">When this method returns, this contains the column index of the given cell reference if the conversion succeeded.</param>
            <returns>True if the conversion succeeded. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetWidth(SpreadsheetLight.SLMeasureUnitTypeValues,System.String)">
            <summary>
            Get the width of the specified column.
            </summary>
            <param name="Unit">The unit of the width to be returned.</param>
            <param name="ColumnName">The column name, such as "A".</param>
            <returns>The width in the specified unit type.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetWidth(SpreadsheetLight.SLMeasureUnitTypeValues,System.String,System.String)">
            <summary>
            Get the width of the specified columns.
            </summary>
            <param name="Unit">The unit of the width to be returned.</param>
            <param name="StartColumnName">The column name of the start column.</param>
            <param name="EndColumnName">The column name of the end column.</param>
            <returns>The width in the specified unit type.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetWidth(SpreadsheetLight.SLMeasureUnitTypeValues,System.Int32)">
            <summary>
            Get the width of the specified column.
            </summary>
            <param name="Unit">The unit of the width to be returned.</param>
            <param name="ColumnIndex">The column index.</param>
            <returns>The width in the specified unit type.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetWidth(SpreadsheetLight.SLMeasureUnitTypeValues,System.Int32,System.Int32)">
            <summary>
            Get the width of the specified columns.
            </summary>
            <param name="Unit">The unit of the width to be returned.</param>
            <param name="StartColumnIndex">The column index of the start column.</param>
            <param name="EndColumnIndex">The column index of the end column.</param>
            <returns>The width in the specified unit type.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetHeight(SpreadsheetLight.SLMeasureUnitTypeValues,System.Int32)">
            <summary>
            Get the height of the specified row.
            </summary>
            <param name="Unit">The unit of the height to be returned.</param>
            <param name="RowIndex">The row index.</param>
            <returns>The height in the specified unit type.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetHeight(SpreadsheetLight.SLMeasureUnitTypeValues,System.Int32,System.Int32)">
            <summary>
            Get the height of specified rows.
            </summary>
            <param name="Unit">The unit of the height to be returned.</param>
            <param name="StartRowIndex">The row index of the start row.</param>
            <param name="EndRowIndex">The row index of the end row.</param>
            <returns>The height in the specified unit type.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.HasDefinedName(System.String)">
            <summary>
            Indicates if there's an existing defined name given a name.
            </summary>
            <param name="Name">Name of defined name to check.</param>
            <returns>True if the defined name exists. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetDefinedName(System.String,System.String)">
            <summary>
            Set a given defined name. If it doesn't exist, a new defined name is created. If it exists, then the existing defined name is overwritten.
            </summary>
            <param name="Name">Name of defined name. Note that it cannot be a valid cell reference such as A1. It also cannot start with "_xlnm" because it's reserved.</param>
            <param name="Text">The reference/content text of the defined name. For example, Sheet1!$A$1:$C$3</param>
            <returns>True if the given defined name is created or an existing defined name is overwritten. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetDefinedName(System.String,System.String,System.String)">
            <summary>
            Set a given defined name. If it doesn't exist, a new defined name is created. If it exists, then the existing defined name is overwritten.
            </summary>
            <param name="Name">Name of defined name. Note that it cannot be a valid cell reference such as A1. It also cannot start with "_xlnm" because it's reserved.</param>
            <param name="Text">The reference/content text of the defined name. For example, Sheet1!$A$1:$C$3</param>
            <param name="Comment">Comment for the defined name.</param>
            <returns>True if the given defined name is created or an existing defined name is overwritten. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetDefinedName(System.String,System.String,System.String,System.String)">
            <summary>
            Set a given defined name. If it doesn't exist, a new defined name is created. If it exists, then the existing defined name is overwritten.
            </summary>
            <param name="Name">Name of defined name. Note that it cannot be a valid cell reference such as A1. It also cannot start with "_xlnm" because it's reserved.</param>
            <param name="Text">The reference/content text of the defined name. For example, Sheet1!$A$1:$C$3</param>
            <param name="Comment">Comment for the defined name.</param>
            <param name="Scope">The name of the worksheet that the defined name is effective in.</param>
            <returns>True if the given defined name is created or an existing defined name is overwritten. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetDefinedNameText(System.String)">
            <summary>
            Get reference/content text of existing defined name.
            </summary>
            <param name="Name">Name of existing defined name.</param>
            <returns>Reference/content text of defined name. An empty string is returned if the given defined name doesn't exist.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetDefinedNameComment(System.String)">
            <summary>
            Get the comment of existing defined name.
            </summary>
            <param name="Name">Name of existing defined name.</param>
            <returns>The comment of the defined name. An empty string is returned if the given defined name doesn't exist, or there's no comment.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.DeleteDefinedName(System.String)">
            <summary>
            Delete a defined name if it exists.
            </summary>
            <param name="Name">Name of defined name.</param>
            <returns>True if specified name is deleted. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetDefinedNames">
            <summary>
            Get a list of existing defined names.
            </summary>
            <returns>A list of defined names.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetDefinedNames(System.Boolean)">
            <summary>
            Get a list of existing defined names, filtered by whether the defined name is a reserved name or not.
            </summary>
            <param name="IncludeReserved">True to include reserved names. False otherwise. A reserved name starts with "_xlnm".</param>
            <returns>A list of defined names.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetPrintArea(System.String,System.String)">
            <summary>
            Set the print area on the currently selected worksheet given a corner cell of the print area and the opposite corner cell.
            </summary>
            <param name="StartCellReference">The cell reference of the corner cell, such as "A1".</param>
            <param name="EndCellReference">The cell reference of the opposite corner cell, such as "A1".</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetPrintArea(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the print area on the currently selected worksheet given a corner cell of the print area and the opposite corner cell.
            </summary>
            <param name="StartRowIndex">The row index of the corner cell.</param>
            <param name="StartColumnIndex">The column index of the corner cell.</param>
            <param name="EndRowIndex">The row index of the opposite corner cell.</param>
            <param name="EndColumnIndex">The column index of the opposite corner cell.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.AddToPrintArea(System.String,System.String)">
            <summary>
            Adds a print area to the existing print area on the currently selected worksheet given a corner cell of the print area and the opposite corner cell.
            </summary>
            <param name="StartCellReference">The cell reference of the corner cell, such as "A1".</param>
            <param name="EndCellReference">The cell reference of the opposite corner cell, such as "A1".</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.AddToPrintArea(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a print area to the existing print area on the currently selected worksheet given a corner cell of the print area and the opposite corner cell.
            </summary>
            <param name="StartRowIndex">The row index of the corner cell.</param>
            <param name="StartColumnIndex">The column index of the corner cell.</param>
            <param name="EndRowIndex">The row index of the opposite corner cell.</param>
            <param name="EndColumnIndex">The column index of the opposite corner cell.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.ClearPrintArea">
            <summary>
            Clears existing print areas on the currently selected worksheet.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.InsertHyperlink(System.String,SpreadsheetLight.SLHyperlinkTypeValues,System.String)">
            <summary>
            Insert a hyperlink.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <param name="HyperlinkType">The type of hyperlink.</param>
            <param name="Address">The URL for web pages, the file path for existing files, a cell reference (such as Sheet1!A1 or Sheet1!A1:B5), a defined name or an email address. NOTE: Do NOT include the "mailto:" portion for email addresses.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.InsertHyperlink(System.String,SpreadsheetLight.SLHyperlinkTypeValues,System.String,System.Boolean)">
            <summary>
            Insert a hyperlink.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <param name="HyperlinkType">The type of hyperlink.</param>
            <param name="Address">The URL for web pages, the file path for existing files, a cell reference (such as Sheet1!A1 or Sheet1!A1:B5), a defined name or an email address. NOTE: Do NOT include the "mailto:" portion for email addresses.</param>
            <param name="OverwriteExistingCell">True to overwrite the existing cell value with the hyperlink display text. False otherwise.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.InsertHyperlink(System.String,SpreadsheetLight.SLHyperlinkTypeValues,System.String,System.String,System.String)">
            <summary>
            Insert a hyperlink.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <param name="HyperlinkType">The type of hyperlink.</param>
            <param name="Address">The URL for web pages, the file path for existing files, a cell reference (such as Sheet1!A1 or Sheet1!A1:B5), a defined name or an email address. NOTE: Do NOT include the "mailto:" portion for email addresses.</param>
            <param name="Display">The display text. Set null or an empty string to use the default.</param>
            <param name="ToolTip">The tooltip (or screentip) text. Set null or an empty string to ignore this.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.InsertHyperlink(System.String,SpreadsheetLight.SLHyperlinkTypeValues,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Insert a hyperlink.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <param name="HyperlinkType">The type of hyperlink.</param>
            <param name="Address">The URL for web pages, the file path for existing files, a cell reference (such as Sheet1!A1 or Sheet1!A1:B5), a defined name or an email address. NOTE: Do NOT include the "mailto:" portion for email addresses.</param>
            <param name="Display">The display text. Set null or an empty string to use the default.</param>
            <param name="ToolTip">The tooltip (or screentip) text. Set null or an empty string to ignore this.</param>
            <param name="OverwriteExistingCell">True to overwrite the existing cell value with the hyperlink display text. False otherwise.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.InsertHyperlink(System.Int32,System.Int32,SpreadsheetLight.SLHyperlinkTypeValues,System.String)">
            <summary>
            Insert a hyperlink.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <param name="HyperlinkType">The type of hyperlink.</param>
            <param name="Address">The URL for web pages, the file path for existing files, a cell reference (such as Sheet1!A1 or Sheet1!A1:B5), a defined name or an email address. NOTE: Do NOT include the "mailto:" portion for email addresses.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.InsertHyperlink(System.Int32,System.Int32,SpreadsheetLight.SLHyperlinkTypeValues,System.String,System.Boolean)">
            <summary>
            Insert a hyperlink.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <param name="HyperlinkType">The type of hyperlink.</param>
            <param name="Address">The URL for web pages, the file path for existing files, a cell reference (such as Sheet1!A1 or Sheet1!A1:B5), a defined name or an email address. NOTE: Do NOT include the "mailto:" portion for email addresses.</param>
            <param name="OverwriteExistingCell">True to overwrite the existing cell value with the hyperlink display text. False otherwise.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.InsertHyperlink(System.Int32,System.Int32,SpreadsheetLight.SLHyperlinkTypeValues,System.String,System.String,System.String)">
            <summary>
            Insert a hyperlink.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <param name="HyperlinkType">The type of hyperlink.</param>
            <param name="Address">The URL for web pages, the file path for existing files, a cell reference (such as Sheet1!A1 or Sheet1!A1:B5), a defined name or an email address. NOTE: Do NOT include the "mailto:" portion for email addresses.</param>
            <param name="Display">The display text. Set null or an empty string to use the default.</param>
            <param name="ToolTip">The tooltip (or screentip) text. Set null or an empty string to ignore this.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.InsertHyperlink(System.Int32,System.Int32,SpreadsheetLight.SLHyperlinkTypeValues,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Insert a hyperlink.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <param name="HyperlinkType">The type of hyperlink.</param>
            <param name="Address">The URL for web pages, the file path for existing files, a cell reference (such as Sheet1!A1 or Sheet1!A1:B5), a defined name or an email address. NOTE: Do NOT include the "mailto:" portion for email addresses.</param>
            <param name="Display">The display text. Set null or an empty string to use the default.</param>
            <param name="ToolTip">The tooltip (or screentip) text. Set null or an empty string to ignore this.</param>
            <param name="OverwriteExistingCell">True to overwrite the existing cell value with the hyperlink display text. False otherwise.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.RemoveHyperlink(System.String)">
            <summary>
            Remove an existing hyperlink.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.RemoveHyperlink(System.Int32,System.Int32)">
            <summary>
            Remove an existing hyperlink.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.RefreshPivotTableOnLoad">
            <summary>
            Refresh pivot table data on load or open of spreadsheet. This applies to all pivot tables on the currently selected worksheet.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetCommentText">
            <summary>
            Get existing comments in the currently selected worksheet. WARNING: This is only a snapshot. Any changes made to the returned result are not used.
            </summary>
            <returns>A Dictionary of existing comments.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.InsertComment(System.String,SpreadsheetLight.SLComment)">
            <summary>
            Insert comment given the cell reference of the cell it's based on. This will overwrite any existing comment.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <param name="Comment">The cell comment.</param>
            <returns>False if the cell reference is invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.InsertComment(System.Int32,System.Int32,SpreadsheetLight.SLComment)">
            <summary>
            Insert comment given the row index and column index of the cell it's based on. This will overwrite any existing comment.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <param name="Comment">The cell comment.</param>
            <returns>False if either the row index or column index (or both) are invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetStyles">
            <summary>
            Get a list of existing styles. WARNING: This is only a snapshot. Any changes made to the returned result are not used.
            </summary>
            <returns>A list of existing SLStyle objects.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetCellStyle(System.String)">
            <summary>
            Get the cell's style. The default style is returned if cell doesn't have an existing style, or if the cell reference is invalid.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <returns>The cell's style.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetCellStyle(System.Int32,System.Int32)">
            <summary>
            Get the cell's style. The default style is returned if cell doesn't have an existing style, or if the row or column indices are invalid.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <returns>The cell's style.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellStyle(System.String,SpreadsheetLight.SLStyle)">
            <summary>
            Set the cell's style.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <param name="Style">The style to set.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellStyle(System.Int32,System.Int32,SpreadsheetLight.SLStyle)">
            <summary>
            Set the cell's style.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <param name="Style">The style to set.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellStyle(System.String,System.String,SpreadsheetLight.SLStyle)">
            <summary>
            Set the style of a range of cells.
            </summary>
            <param name="StartCellReference">The cell reference of the start cell of the cell range, such as "A1". This is typically the top-left cell.</param>
            <param name="EndCellReference">The cell reference of the end cell of the cell range, such as "A1". This is typically the bottom-right cell.</param>
            <param name="Style">The style to set.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellStyle(System.Int32,System.Int32,System.Int32,System.Int32,SpreadsheetLight.SLStyle)">
            <summary>
            Set the style of a range of cells.
            </summary>
            <param name="StartRowIndex">The row index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="StartColumnIndex">The column index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="EndRowIndex">The row index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="EndColumnIndex">The column index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="Style">The style to set.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.RemoveCellStyle(System.String)">
            <summary>
            Remove the style from a cell.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.RemoveCellStyle(System.String,System.String)">
            <summary>
            Remove the style from a range of cells.
            </summary>
            <param name="StartCellReference">The cell reference of the start cell of the cell range, such as "A1". This is typically the top-left cell.</param>
            <param name="EndCellReference">The cell reference of the end cell of the cell range, such as "A1". This is typically the bottom-right cell.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.RemoveCellStyle(System.Int32,System.Int32)">
            <summary>
            Remove the style from a cell.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.RemoveCellStyle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Remove the style from a range of cells.
            </summary>
            <param name="StartRowIndex">The row index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="StartColumnIndex">The column index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="EndRowIndex">The row index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="EndColumnIndex">The column index of the end cell of the cell range. This is typically the bottom-right cell.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.ApplyNamedCellStyle(System.String,SpreadsheetLight.SLNamedCellStyleValues)">
            <summary>
            Apply a named cell style to a cell. Existing styles are kept, unless the chosen named cell style overrides those styles.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <param name="NamedCellStyle">The named cell style to be applied.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.ApplyNamedCellStyle(System.Int32,System.Int32,SpreadsheetLight.SLNamedCellStyleValues)">
            <summary>
            Apply a named cell style to a cell. Existing styles are kept, unless the chosen named cell style overrides those styles.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <param name="NamedCellStyle">The named cell style to be applied.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.ApplyNamedCellStyle(System.String,System.String,SpreadsheetLight.SLNamedCellStyleValues)">
            <summary>
            Apply a named cell style to a range of cells. Existing styles are kept, unless the chosen named cell style overrides those styles.
            </summary>
            <param name="StartCellReference">The cell reference of the start cell of the cell range, such as "A1". This is typically the top-left cell.</param>
            <param name="EndCellReference">The cell reference of the end cell of the cell range, such as "A1". This is typically the bottom-right cell.</param>
            <param name="NamedCellStyle">The named cell style to be applied.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.ApplyNamedCellStyle(System.Int32,System.Int32,System.Int32,System.Int32,SpreadsheetLight.SLNamedCellStyleValues)">
            <summary>
            Apply a named cell style to a range of cells. Existing styles are kept, unless the chosen named cell style overrides those styles.
            </summary>
            <param name="StartRowIndex">The row index of the starting row.</param>
            <param name="StartColumnIndex">The column index of the starting column.</param>
            <param name="EndRowIndex">The row index of the ending row.</param>
            <param name="EndColumnIndex">The column index of the ending column.</param>
            <param name="NamedCellStyle">The named cell style to be applied.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.ApplyNamedCellStyleToRow(System.Int32,SpreadsheetLight.SLNamedCellStyleValues)">
            <summary>
            Apply a named cell style to a row. Existing styles are kept, unless the chosen named cell style overrides those styles.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="NamedCellStyle">The named cell style to be applied.</param>
            <returns>True if the row index is valid. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.ApplyNamedCellStyleToRow(System.Int32,System.Int32,SpreadsheetLight.SLNamedCellStyleValues)">
            <summary>
            Apply a named cell style to a range of rows. Existing styles are kept, unless the chosen named cell style overrides those styles.
            </summary>
            <param name="StartRowIndex">The row index of the starting row.</param>
            <param name="EndRowIndex">The row index of the ending row.</param>
            <param name="NamedCellStyle">The named cell style to be applied.</param>
            <returns>True if the row indices are valid. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.ApplyNamedCellStyleToColumn(System.Int32,SpreadsheetLight.SLNamedCellStyleValues)">
            <summary>
            Apply a named cell style to a column. Existing styles are kept, unless the chosen named cell style overrides those styles.
            </summary>
            <param name="ColumnIndex">The column index.</param>
            <param name="NamedCellStyle">The named cell style to be applied.</param>
            <returns>True if the column index is valid. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.ApplyNamedCellStyleToColumn(System.Int32,System.Int32,SpreadsheetLight.SLNamedCellStyleValues)">
            <summary>
            Apply a named cell style to a range of columns. Existing styles are kept, unless the chosen named cell style overrides those styles.
            </summary>
            <param name="StartColumnIndex">The column index of the starting column.</param>
            <param name="EndColumnIndex">The column index of the ending column.</param>
            <param name="NamedCellStyle">The named cell style to be applied.</param>
            <returns>True if the column indices are valid. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetRowStyle(System.Int32)">
            <summary>
            Get the style of the row. If the row doesn't have an existing style, the default style is returned.
            </summary>
            <param name="RowIndex">The row index.</param>
            <returns>The row style.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetRowStyle(System.Int32,SpreadsheetLight.SLStyle)">
            <summary>
            Set the row style.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="RowStyle">The style for the row.</param>
            <returns>True if the row index is valid. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetRowStyle(System.Int32,System.Int32,SpreadsheetLight.SLStyle)">
            <summary>
            Set the row style for a range of rows.
            </summary>
            <param name="StartRowIndex">The row index of the starting row.</param>
            <param name="EndRowIndex">The row index of the ending row.</param>
            <param name="RowStyle">The style for the rows.</param>
            <returns>True if the row indices are valid. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.DrawBorderGrid(System.String,System.String,DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues)">
            <summary>
            Draw border grid.
            </summary>
            <param name="StartCellReference">The cell reference of the start cell of the cell range, such as "A1". This is typically the top-left cell.</param>
            <param name="EndCellReference">The cell reference of the end cell of the cell range, such as "A1". This is typically the bottom-right cell.</param>
            <param name="BorderStyle">The border style. Default is none.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.DrawBorderGrid(System.String,System.String,DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,System.Drawing.Color)">
            <summary>
            Draw border grid.
            </summary>
            <param name="StartCellReference">The cell reference of the start cell of the cell range, such as "A1". This is typically the top-left cell.</param>
            <param name="EndCellReference">The cell reference of the end cell of the cell range, such as "A1". This is typically the bottom-right cell.</param>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The border color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.DrawBorderGrid(System.String,System.String,DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Draw border grid.
            </summary>
            <param name="StartCellReference">The cell reference of the start cell of the cell range, such as "A1". This is typically the top-left cell.</param>
            <param name="EndCellReference">The cell reference of the end cell of the cell range, such as "A1". This is typically the bottom-right cell.</param>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The border theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.DrawBorderGrid(System.String,System.String,DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Draw border grid.
            </summary>
            <param name="StartCellReference">The cell reference of the start cell of the cell range, such as "A1". This is typically the top-left cell.</param>
            <param name="EndCellReference">The cell reference of the end cell of the cell range, such as "A1". This is typically the bottom-right cell.</param>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The border theme color.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.DrawBorderGrid(System.String,System.String,SpreadsheetLight.SLBorder)">
            <summary>
            Draw border grid.
            </summary>
            <param name="StartCellReference">The cell reference of the start cell of the cell range, such as "A1". This is typically the top-left cell.</param>
            <param name="EndCellReference">The cell reference of the end cell of the cell range, such as "A1". This is typically the bottom-right cell.</param>
            <param name="Border">The SLBorder object with border style properties.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.DrawBorderGrid(System.Int32,System.Int32,System.Int32,System.Int32,DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues)">
            <summary>
            Draw border grid.
            </summary>
            <param name="StartRowIndex">The row index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="StartColumnIndex">The column index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="EndRowIndex">The row index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="EndColumnIndex">The column index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="BorderStyle">The border style. Default is none.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.DrawBorderGrid(System.Int32,System.Int32,System.Int32,System.Int32,DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,System.Drawing.Color)">
            <summary>
            Draw border grid.
            </summary>
            <param name="StartRowIndex">The row index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="StartColumnIndex">The column index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="EndRowIndex">The row index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="EndColumnIndex">The column index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The border color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.DrawBorderGrid(System.Int32,System.Int32,System.Int32,System.Int32,DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Draw border grid.
            </summary>
            <param name="StartRowIndex">The row index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="StartColumnIndex">The column index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="EndRowIndex">The row index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="EndColumnIndex">The column index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The border theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.DrawBorderGrid(System.Int32,System.Int32,System.Int32,System.Int32,DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Draw border grid.
            </summary>
            <param name="StartRowIndex">The row index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="StartColumnIndex">The column index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="EndRowIndex">The row index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="EndColumnIndex">The column index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The border theme color.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.DrawBorderGrid(System.Int32,System.Int32,System.Int32,System.Int32,SpreadsheetLight.SLBorder)">
            <summary>
            Draw border grid.
            </summary>
            <param name="StartRowIndex">The row index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="StartColumnIndex">The column index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="EndRowIndex">The row index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="EndColumnIndex">The column index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="Border">The SLBorder object with border style properties.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.DrawBorder(System.String,System.String,DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues)">
            <summary>
            Draw border.
            </summary>
            <param name="StartCellReference">The cell reference of the start cell of the cell range, such as "A1". This is typically the top-left cell.</param>
            <param name="EndCellReference">The cell reference of the end cell of the cell range, such as "A1". This is typically the bottom-right cell.</param>
            <param name="BorderStyle">The border style. Default is none.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.DrawBorder(System.String,System.String,DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,System.Drawing.Color)">
            <summary>
            Draw border.
            </summary>
            <param name="StartCellReference">The cell reference of the start cell of the cell range, such as "A1". This is typically the top-left cell.</param>
            <param name="EndCellReference">The cell reference of the end cell of the cell range, such as "A1". This is typically the bottom-right cell.</param>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The border color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.DrawBorder(System.String,System.String,DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Draw border.
            </summary>
            <param name="StartCellReference">The cell reference of the start cell of the cell range, such as "A1". This is typically the top-left cell.</param>
            <param name="EndCellReference">The cell reference of the end cell of the cell range, such as "A1". This is typically the bottom-right cell.</param>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The border theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.DrawBorder(System.String,System.String,DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Draw border.
            </summary>
            <param name="StartCellReference">The cell reference of the start cell of the cell range, such as "A1". This is typically the top-left cell.</param>
            <param name="EndCellReference">The cell reference of the end cell of the cell range, such as "A1". This is typically the bottom-right cell.</param>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The border theme color.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.DrawBorder(System.String,System.String,SpreadsheetLight.SLBorder)">
            <summary>
            Draw border.
            </summary>
            <param name="StartCellReference">The cell reference of the start cell of the cell range, such as "A1". This is typically the top-left cell.</param>
            <param name="EndCellReference">The cell reference of the end cell of the cell range, such as "A1". This is typically the bottom-right cell.</param>
            <param name="Border">The SLBorder object with border style properties.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.DrawBorder(System.Int32,System.Int32,System.Int32,System.Int32,DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues)">
            <summary>
            Draw border.
            </summary>
            <param name="StartRowIndex">The row index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="StartColumnIndex">The column index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="EndRowIndex">The row index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="EndColumnIndex">The column index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="BorderStyle">The border style. Default is none.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.DrawBorder(System.Int32,System.Int32,System.Int32,System.Int32,DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,System.Drawing.Color)">
            <summary>
            Draw border.
            </summary>
            <param name="StartRowIndex">The row index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="StartColumnIndex">The column index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="EndRowIndex">The row index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="EndColumnIndex">The column index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The border color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.DrawBorder(System.Int32,System.Int32,System.Int32,System.Int32,DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Draw border.
            </summary>
            <param name="StartRowIndex">The row index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="StartColumnIndex">The column index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="EndRowIndex">The row index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="EndColumnIndex">The column index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The border theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.DrawBorder(System.Int32,System.Int32,System.Int32,System.Int32,DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Draw border.
            </summary>
            <param name="StartRowIndex">The row index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="StartColumnIndex">The column index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="EndRowIndex">The row index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="EndColumnIndex">The column index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The border theme color.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.DrawBorder(System.Int32,System.Int32,System.Int32,System.Int32,SpreadsheetLight.SLBorder)">
            <summary>
            Draw border.
            </summary>
            <param name="StartRowIndex">The row index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="StartColumnIndex">The column index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="EndRowIndex">The row index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="EndColumnIndex">The column index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="Border">The SLBorder object with border style properties.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.RemoveRowStyle(System.Int32)">
            <summary>
            Remove any existing row style.
            </summary>
            <param name="RowIndex">The row index.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.RemoveRowStyle(System.Int32,System.Int32)">
            <summary>
            Remove any existing row style for a range of rows.
            </summary>
            <param name="StartRowIndex">The row index of the starting row.</param>
            <param name="EndRowIndex">The row index of the ending row.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetColumnStyle(System.Int32)">
            <summary>
            Get the style of the column. If the column doesn't have an existing style, the default style is returned.
            </summary>
            <param name="ColumnIndex">The column index.</param>
            <returns>The column style.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetColumnStyle(System.Int32,SpreadsheetLight.SLStyle)">
            <summary>
            Set the column style.
            </summary>
            <param name="ColumnIndex">The column index.</param>
            <param name="ColumnStyle">The style for the column.</param>
            <returns>True if the column index is valid. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetColumnStyle(System.Int32,System.Int32,SpreadsheetLight.SLStyle)">
            <summary>
            Set the column style for a range of rows.
            </summary>
            <param name="StartColumnIndex">The column index of the starting column.</param>
            <param name="EndColumnIndex">The column index of the ending column.</param>
            <param name="ColumnStyle">The style for the columns.</param>
            <returns>True if the column indices are valid. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.RemoveColumnStyle(System.Int32)">
            <summary>
            Remove any existing column style.
            </summary>
            <param name="ColumnIndex">The column index.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.RemoveColumnStyle(System.Int32,System.Int32)">
            <summary>
            Remove any existing column style for a range of columns.
            </summary>
            <param name="StartColumnIndex">The column index of the starting column.</param>
            <param name="EndColumnIndex">The column index of the ending column.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyCellStyle(System.String,System.String)">
            <summary>
            Copy the style of one cell to another cell.
            </summary>
            <param name="FromCellReference">The cell reference of the cell whose style is copied from.</param>
            <param name="ToCellReference">The cell reference of the cell whose style is copied to.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyCellStyle(System.String,System.String,System.String)">
            <summary>
            Copy the style of one cell to a range of cells.
            </summary>
            <param name="FromCellReference">The cell reference of the cell whose style is copied from.</param>
            <param name="ToStartCellReference">The start cell reference of the cell range. This is typically the top-left cell.</param>
            <param name="ToEndCellReference">The end cell reference of the cell range. This is typically the bottom-right cell.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyCellStyle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy the style of one cell to another cell.
            </summary>
            <param name="FromRowIndex">The row index of the cell to be copied from.</param>
            <param name="FromColumnIndex">The column index of the cell to be copied from.</param>
            <param name="ToRowIndex">The row index of the cell to be copied to.</param>
            <param name="ToColumnIndex">The column index of the cell to be copied to.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyCellStyle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy the style of one cell to a range of cells.
            </summary>
            <param name="FromRowIndex">The row index of the cell to be copied from.</param>
            <param name="FromColumnIndex">The column index of the cell to be copied from.</param>
            <param name="ToStartRowIndex">The row index of the starting cell of the cell range. This is typically the top-left cell.</param>
            <param name="ToStartColumnIndex">The column index of the starting cell of the cell range. This is typically the top-left cell.</param>
            <param name="ToEndRowIndex">The row index of the ending cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="ToEndColumnIndex">The column index of the ending cell of the cell range. This is typically the bottom-right cell.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyRowStyle(System.Int32,System.Int32)">
            <summary>
            Copy the style of one row to another row.
            </summary>
            <param name="FromRowIndex">The row index of the row to be copied from.</param>
            <param name="ToRowIndex">The row index of the row to be copied to.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyRowStyle(System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy the style of one row to a range of rows.
            </summary>
            <param name="FromRowIndex">The row index of the row to be copied from.</param>
            <param name="ToStartRowIndex">The row index of the start row of the row range. This is typically the top row.</param>
            <param name="ToEndRowIndex">The row index of the end row of the row range. This is typically the bottom row.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyColumnStyle(System.Int32,System.Int32)">
            <summary>
            Copy the style of one column to another column.
            </summary>
            <param name="FromColumnIndex">The column index of the column to be copied from.</param>
            <param name="ToColumnIndex">The column index of the column to be copied to.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyColumnStyle(System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy the style of one column to a range of columns.
            </summary>
            <param name="FromColumnIndex">The column index of the column to be copied from.</param>
            <param name="ToStartColumnIndex">The column index of the start column of the column range. This is typically the left-most column.</param>
            <param name="ToEndColumnIndex">The column index of the end column of the column range. This is typically the right-most column.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetSharedStrings">
            <summary>
            Get existing shared strings. WARNING: This is only a snapshot. Any changes made to the returned result are not used.
            </summary>
            <returns>A list of existing shared strings.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetSharedStringItems">
            <summary>
            Get existing shared strings in a list of SharedStringItem objects. WARNING: This is only a snapshot. Any changes made to the returned result are not used.
            </summary>
            <returns>A list of existing SharedStringItem objects.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetThemeSettings">
            <summary>
            Get the spreadsheet's theme settings.
            </summary>
            <returns>An SLThemeSettings object with the spreadsheet's theme settings.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.AddWorksheet(System.String)">
            <summary>
            Adds a new worksheet, and selects the new worksheet as the active one.
            </summary>
            <param name="WorksheetName">The name should not be blank, nor exceed 31 characters. And it cannot contain these characters: \/?*[] It cannot be the same as an existing name (case-insensitive). But there's nothing stopping you from using 3 spaces as a name.</param>
            <returns>True if the name is valid and the worksheet is successfully added. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SelectWorksheet(System.String)">
            <summary>
            Select an existing worksheet. If the given name doesn't match an existing worksheet, the previously selected worksheet is used.
            </summary>
            <param name="WorksheetName">The name of an existing worksheet.</param>
            <returns>True if there's an existing worksheet with that name and that worksheet is successfully selected. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.ShowWorksheet(System.String)">
            <summary>
            Show the worksheet (a.k.a unhide worksheet). This includes chart sheets, dialog sheets and macro sheets.
            </summary>
            <param name="WorksheetName">The name of the worksheet.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.HideWorksheet(System.String)">
            <summary>
            Hide the worksheet. This includes chart sheets, dialog sheets and macro sheets.
            </summary>
            <param name="WorksheetName">The name of the worksheet.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.HideWorksheet(System.String,System.Boolean)">
            <summary>
            Hide the worksheet. This includes chart sheets, dialog sheets and macro sheets.
            </summary>
            <param name="WorksheetName">The name of the worksheet.</param>
            <param name="IsVeryHidden">True to set the worksheet as very hidden. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.IsWorksheetHidden(System.String)">
            <summary>
            Indicates if the worksheet is hidden. Note that if the worksheet name isn't of an existing worksheet, the return value is true. Think of a non-existent worksheet as very very hidden, like hidden in another dimension or something.
            </summary>
            <param name="WorksheetName">The name of the worksheet.</param>
            <returns>True if the worksheet is hidden. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.RenameWorksheet(System.String,System.String)">
            <summary>
            Rename an existing worksheet. This includes chart sheets, dialog sheets and macro sheets.
            </summary>
            <param name="ExistingWorksheetName">The name of the existing worksheet.</param>
            <param name="NewWorksheetName">The new name for the existing worksheet. The name should not be blank, nor exceed 31 characters. And it cannot contain these characters: \/?*[] It cannot be the same as an existing name (case-insensitive).</param>
            <returns>True if renaming is successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyWorksheet(System.String,System.String)">
            <summary>
            Copy the contents of a worksheet to another worksheet. The current worksheet cannot be the source of the copy operation, nor the destination of the copy operation.
            </summary>
            <param name="ExistingWorksheetName">The worksheet to be copied from. This cannot be the current worksheet.</param>
            <param name="NewWorksheetName">The worksheet to be copied to. If this doesn't exist, a new worksheet is created. If it's an existing worksheet, the contents of the existing worksheet will be overwritten. The new worksheet cannot be the currently selected worksheet.</param>
            <returns>True if copying is successful. False otherwise</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.DeleteWorksheet(System.String)">
            <summary>
            Delete a worksheet. The currently selected worksheet cannot be deleted.
            </summary>
            <param name="WorksheetName">The name of the worksheet to be deleted.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetCurrentWorksheetName">
            <summary>
            Get the worksheet name of the currently selected worksheet.
            </summary>
            <returns>The currently selected worksheet name.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetWorksheetNames">
            <summary>
            Get a list of names of existing worksheets currently in the spreadsheet, excluding chart sheets, macro sheets and dialog sheets.
            This is identical to GetSheetNames() but is more appropriately named.
            </summary>
            <returns>A list of names of existing worksheets.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetSheetNames">
            <summary>
            Get a list of names of existing worksheets currently in the spreadsheet, excluding chart sheets, macro sheets and dialog sheets.
            This is identical to GetWorksheetNames() but is kept to maintain function overload consistency with the IncludeAll parameter version.
            </summary>
            <returns>A list of names of existing worksheets.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetSheetNames(System.Boolean)">
            <summary>
            Get a list of names of existing sheets currently in the spreadsheet.
            </summary>
            <param name="IncludeAll">True to include chart sheets, macro sheets and dialog sheets. False to limit to only worksheets.</param>
            <returns>A list of names of existing sheets.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetWorksheetStatistics">
            <summary>
            Get statistical information on the currently selected worksheet. NOTE: The information is only current at point of retrieval.
            </summary>
            <returns>An SLWorksheetStatistics object with the information.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.MoveWorksheet(System.String,System.Int32)">
            <summary>
            Move a worksheet to a new position in the spreadsheet.
            </summary>
            <param name="WorksheetName">The name of the worksheet.</param>
            <param name="Position">The new 1-based position index. Use 1 for 1st position, 2 for 2nd position and so on.</param>
            <returns>True if an actual move was done (this excludes when the given worksheet is already in the given position). False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetWorksheetDefaultRowHeight(System.Double)">
            <summary>
            Set the default row height for the currently selected worksheet.
            </summary>
            <param name="RowHeight">The row height in points.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetWorksheetDefaultColumnWidth(System.Double)">
            <summary>
            Set the default column width for the currently selected worksheet.
            </summary>
            <param name="ColumnWidth">The column width.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.FreezePanes(System.Int32,System.Int32)">
            <summary>
            Freeze panes in the worksheet (for the first workbook view). Will do nothing if both parameters are zero (because there's nothing to freeze). Will also do nothing if either of the parameters is equal to their respective limits (maximum number of rows, or maximum number of columns).
            </summary>
            <param name="NumberOfTopMostRows">Number of top-most rows to keep in place.</param>
            <param name="NumberOfLeftMostColumns">Number of left-most columns to keep in place.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.UnfreezePanes">
            <summary>
            Unfreeze the frozen panes in the worksheet (for the first workbook view).
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SplitPanes(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Split panes in the worksheet (for the first workbook view). Will do nothing if both number of rows and number of columns are zero (because there's nothing to split). Will also do nothing if either is equal to their respective limits (maximum number of rows, or maximum number of columns).
            </summary>
            <param name="NumberOfRows">Number of top-most rows above the horizontal split line.</param>
            <param name="NumberOfColumns">Number of left-most columns left of the vertical split line.</param>
            <param name="ShowRowColumnHeadings">True if the row and column headings are shown. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SplitPanes(System.Int32,System.Int32,System.Boolean,System.Double,System.Double)">
            <summary>
            Split panes in the worksheet (for the first workbook view). Will do nothing if both number of rows and number of columns are zero (because there's nothing to split). Will also do nothing if either is equal to their respective limits (maximum number of rows, or maximum number of columns).
            </summary>
            <param name="NumberOfRows">Number of top-most rows above the horizontal split line.</param>
            <param name="NumberOfColumns">Number of left-most columns left of the vertical split line.</param>
            <param name="ShowRowColumnHeadings">True if the row and column headings are shown. False otherwise.</param>
            <param name="VerticalOffsetInPoints">This is more useful when row and column headings are shown. This will be the height of the column heading in points.</param>
            <param name="HorizontalOffsetInPoints">This is more useful when row and column headings are shown. This will be the width of the row heading in points.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SplitPanes(System.Int32,System.Int32,System.Boolean,System.Double,System.Double,System.Boolean)">
            <summary>
            Split panes in the worksheet (for the first workbook view). Will do nothing if both number of rows and number of columns are zero (because there's nothing to split). Will also do nothing if either is equal to their respective limits (maximum number of rows, or maximum number of columns).
            The underlying engine tries to guess the individual row heights and column widths. Then the horizontal and vertical split lines are placed based on the guesses.
            Forcing the row and column dimensions to fit the split lines might mean the worksheet looking oddly sized.
            </summary>
            <param name="NumberOfRows">Number of top-most rows above the horizontal split line.</param>
            <param name="NumberOfColumns">Number of left-most columns left of the vertical split line.</param>
            <param name="ShowRowColumnHeadings">True if the row and column headings are shown. False otherwise.</param>
            <param name="VerticalOffsetInPoints">This is more useful when row and column headings are shown. This will be the height of the column heading in points.</param>
            <param name="HorizontalOffsetInPoints">This is more useful when row and column headings are shown. This will be the width of the row heading in points.</param>
            <param name="ForceCustomRowColumnDimensions">Set true to force the worksheet's row height and column width to fit the given horizontal and vertical splits. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.UnsplitPanes">
            <summary>
            Unsplit the split panes in the worksheet (for the first workbook view).
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.AddBackgroundPicture(System.String)">
            <summary>
            Add a background picture to the currently selected worksheet given the file name of a picture.
            If there's an existing background picture, that will be deleted first.
            </summary>
            <param name="FileName">The file name of a picture to be used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.AddBackgroundPicture(System.Byte[],DocumentFormat.OpenXml.Packaging.ImagePartType)">
            <summary>
            Add a background picture to the currently selected worksheet given a picture's data in a byte array.
            If there's an existing background picture, that will be deleted first.
            </summary>
            <param name="PictureByteData">The picture's data in a byte array.</param>
            <param name="PictureType">The image type of the picture.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.DeleteBackgroundPicture">
            <summary>
            Delete the background picture of the currently selected worksheet.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.InsertPicture(SpreadsheetLight.Drawing.SLPicture)">
            <summary>
            Insert a picture into the currently selected worksheet.
            </summary>
            <param name="Picture">An SLPicture object with the picture's properties already set.</param>
            <returns>True if the picture is successfully inserted. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.InsertSparklineGroup(SpreadsheetLight.SLSparklineGroup)">
            <summary>
            Insert a sparkline group into the currently selected worksheet. If unsuccessful, please check that your sparkline location is correctly set. See SetLocation() for details.
            </summary>
            <param name="SparklineGroup">An SLSparklineGroup object with the properties already set.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.ClearAllSparklineGroups">
            <summary>
            Clear all sparkline groups in the currently selected worksheet.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.InsertChart(SpreadsheetLight.Charts.SLChart)">
            <summary>
            Insert a chart into the currently selected worksheet.
            </summary>
            <param name="Chart">An SLChart object with the chart's properties already set.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.InsertChart(SpreadsheetLight.Charts.SLChart,System.String)">
            <summary>
            Insert a chart into a chartsheet.
            </summary>
            <param name="Chart">An SLChart object with the chart's properties already set.</param>
            <param name="ChartsheetName">The name should not be blank, nor exceed 31 characters. And it cannot contain these characters: \/?*[] It cannot be the same as an existing name (case-insensitive). But there's nothing stopping you from using 3 spaces as a name.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.AddConditionalFormatting(SpreadsheetLight.SLConditionalFormatting)">
            <summary>
            Adds conditional formatting into the currently selected worksheet.
            </summary>
            <param name="ConditionalFormatting">An SLConditionalFormatting object with the formatting rules already set. Remember to set at least one formatting rule (a data bar, color scale, icon set or some custom rule).</param>
            <returns>True if successfully added. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.ClearConditionalFormatting">
            <summary>
            Clear all conditional formatting from the currently selected worksheet.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.AddDataValidation(SpreadsheetLight.SLDataValidation)">
            <summary>
            Adds data validation into the currently selected worksheet.
            </summary>
            <param name="DataValidation">An SLDataValidation with desired settings.</param>
            <returns>True if successful. False otherwise. Failure is probably due to overlapping data validation regions.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.ClearDataValidation">
            <summary>
            Clear all data validations from the currently selected worksheet.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.InsertTable(SpreadsheetLight.SLTable)">
            <summary>
            Insert a table into the currently selected worksheet.
            </summary>
            <param name="Table">An SLTable object with the properties already set.</param>
            <returns>True if the table is successfully inserted. False otherwise. If it failed, check if the given table overlaps any existing tables or merged cell range.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetPageSettings">
            <summary>
            Get the page settings of the currently selected worksheet.
            </summary>
            <returns>An SLPageSettings object with the page settings of the currently selected worksheet.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetPageSettings(System.String)">
            <summary>
            Get the page settings of sheet.
            </summary>
            <param name="SheetName">The name of the sheet.</param>
            <returns>An SLPageSettings object with the page settings of the specified sheet.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetPageSettings(SpreadsheetLight.SLPageSettings)">
            <summary>
            Set page settings to the currently selected worksheet.
            </summary>
            <param name="PageSettings">An SLPageSettings object with the properties already set.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetPageSettings(SpreadsheetLight.SLPageSettings,System.String)">
            <summary>
            Set page settings to a sheet.
            </summary>
            <param name="PageSettings">An SLPageSettings object with the properties already set.</param>
            <param name="SheetName">The name of the sheet.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.InsertPageBreak(System.Int32,System.Int32)">
            <summary>
            Insert a page break above a given row index and to the left of a given column index.
            </summary>
            <param name="RowIndex">The row index. Use a negative value to ignore row breaks (-1 works fine).</param>
            <param name="ColumnIndex">The column index. Use a negative value to ignore column breaks (-1 works fine).</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.RemoveAllPageBreaks">
            <summary>
            Remove all page breaks from the currently selected worksheet.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.RemovePageBreak(System.Int32,System.Int32)">
            <summary>
            Remove a page break above a given row index and to the left of a given column index.
            </summary>
            <param name="RowIndex">The row index. Use a negative value to ignore row breaks (-1 works fine).</param>
            <param name="ColumnIndex">The column index. Use a negative value to ignore column breaks (-1 works fine).</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.ProtectWorksheet(SpreadsheetLight.SLSheetProtection)">
            <summary>
            Protect the currently selected worksheet. If the worksheet has protection (but not password protected), the current protection options will be overwritten.
            </summary>
            <param name="ProtectOptions">An SLSheetProtection object with relevant options set.</param>
            <returns>True if operation is successful. False otherwise. Note that if the worksheet already has password protection, false is also returned.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.UnprotectWorksheet">
            <summary>
            Unprotect the currently selected worksheet.
            </summary>
            <returns>True if operation is successful. False otherwise. Note that if the worksheet is password protected or if the worksheet has no sheet protection in the first place, false is also returned.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CleanUpReallyEmptyCells">
            <summary>
            This cleans up all the SLCell objects with default values.
            This can happen if an SLCell was assigned with say a style but no value.
            Then subsequently, the style is removed (set to default), thus the cell is empty.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CheckAndClearSharedCellFormulaIfNeedTo(System.Int32,System.Int32)">
            <summary>
            This is mostly used when SetCellValueAs*()
            </summary>
            <param name="RowIndex">The row index to check with base cell row index.</param>
            <param name="ColumnIndex">The column index to check with base cell column index.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetCells">
            <summary>
            Get existing cells in the currently selected worksheet. WARNING: This is only a snapshot. Any changes made to the returned result are not used.
            </summary>
            <returns>A Dictionary of existing cells.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.HasCellValue(System.String)">
            <summary>
            Indicates if the cell value exists.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <returns>True if it exists. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.HasCellValue(System.Int32,System.Int32)">
            <summary>
            Indicates if the cell value exists.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <returns>True if it exists. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.HasCellValue(System.String,System.Boolean)">
            <summary>
            Indicates if the cell value exists.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <param name="IncludeCellFormula">True if having a cell formula counts as well. False otherwise.</param>
            <returns>True if it exists. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.HasCellValue(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Indicates if the cell value exists.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <param name="IncludeCellFormula">True if having a cell formula counts as well. False otherwise.</param>
            <returns>True if it exists. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValue(System.String,System.Boolean)">
            <summary>
            Set the cell value given a cell reference.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <param name="Data">The cell value data.</param>
            <returns>False if the cell reference is invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValue(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Set the cell value given the row index and column index.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <param name="Data">The cell value data.</param>
            <returns>False if either the row index or column index (or both) are invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValue(System.String,System.Single)">
            <summary>
            Set the cell value given a cell reference.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <param name="Data">The cell value data. If you plan to store a percentage value, set this as the value divided by 100. For example, to store 2.78%, set this value as 0.0278. Remember to set the cell style format code (say "0.00%")!</param>
            <returns>False if the cell reference is invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValue(System.Int32,System.Int32,System.Single)">
            <summary>
            Set the cell value given the row index and column index.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <param name="Data">The cell value data. If you plan to store a percentage value, set this as the value divided by 100. For example, to store 2.78%, set this value as 0.0278. Remember to set the cell style format code (say "0.00%")!</param>
            <returns>False if either the row index or column index (or both) are invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValue(System.String,System.Double)">
            <summary>
            Set the cell value given a cell reference.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <param name="Data">The cell value data. If you plan to store a percentage value, set this as the value divided by 100. For example, to store 2.78%, set this value as 0.0278. Remember to set the cell style format code (say "0.00%")!</param>
            <returns>False if the cell reference is invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValue(System.Int32,System.Int32,System.Double)">
            <summary>
            Set the cell value given the row index and column index.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <param name="Data">The cell value data. If you plan to store a percentage value, set this as the value divided by 100. For example, to store 2.78%, set this value as 0.0278. Remember to set the cell style format code (say "0.00%")!</param>
            <returns>False if either the row index or column index (or both) are invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValue(System.String,System.Decimal)">
            <summary>
            Set the cell value given a cell reference.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <param name="Data">The cell value data. If you plan to store a percentage value, set this as the value divided by 100. For example, to store 2.78%, set this value as 0.0278. Remember to set the cell style format code (say "0.00%")!</param>
            <returns>False if the cell reference is invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValue(System.Int32,System.Int32,System.Decimal)">
            <summary>
            Set the cell value given the row index and column index.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <param name="Data">The cell value data. If you plan to store a percentage value, set this as the value divided by 100. For example, to store 2.78%, set this value as 0.0278. Remember to set the cell style format code (say "0.00%")!</param>
            <returns>False if either the row index or column index (or both) are invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValue(System.String,System.Byte)">
            <summary>
            Set the cell value given a cell reference.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <param name="Data">The cell value data.</param>
            <returns>False if the cell reference is invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValue(System.Int32,System.Int32,System.Byte)">
            <summary>
            Set the cell value given the row index and column index.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <param name="Data">The cell value data.</param>
            <returns>False if either the row index or column index (or both) are invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValue(System.String,System.Int16)">
            <summary>
            Set the cell value given a cell reference.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <param name="Data">The cell value data. If you plan to store a percentage value, set this as the value divided by 100. For example, to store 2.78%, set this value as 0.0278. Remember to set the cell style format code (say "0.00%")!</param>
            <returns>False if the cell reference is invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValue(System.Int32,System.Int32,System.Int16)">
            <summary>
            Set the cell value given the row index and column index.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <param name="Data">The cell value data. If you plan to store a percentage value, set this as the value divided by 100. For example, to store 2.78%, set this value as 0.0278. Remember to set the cell style format code (say "0.00%")!</param>
            <returns>False if either the row index or column index (or both) are invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValue(System.String,System.UInt16)">
            <summary>
            Set the cell value given a cell reference.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <param name="Data">The cell value data. If you plan to store a percentage value, set this as the value divided by 100. For example, to store 2.78%, set this value as 0.0278. Remember to set the cell style format code (say "0.00%")!</param>
            <returns>False if the cell reference is invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValue(System.Int32,System.Int32,System.UInt16)">
            <summary>
            Set the cell value given the row index and column index.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <param name="Data">The cell value data. If you plan to store a percentage value, set this as the value divided by 100. For example, to store 2.78%, set this value as 0.0278. Remember to set the cell style format code (say "0.00%")!</param>
            <returns>False if either the row index or column index (or both) are invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValue(System.String,System.Int32)">
            <summary>
            Set the cell value given a cell reference.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <param name="Data">The cell value data. If you plan to store a percentage value, set this as the value divided by 100. For example, to store 2.78%, set this value as 0.0278. Remember to set the cell style format code (say "0.00%")!</param>
            <returns>False if the cell reference is invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValue(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the cell value given the row index and column index.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <param name="Data">The cell value data. If you plan to store a percentage value, set this as the value divided by 100. For example, to store 2.78%, set this value as 0.0278. Remember to set the cell style format code (say "0.00%")!</param>
            <returns>False if either the row index or column index (or both) are invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValue(System.String,System.UInt32)">
            <summary>
            Set the cell value given a cell reference.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <param name="Data">The cell value data. If you plan to store a percentage value, set this as the value divided by 100. For example, to store 2.78%, set this value as 0.0278. Remember to set the cell style format code (say "0.00%")!</param>
            <returns>False if the cell reference is invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValue(System.Int32,System.Int32,System.UInt32)">
            <summary>
            Set the cell value given the row index and column index.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <param name="Data">The cell value data. If you plan to store a percentage value, set this as the value divided by 100. For example, to store 2.78%, set this value as 0.0278. Remember to set the cell style format code (say "0.00%")!</param>
            <returns>False if either the row index or column index (or both) are invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValue(System.String,System.Int64)">
            <summary>
            Set the cell value given a cell reference.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <param name="Data">The cell value data. If you plan to store a percentage value, set this as the value divided by 100. For example, to store 2.78%, set this value as 0.0278. Remember to set the cell style format code (say "0.00%")!</param>
            <returns>False if the cell reference is invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValue(System.Int32,System.Int32,System.Int64)">
            <summary>
            Set the cell value given the row index and column index.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <param name="Data">The cell value data. If you plan to store a percentage value, set this as the value divided by 100. For example, to store 2.78%, set this value as 0.0278. Remember to set the cell style format code (say "0.00%")!</param>
            <returns>False if either the row index or column index (or both) are invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValue(System.String,System.UInt64)">
            <summary>
            Set the cell value given a cell reference.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <param name="Data">The cell value data. If you plan to store a percentage value, set this as the value divided by 100. For example, to store 2.78%, set this value as 0.0278. Remember to set the cell style format code (say "0.00%")!</param>
            <returns>False if the cell reference is invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValue(System.Int32,System.Int32,System.UInt64)">
            <summary>
            Set the cell value given the row index and column index.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <param name="Data">The cell value data. If you plan to store a percentage value, set this as the value divided by 100. For example, to store 2.78%, set this value as 0.0278. Remember to set the cell style format code (say "0.00%")!</param>
            <returns>False if either the row index or column index (or both) are invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValueNumeric(System.String,System.String)">
            <summary>
            Set the cell value given a cell reference and a numeric value in string form. Use this when the source data is numeric and is already in string form and parsing the data into numeric form is undesirable. Note that the numeric string must be in invariant-culture mode, so "123456.789" is the accepted form even if the current culture displays that as "123456,789".
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <param name="Data">The cell value data.</param>
            <returns>False if the cell reference is invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValueNumeric(System.Int32,System.Int32,System.String)">
            <summary>
            Set the cell value given the row index and column index and a numeric value in string form. Use this when the source data is numeric and is already in string form and parsing the data into numeric form is undesirable. Note that the numeric string must be in invariant-culture mode, so "123456.789" is the accepted form even if the current culture displays that as "123456,789".
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <param name="Data">The cell value data.</param>
            <returns>False if either the row index or column index (or both) are invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValue(System.String,System.DateTime)">
            <summary>
            Set the cell value given a cell reference. Be sure to follow up with a date format style.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <param name="Data">The cell value data.</param>
            <returns>False if the cell reference is invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValue(System.String,System.DateTime,System.Boolean)">
            <summary>
            Set the cell value given a cell reference. Be sure to follow up with a date format style.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <param name="Data">The cell value data.</param>
            <param name="For1904Epoch">True if using 1 Jan 1904 as the date epoch. False if using 1 Jan 1900 as the date epoch. This is independent of the workbook's Date1904 property.</param>
            <returns>False if the cell reference is invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValue(System.String,System.DateTime,System.String)">
            <summary>
            Set the cell value given a cell reference. Be sure to follow up with a date format style.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <param name="Data">The cell value data.</param>
            <param name="Format">The format string used if the given date is before the date epoch. A date before the date epoch is stored as a string, so the date precision is only as good as the format string. For example, "dd/MM/yyyy HH:mm:ss" is more precise than "dd/MM/yyyy" because the latter loses information about the hours, minutes and seconds.</param>
            <returns>False if the cell reference is invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValue(System.String,System.DateTime,System.String,System.Boolean)">
            <summary>
            Set the cell value given a cell reference. Be sure to follow up with a date format style.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <param name="Data">The cell value data.</param>
            <param name="Format">The format string used if the given date is before the date epoch. A date before the date epoch is stored as a string, so the date precision is only as good as the format string. For example, "dd/MM/yyyy HH:mm:ss" is more precise than "dd/MM/yyyy" because the latter loses information about the hours, minutes and seconds.</param>
            <param name="For1904Epoch">True if using 1 Jan 1904 as the date epoch. False if using 1 Jan 1900 as the date epoch. This is independent of the workbook's Date1904 property.</param>
            <returns>False if the cell reference is invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValue(System.Int32,System.Int32,System.DateTime)">
            <summary>
            Set the cell value given the row index and column index. Be sure to follow up with a date format style.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <param name="Data">The cell value data.</param>
            <returns>False if either the row index or column index (or both) are invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValue(System.Int32,System.Int32,System.DateTime,System.Boolean)">
            <summary>
            Set the cell value given the row index and column index. Be sure to follow up with a date format style.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <param name="Data">The cell value data.</param>
            <param name="For1904Epoch">True if using 1 Jan 1904 as the date epoch. False if using 1 Jan 1900 as the date epoch. This is independent of the workbook's Date1904 property.</param>
            <returns>False if either the row index or column index (or both) are invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValue(System.Int32,System.Int32,System.DateTime,System.String)">
            <summary>
            Set the cell value given the row index and column index. Be sure to follow up with a date format style.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <param name="Data">The cell value data.</param>
            <param name="Format">The format string used if the given date is before the date epoch. A date before the date epoch is stored as a string, so the date precision is only as good as the format string. For example, "dd/MM/yyyy HH:mm:ss" is more precise than "dd/MM/yyyy" because the latter loses information about the hours, minutes and seconds.</param>
            <returns>False if either the row index or column index (or both) are invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValue(System.Int32,System.Int32,System.DateTime,System.String,System.Boolean)">
            <summary>
            Set the cell value given the row index and column index. Be sure to follow up with a date format style.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <param name="Data">The cell value data.</param>
            <param name="Format">The format string used if the given date is before the date epoch. A date before the date epoch is stored as a string, so the date precision is only as good as the format string. For example, "dd/MM/yyyy HH:mm:ss" is more precise than "dd/MM/yyyy" because the latter loses information about the hours, minutes and seconds.</param>
            <param name="For1904Epoch">True if using 1 Jan 1904 as the date epoch. False if using 1 Jan 1900 as the date epoch. This is independent of the workbook's Date1904 property.</param>
            <returns>False if either the row index or column index (or both) are invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValue(System.String,SpreadsheetLight.SLRstType)">
            <summary>
            Set the cell value given a cell reference.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <param name="Data">The cell value data in rich text.</param>
            <returns>False if the cell reference is invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValue(System.Int32,System.Int32,SpreadsheetLight.SLRstType)">
            <summary>
            Set the cell value given the row index and column index.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <param name="Data">The cell value data in rich text.</param>
            <returns>False if either the row index or column index (or both) are invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValue(System.String,DocumentFormat.OpenXml.Spreadsheet.InlineString)">
            <summary>
            Set the cell value given a cell reference.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <param name="Data">The cell value data. Try the SLRstType class for easy InlineString generation.</param>
            <returns>False if the cell reference is invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValue(System.Int32,System.Int32,DocumentFormat.OpenXml.Spreadsheet.InlineString)">
            <summary>
            Set the cell value given the row index and column index.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <param name="Data">The cell value data. Try the SLRstType class for easy InlineString generation.</param>
            <returns>False if either the row index or column index (or both) are invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValue(System.String,System.String)">
            <summary>
            Set the cell value given a cell reference.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <param name="Data">The cell value data.</param>
            <returns>False if the cell reference is invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetCellValue(System.Int32,System.Int32,System.String)">
            <summary>
            Set the cell value given the row index and column index.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <param name="Data">The cell value data.</param>
            <returns>False if either the row index or column index (or both) are invalid. True otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetCellValueAsBoolean(System.String)">
            <summary>
            Get the cell value as a boolean. If the cell value wasn't originally a boolean value, the return value is undetermined (but is by default false).
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <returns>A boolean cell value.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetCellValueAsBoolean(System.String,System.Boolean)">
            <summary>
            Get the cell value as a boolean. If the cell value wasn't originally a boolean value, the return value is undetermined (but is by default false).
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <param name="TryForceParse">Set true to force any cell value that looks like a boolean to be returned as a boolean. This means text stored as "1" or "TRUE" will also be considered a boolean true. Set to false to only consider true (haha pun!) booleans. The default is false.</param>
            <returns>A boolean cell value.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetCellValueAsBoolean(System.Int32,System.Int32)">
            <summary>
            Get the cell value as a boolean. If the cell value wasn't originally a boolean value, the return value is undetermined (but is by default false).
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <returns>A boolean cell value.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetCellValueAsBoolean(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get the cell value as a boolean. If the cell value wasn't originally a boolean value, the return value is undetermined (but is by default false).
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <param name="TryForceParse">Set true to force any cell value that looks like a boolean to be returned as a boolean. This means text stored as "1" or "TRUE" will also be considered a boolean true. Set to false to only consider true (haha pun!) booleans. The default is false.</param>
            <returns>A boolean cell value.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetCellValueAsInt32(System.String)">
            <summary>
            Get the cell value as a 32-bit integer. If the cell value wasn't originally an integer, the return value is undetermined (but is by default 0).
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <returns>A 32-bit integer cell value.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetCellValueAsInt32(System.Int32,System.Int32)">
            <summary>
            Get the cell value as a 32-bit integer. If the cell value wasn't originally an integer, the return value is undetermined (but is by default 0).
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <returns>A 32-bit integer cell value.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetCellValueAsUInt32(System.String)">
            <summary>
            Get the cell value as an unsigned 32-bit integer. If the cell value wasn't originally an integer, the return value is undetermined (but is by default 0).
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <returns>An unsigned 32-bit integer cell value.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetCellValueAsUInt32(System.Int32,System.Int32)">
            <summary>
            Get the cell value as an unsigned 32-bit integer. If the cell value wasn't originally an integer, the return value is undetermined (but is by default 0).
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <returns>An unsigned 32-bit integer cell value.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetCellValueAsInt64(System.String)">
            <summary>
            Get the cell value as a 64-bit integer. If the cell value wasn't originally an integer, the return value is undetermined (but is by default 0).
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <returns>A 64-bit integer cell value.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetCellValueAsInt64(System.Int32,System.Int32)">
            <summary>
            Get the cell value as a 64-bit integer. If the cell value wasn't originally an integer, the return value is undetermined (but is by default 0).
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <returns>A 64-bit integer cell value.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetCellValueAsUInt64(System.String)">
            <summary>
            Get the cell value as an unsigned 64-bit integer. If the cell value wasn't originally an integer, the return value is undetermined (but is by default 0).
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <returns>An unsigned 64-bit integer cell value.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetCellValueAsUInt64(System.Int32,System.Int32)">
            <summary>
            Get the cell value as an unsigned 64-bit integer. If the cell value wasn't originally an integer, the return value is undetermined (but is by default 0).
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <returns>An unsigned 64-bit integer cell value.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetCellValueAsDouble(System.String)">
            <summary>
            Get the cell value as a double precision floating point number. If the cell value wasn't originally a floating point number, the return value is undetermined (but is by default 0).
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <returns>A double precision floating point number cell value.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetCellValueAsDouble(System.Int32,System.Int32)">
            <summary>
            Get the cell value as a double precision floating point number. If the cell value wasn't originally a floating point number, the return value is undetermined (but is by default 0).
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <returns>A double precision floating point number cell value.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetCellValueAsDecimal(System.String)">
            <summary>
            Get the cell value as a System.Decimal value. If the cell value wasn't originally an integer or floating point number, the return value is undetermined (but is by default 0).
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <returns>A System.Decimal cell value.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetCellValueAsDecimal(System.Int32,System.Int32)">
            <summary>
            Get the cell value as a System.Decimal value. If the cell value wasn't originally an integer or floating point number, the return value is undetermined (but is by default 0).
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <returns>A System.Decimal cell value.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetCellValueAsDateTime(System.String)">
            <summary>
            Get the cell value as a System.DateTime value. If the cell value wasn't originally a date/time value, the return value is undetermined.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <returns>A System.DateTime cell value.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetCellValueAsDateTime(System.Int32,System.Int32)">
            <summary>
            Get the cell value as a System.DateTime value. If the cell value wasn't originally a date/time value, the return value is undetermined.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <returns>A System.DateTime cell value.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetCellValueAsDateTime(System.String,System.Boolean)">
            <summary>
            Get the cell value as a System.DateTime value. If the cell value wasn't originally a date/time value, the return value is undetermined.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <param name="For1904Epoch">True if using 1 Jan 1904 as the date epoch. False if using 1 Jan 1900 as the date epoch. This is independent of the workbook's Date1904 property.</param>
            <returns>A System.DateTime cell value.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetCellValueAsDateTime(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get the cell value as a System.DateTime value. If the cell value wasn't originally a date/time value, the return value is undetermined.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <param name="For1904Epoch">True if using 1 Jan 1904 as the date epoch. False if using 1 Jan 1900 as the date epoch. This is independent of the workbook's Date1904 property.</param>
            <returns>A System.DateTime cell value.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetCellValueAsDateTime(System.String,System.String)">
            <summary>
            Get the cell value as a System.DateTime value. If the cell value wasn't originally a date/time value, the return value is undetermined.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <param name="Format">The format string used to parse the date value in the cell if the date is before the date epoch. A date before the date epoch is stored as a string, so the date precision is only as good as the format string. For example, "dd/MM/yyyy HH:mm:ss" is more precise than "dd/MM/yyyy" because the latter loses information about the hours, minutes and seconds.</param>
            <returns>A System.DateTime cell value.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetCellValueAsDateTime(System.Int32,System.Int32,System.String)">
            <summary>
            Get the cell value as a System.DateTime value. If the cell value wasn't originally a date/time value, the return value is undetermined.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <param name="Format">The format string used to parse the date value in the cell if the date is before the date epoch. A date before the date epoch is stored as a string, so the date precision is only as good as the format string. For example, "dd/MM/yyyy HH:mm:ss" is more precise than "dd/MM/yyyy" because the latter loses information about the hours, minutes and seconds.</param>
            <returns>A System.DateTime cell value.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetCellValueAsDateTime(System.String,System.String,System.Boolean)">
            <summary>
            Get the cell value as a System.DateTime value. If the cell value wasn't originally a date/time value, the return value is undetermined.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <param name="Format">The format string used to parse the date value in the cell if the date is before the date epoch. A date before the date epoch is stored as a string, so the date precision is only as good as the format string. For example, "dd/MM/yyyy HH:mm:ss" is more precise than "dd/MM/yyyy" because the latter loses information about the hours, minutes and seconds.</param>
            <param name="For1904Epoch">True if using 1 Jan 1904 as the date epoch. False if using 1 Jan 1900 as the date epoch. This is independent of the workbook's Date1904 property.</param>
            <returns>A System.DateTime cell value.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetCellValueAsDateTime(System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Get the cell value as a System.DateTime value. If the cell value wasn't originally a date/time value, the return value is undetermined.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <param name="Format">The format string used to parse the date value in the cell if the date is before the date epoch. A date before the date epoch is stored as a string, so the date precision is only as good as the format string. For example, "dd/MM/yyyy HH:mm:ss" is more precise than "dd/MM/yyyy" because the latter loses information about the hours, minutes and seconds.</param>
            <param name="For1904Epoch">True if using 1 Jan 1904 as the date epoch. False if using 1 Jan 1900 as the date epoch. This is independent of the workbook's Date1904 property.</param>
            <returns>A System.DateTime cell value.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetCellValueAsString(System.String)">
            <summary>
            Get the cell value as a string.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <returns>A string cell value.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetCellValueAsString(System.Int32,System.Int32)">
            <summary>
            Get the cell value as a string.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <returns>A string cell value.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetCellValueAsRstType(System.String)">
            <summary>
            Get the cell value as a rich text string (SLRstType).
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <returns>An SLRstType cell value.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetCellValueAsRstType(System.Int32,System.Int32)">
            <summary>
            Get the cell value as a rich text string (SLRstType).
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <returns>An SLRstType cell value.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetActiveCell(System.String)">
            <summary>
            Set the active cell for the currently selected worksheet.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetActiveCell(System.Int32,System.Int32)">
            <summary>
            Set the active cell for the currently selected worksheet.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.MergeWorksheetCells(System.String,System.String)">
            <summary>
            Merge cells given a corner cell of the to-be-merged rectangle of cells, and the opposite corner cell. For example, the top-left corner cell and the bottom-right corner cell. Or the bottom-left corner cell and the top-right corner cell. No merging is done if it's just one cell.
            </summary>
            <param name="StartCellReference">The cell reference of the corner cell, such as "A1".</param>
            <param name="EndCellReference">The cell reference of the opposite corner cell, such as "A1".</param>
            <returns>True if merging is successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.MergeWorksheetCells(System.String,System.String,DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues)">
            <summary>
            Merge cells given a corner cell of the to-be-merged rectangle of cells, and the opposite corner cell. For example, the top-left corner cell and the bottom-right corner cell. Or the bottom-left corner cell and the top-right corner cell. No merging is done if it's just one cell. Border style properties are only applied on a successful merge.
            </summary>
            <param name="StartCellReference">The cell reference of the corner cell, such as "A1".</param>
            <param name="EndCellReference">The cell reference of the opposite corner cell, such as "A1".</param>
            <param name="BorderStyle">The border style. Default is none.</param>
            <returns>True if merging is successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.MergeWorksheetCells(System.String,System.String,DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,System.Drawing.Color)">
            <summary>
            Merge cells given a corner cell of the to-be-merged rectangle of cells, and the opposite corner cell. For example, the top-left corner cell and the bottom-right corner cell. Or the bottom-left corner cell and the top-right corner cell. No merging is done if it's just one cell. Border style properties are only applied on a successful merge.
            </summary>
            <param name="StartCellReference">The cell reference of the corner cell, such as "A1".</param>
            <param name="EndCellReference">The cell reference of the opposite corner cell, such as "A1".</param>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The border color.</param>
            <returns>True if merging is successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.MergeWorksheetCells(System.String,System.String,DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Merge cells given a corner cell of the to-be-merged rectangle of cells, and the opposite corner cell. For example, the top-left corner cell and the bottom-right corner cell. Or the bottom-left corner cell and the top-right corner cell. No merging is done if it's just one cell. Border style properties are only applied on a successful merge.
            </summary>
            <param name="StartCellReference">The cell reference of the corner cell, such as "A1".</param>
            <param name="EndCellReference">The cell reference of the opposite corner cell, such as "A1".</param>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The border theme color.</param>
            <returns>True if merging is successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.MergeWorksheetCells(System.String,System.String,DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Merge cells given a corner cell of the to-be-merged rectangle of cells, and the opposite corner cell. For example, the top-left corner cell and the bottom-right corner cell. Or the bottom-left corner cell and the top-right corner cell. No merging is done if it's just one cell. Border style properties are only applied on a successful merge.
            </summary>
            <param name="StartCellReference">The cell reference of the corner cell, such as "A1".</param>
            <param name="EndCellReference">The cell reference of the opposite corner cell, such as "A1".</param>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The border theme color.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <returns>True if merging is successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.MergeWorksheetCells(System.String,System.String,SpreadsheetLight.SLBorder)">
            <summary>
            Merge cells given a corner cell of the to-be-merged rectangle of cells, and the opposite corner cell. For example, the top-left corner cell and the bottom-right corner cell. Or the bottom-left corner cell and the top-right corner cell. No merging is done if it's just one cell. Border style properties are only applied on a successful merge.
            </summary>
            <param name="StartCellReference">The cell reference of the corner cell, such as "A1".</param>
            <param name="EndCellReference">The cell reference of the opposite corner cell, such as "A1".</param>
            <param name="Border">The SLBorder object with border style properties.</param>
            <returns>True if merging is successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.MergeWorksheetCells(System.String,System.String,SpreadsheetLight.SLStyle)">
            <summary>
            Merge cells given a corner cell of the to-be-merged rectangle of cells, and the opposite corner cell. For example, the top-left corner cell and the bottom-right corner cell. Or the bottom-left corner cell and the top-right corner cell. No merging is done if it's just one cell. Cell style and border style properties are only applied on a successful merge.
            </summary>
            <param name="StartCellReference">The cell reference of the corner cell, such as "A1".</param>
            <param name="EndCellReference">The cell reference of the opposite corner cell, such as "A1".</param>
            <param name="Style">The SLStyle object with style properties. Any border style properties set in this SLStyle object will be used.</param>
            <returns>True if merging is successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.MergeWorksheetCells(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Merge cells given a corner cell of the to-be-merged rectangle of cells, and the opposite corner cell. For example, the top-left corner cell and the bottom-right corner cell. Or the bottom-left corner cell and the top-right corner cell. No merging is done if it's just one cell.
            </summary>
            <param name="StartRowIndex">The row index of the corner cell.</param>
            <param name="StartColumnIndex">The column index of the corner cell.</param>
            <param name="EndRowIndex">The row index of the opposite corner cell.</param>
            <param name="EndColumnIndex">The column index of the opposite corner cell.</param>
            <returns>True if merging is successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.MergeWorksheetCells(System.Int32,System.Int32,System.Int32,System.Int32,DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues)">
            <summary>
            Merge cells given a corner cell of the to-be-merged rectangle of cells, and the opposite corner cell. For example, the top-left corner cell and the bottom-right corner cell. Or the bottom-left corner cell and the top-right corner cell. No merging is done if it's just one cell. Border style properties are only applied on a successful merge.
            </summary>
            <param name="StartRowIndex">The row index of the corner cell.</param>
            <param name="StartColumnIndex">The column index of the corner cell.</param>
            <param name="EndRowIndex">The row index of the opposite corner cell.</param>
            <param name="EndColumnIndex">The column index of the opposite corner cell.</param>
            <param name="BorderStyle">The border style. Default is none.</param>
            <returns>True if merging is successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.MergeWorksheetCells(System.Int32,System.Int32,System.Int32,System.Int32,DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,System.Drawing.Color)">
            <summary>
            Merge cells given a corner cell of the to-be-merged rectangle of cells, and the opposite corner cell. For example, the top-left corner cell and the bottom-right corner cell. Or the bottom-left corner cell and the top-right corner cell. No merging is done if it's just one cell. Border style properties are only applied on a successful merge.
            </summary>
            <param name="StartRowIndex">The row index of the corner cell.</param>
            <param name="StartColumnIndex">The column index of the corner cell.</param>
            <param name="EndRowIndex">The row index of the opposite corner cell.</param>
            <param name="EndColumnIndex">The column index of the opposite corner cell.</param>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The border color.</param>
            <returns>True if merging is successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.MergeWorksheetCells(System.Int32,System.Int32,System.Int32,System.Int32,DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Merge cells given a corner cell of the to-be-merged rectangle of cells, and the opposite corner cell. For example, the top-left corner cell and the bottom-right corner cell. Or the bottom-left corner cell and the top-right corner cell. No merging is done if it's just one cell. Border style properties are only applied on a successful merge.
            </summary>
            <param name="StartRowIndex">The row index of the corner cell.</param>
            <param name="StartColumnIndex">The column index of the corner cell.</param>
            <param name="EndRowIndex">The row index of the opposite corner cell.</param>
            <param name="EndColumnIndex">The column index of the opposite corner cell.</param>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The border theme color.</param>
            <returns>True if merging is successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.MergeWorksheetCells(System.Int32,System.Int32,System.Int32,System.Int32,DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Merge cells given a corner cell of the to-be-merged rectangle of cells, and the opposite corner cell. For example, the top-left corner cell and the bottom-right corner cell. Or the bottom-left corner cell and the top-right corner cell. No merging is done if it's just one cell. Border style properties are only applied on a successful merge.
            </summary>
            <param name="StartRowIndex">The row index of the corner cell.</param>
            <param name="StartColumnIndex">The column index of the corner cell.</param>
            <param name="EndRowIndex">The row index of the opposite corner cell.</param>
            <param name="EndColumnIndex">The column index of the opposite corner cell.</param>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The border theme color.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <returns>True if merging is successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.MergeWorksheetCells(System.Int32,System.Int32,System.Int32,System.Int32,SpreadsheetLight.SLBorder)">
            <summary>
            Merge cells given a corner cell of the to-be-merged rectangle of cells, and the opposite corner cell. For example, the top-left corner cell and the bottom-right corner cell. Or the bottom-left corner cell and the top-right corner cell. No merging is done if it's just one cell. Border style properties are only applied on a successful merge.
            </summary>
            <param name="StartRowIndex">The row index of the corner cell.</param>
            <param name="StartColumnIndex">The column index of the corner cell.</param>
            <param name="EndRowIndex">The row index of the opposite corner cell.</param>
            <param name="EndColumnIndex">The column index of the opposite corner cell.</param>
            <param name="Border">The SLBorder object with border style properties.</param>
            <returns>True if merging is successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.MergeWorksheetCells(System.Int32,System.Int32,System.Int32,System.Int32,SpreadsheetLight.SLStyle)">
            <summary>
            Merge cells given a corner cell of the to-be-merged rectangle of cells, and the opposite corner cell. For example, the top-left corner cell and the bottom-right corner cell. Or the bottom-left corner cell and the top-right corner cell. No merging is done if it's just one cell. Cell style and border style properties are only applied on a successful merge.
            </summary>
            <param name="StartRowIndex">The row index of the corner cell.</param>
            <param name="StartColumnIndex">The column index of the corner cell.</param>
            <param name="EndRowIndex">The row index of the opposite corner cell.</param>
            <param name="EndColumnIndex">The column index of the opposite corner cell.</param>
            <param name="Style">The SLStyle object with style properties. Any border style properties set in this SLStyle object will be used.</param>
            <returns>True if merging is successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.UnmergeWorksheetCells(System.String,System.String)">
            <summary>
            Unmerge cells given a corner cell of an existing merged rectangle of cells, and the opposite corner cell. For example, the top-left corner cell and the bottom-right corner cell. Or the bottom-left corner cell and the top-right corner cell.
            </summary>
            <param name="StartCellReference">The cell reference of the corner cell, such as "A1".</param>
            <param name="EndCellReference">The cell reference of the opposite corner cell, such as "A1".</param>
            <returns>True if unmerging is successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.UnmergeWorksheetCells(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Unmerge cells given a corner cell of an existing merged rectangle of cells, and the opposite corner cell. For example, the top-left corner cell and the bottom-right corner cell. Or the bottom-left corner cell and the top-right corner cell.
            </summary>
            <param name="StartRowIndex">The row index of the corner cell.</param>
            <param name="StartColumnIndex">The column index of the corner cell.</param>
            <param name="EndRowIndex">The row index of the opposite corner cell.</param>
            <param name="EndColumnIndex">The column index of the opposite corner cell.</param>
            <returns>True if unmerging is successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetWorksheetMergeCells">
            <summary>
            Get a list of the existing merged cells.
            </summary>
            <returns>A list of the merged cells.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.Filter(System.String,System.String)">
            <summary>
            Filter data.
            </summary>
            <param name="StartCellReference">The cell reference of the corner cell, such as "A1".</param>
            <param name="EndCellReference">The cell reference of the opposite corner cell, such as "A1".</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.Filter(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Filter data.
            </summary>
            <param name="StartRowIndex">The row index of the corner cell.</param>
            <param name="StartColumnIndex">The column index of the corner cell.</param>
            <param name="EndRowIndex">The row index of the opposite corner cell.</param>
            <param name="EndColumnIndex">The column index of the opposite corner cell.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.RemoveFilter">
            <summary>
            Removing any data filter.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.HasFilter">
            <summary>
            Indicates if the currently selected worksheet has an existing filter.
            </summary>
            <returns>True if there's an existing filter. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyCell(System.String,System.String)">
            <summary>
            Copy one cell to another cell.
            </summary>
            <param name="CellReference">The cell reference of the cell to be copied from, such as "A1".</param>
            <param name="AnchorCellReference">The cell reference of the cell to be copied to, such as "A1".</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyCell(System.String,System.String,System.Boolean)">
            <summary>
            Copy one cell to another cell.
            </summary>
            <param name="CellReference">The cell reference of the cell to be copied from, such as "A1".</param>
            <param name="AnchorCellReference">The cell reference of the cell to be copied to, such as "A1".</param>
            <param name="ToCut">True for cut-and-paste. False for copy-and-paste.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyCell(System.String,System.String,SpreadsheetLight.SLPasteTypeValues)">
            <summary>
            Copy one cell to another cell.
            </summary>
            <param name="CellReference">The cell reference of the cell to be copied from, such as "A1".</param>
            <param name="AnchorCellReference">The cell reference of the cell to be copied to, such as "A1".</param>
            <param name="PasteOption">Paste option.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyCell(System.String,System.String,System.String)">
            <summary>
            Copy a range of cells to another range, given the anchor cell of the destination range (top-left cell).
            </summary>
            <param name="StartCellReference">The cell reference of the start cell of the cell range, such as "A1". This is typically the top-left cell.</param>
            <param name="EndCellReference">The cell reference of the end cell of the cell range, such as "A1". This is typically the bottom-right cell.</param>
            <param name="AnchorCellReference">The cell reference of the anchor cell, such as "A1".</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyCell(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Copy a range of cells to another range, given the anchor cell of the destination range (top-left cell).
            </summary>
            <param name="StartCellReference">The cell reference of the start cell of the cell range, such as "A1". This is typically the top-left cell.</param>
            <param name="EndCellReference">The cell reference of the end cell of the cell range, such as "A1". This is typically the bottom-right cell.</param>
            <param name="AnchorCellReference">The cell reference of the anchor cell, such as "A1".</param>
            <param name="ToCut">True for cut-and-paste. False for copy-and-paste.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyCell(System.String,System.String,System.String,SpreadsheetLight.SLPasteTypeValues)">
            <summary>
            Copy a range of cells to another range, given the anchor cell of the destination range (top-left cell).
            </summary>
            <param name="StartCellReference">The cell reference of the start cell of the cell range, such as "A1". This is typically the top-left cell.</param>
            <param name="EndCellReference">The cell reference of the end cell of the cell range, such as "A1". This is typically the bottom-right cell.</param>
            <param name="AnchorCellReference">The cell reference of the anchor cell, such as "A1".</param>
            <param name="PasteOption">Paste options.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyCell(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy one cell to another cell.
            </summary>
            <param name="RowIndex">The row index of the cell to be copied from.</param>
            <param name="ColumnIndex">The column index of the cell to be copied from.</param>
            <param name="AnchorRowIndex">The row index of the cell to be copied to.</param>
            <param name="AnchorColumnIndex">The column index of the cell to be copied to.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyCell(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Copy one cell to another cell.
            </summary>
            <param name="RowIndex">The row index of the cell to be copied from.</param>
            <param name="ColumnIndex">The column index of the cell to be copied from.</param>
            <param name="AnchorRowIndex">The row index of the cell to be copied to.</param>
            <param name="AnchorColumnIndex">The column index of the cell to be copied to.</param>
            <param name="ToCut">True for cut-and-paste. False for copy-and-paste.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyCell(System.Int32,System.Int32,System.Int32,System.Int32,SpreadsheetLight.SLPasteTypeValues)">
            <summary>
            Copy one cell to another cell.
            </summary>
            <param name="RowIndex">The row index of the cell to be copied from.</param>
            <param name="ColumnIndex">The column index of the cell to be copied from.</param>
            <param name="AnchorRowIndex">The row index of the cell to be copied to.</param>
            <param name="AnchorColumnIndex">The column index of the cell to be copied to.</param>
            <param name="PasteOption">Paste option.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyCell(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy a range of cells to another range, given the anchor cell of the destination range (top-left cell).
            </summary>
            <param name="StartRowIndex">The row index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="StartColumnIndex">The column index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="EndRowIndex">The row index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="EndColumnIndex">The column index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="AnchorRowIndex">The row index of the anchor cell.</param>
            <param name="AnchorColumnIndex">The column index of the anchor cell.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyCell(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Copy a range of cells to another range, given the anchor cell of the destination range (top-left cell).
            </summary>
            <param name="StartRowIndex">The row index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="StartColumnIndex">The column index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="EndRowIndex">The row index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="EndColumnIndex">The column index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="AnchorRowIndex">The row index of the anchor cell.</param>
            <param name="AnchorColumnIndex">The column index of the anchor cell.</param>
            <param name="ToCut">True for cut-and-paste. False for copy-and-paste.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyCell(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SpreadsheetLight.SLPasteTypeValues)">
            <summary>
            Copy a range of cells to another range, given the anchor cell of the destination range (top-left cell).
            </summary>
            <param name="StartRowIndex">The row index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="StartColumnIndex">The column index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="EndRowIndex">The row index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="EndColumnIndex">The column index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="AnchorRowIndex">The row index of the anchor cell.</param>
            <param name="AnchorColumnIndex">The column index of the anchor cell.</param>
            <param name="PasteOption">Paste option.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyCellFromWorksheet(System.String,System.String,System.String)">
            <summary>
            Copy one cell from another worksheet to the currently selected worksheet.
            </summary>
            <param name="WorksheetName">The name of the source worksheet.</param>
            <param name="CellReference">The cell reference of the cell to be copied from, such as "A1".</param>
            <param name="AnchorCellReference">The cell reference of the anchor cell, such as "A1".</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyCellFromWorksheet(System.String,System.String,System.String,SpreadsheetLight.SLPasteTypeValues)">
            <summary>
            Copy one cell from another worksheet to the currently selected worksheet.
            </summary>
            <param name="WorksheetName">The name of the source worksheet.</param>
            <param name="CellReference">The cell reference of the cell to be copied from, such as "A1".</param>
            <param name="AnchorCellReference">The cell reference of the anchor cell, such as "A1".</param>
            <param name="PasteOption">Paste option.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyCellFromWorksheet(System.String,System.String,System.String,System.String)">
            <summary>
            Copy a range of cells from another worksheet to the currently selected worksheet, given the anchor cell of the destination range (top-left cell).
            </summary>
            <param name="WorksheetName">The name of the source worksheet.</param>
            <param name="StartCellReference">The cell reference of the start cell of the cell range, such as "A1". This is typically the top-left cell.</param>
            <param name="EndCellReference">The cell reference of the end cell of the cell range, such as "A1". This is typically the bottom-right cell.</param>
            <param name="AnchorCellReference">The cell reference of the anchor cell, such as "A1".</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyCellFromWorksheet(System.String,System.String,System.String,System.String,SpreadsheetLight.SLPasteTypeValues)">
            <summary>
            Copy a range of cells from another worksheet to the currently selected worksheet, given the anchor cell of the destination range (top-left cell).
            </summary>
            <param name="WorksheetName">The name of the source worksheet.</param>
            <param name="StartCellReference">The cell reference of the start cell of the cell range, such as "A1". This is typically the top-left cell.</param>
            <param name="EndCellReference">The cell reference of the end cell of the cell range, such as "A1". This is typically the bottom-right cell.</param>
            <param name="AnchorCellReference">The cell reference of the anchor cell, such as "A1".</param>
            <param name="PasteOption">Paste option.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyCellFromWorksheet(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy one cell from another worksheet to the currently selected worksheet.
            </summary>
            <param name="WorksheetName">The name of the source worksheet.</param>
            <param name="RowIndex">The row index of the cell to be copied from.</param>
            <param name="ColumnIndex">The column index of the cell to be copied from.</param>
            <param name="AnchorRowIndex">The row index of the anchor cell.</param>
            <param name="AnchorColumnIndex">The column index of the anchor cell.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyCellFromWorksheet(System.String,System.Int32,System.Int32,System.Int32,System.Int32,SpreadsheetLight.SLPasteTypeValues)">
            <summary>
            Copy one cell from another worksheet to the currently selected worksheet.
            </summary>
            <param name="WorksheetName">The name of the source worksheet.</param>
            <param name="RowIndex">The row index of the cell to be copied from.</param>
            <param name="ColumnIndex">The column index of the cell to be copied from.</param>
            <param name="AnchorRowIndex">The row index of the anchor cell.</param>
            <param name="AnchorColumnIndex">The column index of the anchor cell.</param>
            <param name="PasteOption">Paste option.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyCellFromWorksheet(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy a range of cells from another worksheet to the currently selected worksheet, given the anchor cell of the destination range (top-left cell).
            </summary>
            <param name="WorksheetName">The name of the source worksheet.</param>
            <param name="StartRowIndex">The row index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="StartColumnIndex">The column index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="EndRowIndex">The row index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="EndColumnIndex">The column index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="AnchorRowIndex">The row index of the anchor cell.</param>
            <param name="AnchorColumnIndex">The column index of the anchor cell.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyCellFromWorksheet(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SpreadsheetLight.SLPasteTypeValues)">
            <summary>
            Copy a range of cells from another worksheet to the currently selected worksheet, given the anchor cell of the destination range (top-left cell).
            </summary>
            <param name="WorksheetName">The name of the source worksheet.</param>
            <param name="StartRowIndex">The row index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="StartColumnIndex">The column index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="EndRowIndex">The row index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="EndColumnIndex">The column index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="AnchorRowIndex">The row index of the anchor cell.</param>
            <param name="AnchorColumnIndex">The column index of the anchor cell.</param>
            <param name="PasteOption">Paste option.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.ClearCellContent">
            <summary>
            Clear all cell content in the worksheet.
            </summary>
            <returns>True if content has been cleared. False otherwise. If there are no content in the worksheet, false is also returned.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.ClearCellContent(System.String,System.String)">
            <summary>
            Clear all cell content within specified rows and columns. If the top-left cell of a merged cell is within specified rows and columns, the merged cell content is also cleared.
            </summary>
            <param name="StartCellReference">The cell reference of the start cell of the cell range to be cleared, such as "A1". This is typically the top-left cell.</param>
            <param name="EndCellReference">The cell reference of the end cell of the cell range to be cleared, such as "A1". This is typically the bottom-right cell.</param>
            <returns>True if content has been cleared. False otherwise. If there are no content within specified rows and columns, false is also returned.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.ClearCellContent(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Clear all cell content within specified rows and columns. If the top-left cell of a merged cell is within specified rows and columns, the merged cell content is also cleared.
            </summary>
            <param name="StartRowIndex">The row index of the start row. This is typically the top row.</param>
            <param name="StartColumnIndex">The column index of the start column. This is typically the left-most column.</param>
            <param name="EndRowIndex">The row index of the end row. This is typically the bottom row.</param>
            <param name="EndColumnIndex">The column index of the end column. This is typically the right-most column.</param>
            <returns>True if content has been cleared. False otherwise. If there are no content within specified rows and columns, false is also returned.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetSharedCellFormulas">
            <summary>
            Get existing shared cell formulas in the current worksheet in a list of SLSharedCellFormula objects.
            NOTE: Due to technical difficulties (read: a certain popular spreadsheet software's behaviour is confusing),
            any copy/insert/delete of cells/rows/columns will flatten all shared cell formula into the respective cells.
            WARNING: This is only a snapshot. Any changes made to the returned result are not used.
            </summary>
            <returns>A list of existing shared cell formulas.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetCellFormula(System.String)">
            <summary>
            Get the cell formula if it exists.
            </summary>
            <param name="CellReference">The cell reference, such as "A1".</param>
            <returns>The cell formula.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetCellFormula(System.Int32,System.Int32)">
            <summary>
            Get the cell formula if it exists.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <returns>The cell formula.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.ProcessCellFormulaDelta(SpreadsheetLight.SLCell@,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="cell"></param>
            <param name="ToSwapRowColumn">this is for copying on transpose</param>
            <param name="StartRowIndex"></param>
            <param name="StartColumnIndex"></param>
            <param name="AnchorRowIndex"></param>
            <param name="AnchorColumnIndex"></param>
            <param name="CheckForInsertDeleteRowColumn">true when it's insert/delete row column operation. otherwise it's copy cell/row/column</param>
            <param name="CheckForInsert">true when it's insert row/column, false when it's delete row/column</param>
            <param name="CheckForRow"></param>
            <param name="CheckStartIndex">only used when delete. put 0 when insert.</param>
            <param name="CheckEndIndex">only used when delete. put 0 when insert.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.AdjustCellFormulaDelta(System.String,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="CellFormula"></param>
            <param name="ToSwapRowColumn">this is for copying on transpose</param>
            <param name="StartRowIndex"></param>
            <param name="StartColumnIndex"></param>
            <param name="AnchorRowIndex"></param>
            <param name="AnchorColumnIndex"></param>
            <param name="OnlyForCurrentWorksheet"></param>
            <param name="CheckForInsertDeleteRowColumn">true when it's insert/delete row column operation. otherwise it's copy cell/row/column</param>
            <param name="CheckForInsert">true when it's insert row/column, false when it's delete row/column</param>
            <param name="CheckForRow"></param>
            <param name="CheckStartIndex">only used when delete. put 0 when insert.</param>
            <param name="CheckEndIndex">only used when delete. put 0 when insert.</param>
            <param name="HasError"></param>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.HasRowStyle(System.Int32)">
            <summary>
            Indicates if the row has an existing style.
            </summary>
            <param name="RowIndex">The row index.</param>
            <returns>True if the row has an existing style. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetRowHeight(System.Int32)">
            <summary>
            Get the row height. If the row doesn't have a height explicitly set, the default row height for the current worksheet is returned.
            </summary>
            <param name="RowIndex">The row index.</param>
            <returns>The row height in points.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetRowHeight(System.Int32,System.Double)">
            <summary>
            Set the row height.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="RowHeight">The row height in points.</param>
            <returns>True if the row index is valid. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetRowHeight(System.Int32,System.Int32,System.Double)">
            <summary>
            Set the row height for a range of rows.
            </summary>
            <param name="StartRowIndex">The row index of the starting row.</param>
            <param name="EndRowIndex">The row index of the ending row.</param>
            <param name="RowHeight">The row height in points.</param>
            <returns>True if the row indices are valid. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.AutoFitRow(System.Int32)">
            <summary>
            Automatically fit row height according to cell contents.
            </summary>
            <param name="RowIndex">The row index.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.AutoFitRow(System.Int32,System.Double)">
            <summary>
            Automatically fit row height according to cell contents.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="MaximumRowHeight">The maximum row height in points.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.AutoFitRow(System.Int32,System.Int32)">
            <summary>
            Automatically fit row height according to cell contents.
            </summary>
            <param name="StartRowIndex">The row index of the starting row.</param>
            <param name="EndRowIndex">The row index of the ending row.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.AutoFitRow(System.Int32,System.Int32,System.Double)">
            <summary>
            Automatically fit row height according to cell contents.
            </summary>
            <param name="StartRowIndex">The row index of the starting row.</param>
            <param name="EndRowIndex">The row index of the ending row.</param>
            <param name="MaximumRowHeight">The maximum row height in points.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.IsRowHidden(System.Int32)">
            <summary>
            Indicates if the row is hidden.
            </summary>
            <param name="RowIndex">The row index.</param>
            <returns>True if the row is hidden. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.HideRow(System.Int32)">
            <summary>
            Hide the row.
            </summary>
            <param name="RowIndex">The row index.</param>
            <returns>True if the row index is valid. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.HideRow(System.Int32,System.Int32)">
            <summary>
            Hide a range of rows.
            </summary>
            <param name="StartRowIndex">The row index of the starting row.</param>
            <param name="EndRowIndex">The row index of the ending row.</param>
            <returns>True if the row indices are valid. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.UnhideRow(System.Int32)">
            <summary>
            Unhide the row.
            </summary>
            <param name="RowIndex">The row index.</param>
            <returns>True if the row index is valid. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.UnhideRow(System.Int32,System.Int32)">
            <summary>
            Unhide a range of rows.
            </summary>
            <param name="StartRowIndex">The row index of the starting row.</param>
            <param name="EndRowIndex">The row index of the ending row.</param>
            <returns>True if the row indices are valid. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetRowGroupLevel(System.Int32)">
            <summary>
            Get the group level of the row.
            </summary>
            <param name="RowIndex">The row index.</param>
            <returns>The group level (between 0 and 7, both inclusive). The default is 0.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GroupRows(System.Int32,System.Int32)">
            <summary>
            Group rows.
            </summary>
            <param name="StartRowIndex">The row index of the start row.</param>
            <param name="EndRowIndex">The row index of the end row.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.UngroupRows(System.Int32,System.Int32)">
            <summary>
            Ungroup rows.
            </summary>
            <param name="StartRowIndex">The row index of the start row.</param>
            <param name="EndRowIndex">The row index of the end row.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CollapseRows(System.Int32)">
            <summary>
            Collapse a group of rows.
            </summary>
            <param name="RowIndex">The row index of the row just after the group of rows you want to collapse. For example, this will be row 5 if rows 2 to 4 are grouped.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.ExpandRows(System.Int32)">
            <summary>
            Expand a group of rows.
            </summary>
            <param name="RowIndex">The row index of the row just after the group of rows you want to expand. For example, this will be row 5 if rows 2 to 4 are grouped.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.IsRowThickTopped(System.Int32)">
            <summary>
            Indicates if the row has a thick top.
            </summary>
            <param name="RowIndex">The row index.</param>
            <returns>True if the row has a thick top. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetRowThickTop(System.Int32,System.Boolean)">
            <summary>
            Set the thick top property of the row.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="IsThickTopped">True if the row should have a thick top. False otherwise.</param>
            <returns>True if the row index is valid. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetRowThickTop(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Set the thick top property of a range of rows.
            </summary>
            <param name="StartRowIndex">The row index of the starting row.</param>
            <param name="EndRowIndex">The row index of the ending row.</param>
            <param name="IsThickTopped">True if the rows should have a thick top. False otherwise.</param>
            <returns>True if the row indices are valid. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.IsRowThickBottomed(System.Int32)">
            <summary>
            Indicates if the row has a thick bottom.
            </summary>
            <param name="RowIndex">The row index.</param>
            <returns>True if the row has a thick bottom. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetRowThickBottomed(System.Int32,System.Boolean)">
            <summary>
            Set the thick bottom property of the row.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="IsThickBottomed">True if the row should have a thick bottom. False otherwise.</param>
            <returns>True if the row index is valid. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetRowThickBottomed(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Set the thick bottom property of a range of rows.
            </summary>
            <param name="StartRowIndex">The row index of the starting row.</param>
            <param name="EndRowIndex">The row index of the ending row.</param>
            <param name="IsThickBottomed">True if the rows should have a thick bottom. False otherwise.</param>
            <returns>True if the row indices are valid. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.IsRowShowingPhonetic(System.Int32)">
            <summary>
            Indicates if the row is showing phonetic information.
            </summary>
            <param name="RowIndex">The row index.</param>
            <returns>True if the row is showing phonetic information. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetRowShowPhonetic(System.Int32,System.Boolean)">
            <summary>
            Set the show phonetic property for the row.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ShowPhonetic">True if the row should show phonetic information. False otherwise.</param>
            <returns>True if the row index is valid. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetRowShowPhonetic(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Set the show phonetic property for a range of rows.
            </summary>
            <param name="StartRowIndex">The row index of the starting row.</param>
            <param name="EndRowIndex">The row index of the ending row.</param>
            <param name="ShowPhonetic">True if the rows should show phonetic information. False otherwise.</param>
            <returns>True if the row indices are valid. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyRow(System.Int32,System.Int32)">
            <summary>
            Copy one row to another row.
            </summary>
            <param name="RowIndex">The row index of the row to be copied from.</param>
            <param name="AnchorRowIndex">The row index of the row to be copied to.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyRow(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Copy one row to another row.
            </summary>
            <param name="RowIndex">The row index of the row to be copied from.</param>
            <param name="AnchorRowIndex">The row index of the row to be copied to.</param>
            <param name="ToCut">True for cut-and-paste. False for copy-and-paste.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyRow(System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy a range of rows to another range, given the anchor row of the destination range (top row).
            </summary>
            <param name="StartRowIndex">The row index of the start row of the row range. This is typically the top row.</param>
            <param name="EndRowIndex">The row index of the end row of the row range. This is typically the bottom row.</param>
            <param name="AnchorRowIndex">The row index of the anchor row.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyRow(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Copy a range of rows to another range, given the anchor row of the destination range (top row).
            </summary>
            <param name="StartRowIndex">The row index of the start row of the row range. This is typically the top row.</param>
            <param name="EndRowIndex">The row index of the end row of the row range. This is typically the bottom row.</param>
            <param name="AnchorRowIndex">The row index of the anchor row.</param>
            <param name="ToCut">True for cut-and-paste. False for copy-and-paste.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.InsertRow(System.Int32,System.Int32)">
            <summary>
            Insert one or more rows.
            </summary>
            <param name="StartRowIndex">Additional rows are inserted at this row index.</param>
            <param name="NumberOfRows">The number of rows to insert.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.DeleteRow(System.Int32,System.Int32)">
            <summary>
            Delete one or more rows.
            </summary>
            <param name="StartRowIndex">Rows will be deleted from this row index, including this row itself.</param>
            <param name="NumberOfRows">Number of rows to delete.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.ClearRowContent(System.Int32,System.Int32)">
            <summary>
            Clear all cell content within specified rows. If the top-left cell of a merged cell is within specified rows, the merged cell content is also cleared.
            </summary>
            <param name="StartRowIndex">The row index of the starting row.</param>
            <param name="EndRowIndex">The row index of the ending row.</param>
            <returns>True if content has been cleared. False otherwise. If there are no content within specified rows, false is also returned.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.HasColumnStyle(System.String)">
            <summary>
            Indicates if the column has an existing style.
            </summary>
            <param name="ColumnName">The column name, such as "A".</param>
            <returns>True if the column has an existing style. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.HasColumnStyle(System.Int32)">
            <summary>
            Indicates if the column has an existing style.
            </summary>
            <param name="ColumnIndex">The column index.</param>
            <returns>True if the column has an existing style. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetColumnWidth(System.String)">
            <summary>
            Get the column width. If the column doesn't have a width explicitly set, the default column width for the current worksheet is returned.
            </summary>
            <param name="ColumnName">The column name, such as "A".</param>
            <returns>The column width.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetColumnWidth(System.Int32)">
            <summary>
            Get the column width. If the column doesn't have a width explicitly set, the default column width for the current worksheet is returned.
            </summary>
            <param name="ColumnIndex">The column index.</param>
            <returns>The column width.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetColumnWidth(System.String,System.Double)">
            <summary>
            Set the column width.
            </summary>
            <param name="ColumnName">The column name, such as "A".</param>
            <param name="ColumnWidth">The column width.</param>
            <returns>True if the column name is valid. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetColumnWidth(System.Int32,System.Double)">
            <summary>
            Set the column width.
            </summary>
            <param name="ColumnIndex">The column index.</param>
            <param name="ColumnWidth">The column width.</param>
            <returns>True if the column index is valid. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetColumnWidth(System.String,System.String,System.Double)">
            <summary>
            Set the column width for a range of columns.
            </summary>
            <param name="StartColumnName">The column name of the start column.</param>
            <param name="EndColumnName">The column name of the end column.</param>
            <param name="ColumnWidth">The column width.</param>
            <returns>True if the column names are valid. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetColumnWidth(System.Int32,System.Int32,System.Double)">
            <summary>
            Set the column width for a range of columns.
            </summary>
            <param name="StartColumnIndex">The column index of the start column.</param>
            <param name="EndColumnIndex">The column index of the end column.</param>
            <param name="ColumnWidth">The column width.</param>
            <returns>True if the column indices are valid. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.AutoFitColumn(System.String)">
            <summary>
            Automatically fit column width according to cell contents.
            </summary>
            <param name="ColumnName">The column name, such as "A".</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.AutoFitColumn(System.String,System.Double)">
            <summary>
            Automatically fit column width according to cell contents.
            </summary>
            <param name="ColumnName">The column name, such as "A".</param>
            <param name="MaximumColumnWidth">The maximum column width in number of characters.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.AutoFitColumn(System.String,System.String)">
            <summary>
            Automatically fit column width according to cell contents.
            </summary>
            <param name="StartColumnName">The column name of the start column.</param>
            <param name="EndColumnName">The column name of the end column.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.AutoFitColumn(System.String,System.String,System.Double)">
            <summary>
            Automatically fit column width according to cell contents.
            </summary>
            <param name="StartColumnName">The column name of the start column.</param>
            <param name="EndColumnName">The column name of the end column.</param>
            <param name="MaximumColumnWidth">The maximum column width in number of characters.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.AutoFitColumn(System.Int32)">
            <summary>
            Automatically fit column width according to cell contents.
            </summary>
            <param name="ColumnIndex">The column index.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.AutoFitColumn(System.Int32,System.Double)">
            <summary>
            Automatically fit column width according to cell contents.
            </summary>
            <param name="ColumnIndex">The column index.</param>
            <param name="MaximumColumnWidth">The maximum column width in number of characters.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.AutoFitColumn(System.Int32,System.Int32)">
            <summary>
            Automatically fit column width according to cell contents.
            </summary>
            <param name="StartColumnIndex">The column index of the start column.</param>
            <param name="EndColumnIndex">The column index of the end column.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.AutoFitColumn(System.Int32,System.Int32,System.Double)">
            <summary>
            Automatically fit column width according to cell contents.
            </summary>
            <param name="StartColumnIndex">The column index of the start column.</param>
            <param name="EndColumnIndex">The column index of the end column.</param>
            <param name="MaximumColumnWidth">The maximum column width in number of characters.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.IsColumnHidden(System.String)">
            <summary>
            Indicates if the column is hidden.
            </summary>
            <param name="ColumnName">The column name, such as "A".</param>
            <returns>True if the column is hidden. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.IsColumnHidden(System.Int32)">
            <summary>
            Indicates if the column is hidden.
            </summary>
            <param name="ColumnIndex">The column index.</param>
            <returns>True if the column is hidden. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.HideColumn(System.String)">
            <summary>
            Hide the column.
            </summary>
            <param name="ColumnName">The column name, such as "A".</param>
            <returns>True if the column name is valid. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.HideColumn(System.Int32)">
            <summary>
            Hide the column.
            </summary>
            <param name="ColumnIndex">The column index.</param>
            <returns>True if the column index is valid. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.HideColumn(System.String,System.String)">
            <summary>
            Hide a range of columns.
            </summary>
            <param name="StartColumnName">The column name of the start column.</param>
            <param name="EndColumnName">The column name of the end column.</param>
            <returns>True if the column names are valid. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.HideColumn(System.Int32,System.Int32)">
            <summary>
            Hide a range of columns.
            </summary>
            <param name="StartColumnIndex">The column index of the start column.</param>
            <param name="EndColumnIndex">The column index of the end column.</param>
            <returns>True if the column indices are valid. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.UnhideColumn(System.String)">
            <summary>
            Unhide the column.
            </summary>
            <param name="ColumnName">The column name, such as "A".</param>
            <returns>True if the column name is valid. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.UnhideColumn(System.Int32)">
            <summary>
            Unhide the column.
            </summary>
            <param name="ColumnIndex">The column index.</param>
            <returns>True if the column index is valid. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.UnhideColumn(System.String,System.String)">
            <summary>
            Unhide a range of columns.
            </summary>
            <param name="StartColumnName">The column name of the start column.</param>
            <param name="EndColumnName">The column name of the end column.</param>
            <returns>True if the column names are valid. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.UnhideColumn(System.Int32,System.Int32)">
            <summary>
            Unhide a range of columns.
            </summary>
            <param name="StartColumnIndex">The column index of the start column.</param>
            <param name="EndColumnIndex">The column index of the end column.</param>
            <returns>True if the column indices are valid. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.IsColumnShowingPhonetic(System.String)">
            <summary>
            Indicates if the column is showing phonetic information.
            </summary>
            <param name="ColumnName">The column name, such as "A".</param>
            <returns>True if the column is showing phonetic information. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.IsColumnShowingPhonetic(System.Int32)">
            <summary>
            Indicates if the column is showing phonetic information.
            </summary>
            <param name="ColumnIndex">The column index.</param>
            <returns>True if the column is showing phonetic information. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetColumnShowPhonetic(System.String,System.Boolean)">
            <summary>
            Set the show phonetic property for the column.
            </summary>
            <param name="ColumnName">The column name, such as "A".</param>
            <param name="ShowPhonetic">True if the column should show phonetic information. False otherwise.</param>
            <returns>True if the column name is valid. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetColumnShowPhonetic(System.Int32,System.Boolean)">
            <summary>
            Set the show phonetic property for the column.
            </summary>
            <param name="ColumnIndex">The column index.</param>
            <param name="ShowPhonetic">True if the column should show phonetic information. False otherwise.</param>
            <returns>True if the column index is valid. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetColumnShowPhonetic(System.String,System.String,System.Boolean)">
            <summary>
            Set the show phonetic property for a range of columns.
            </summary>
            <param name="StartColumnName">The column name of the start column.</param>
            <param name="EndColumnName">The column name of the end column.</param>
            <param name="ShowPhonetic">True if the columns should show phonetic information. False otherwise.</param>
            <returns>True if the column names are valid. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.SetColumnShowPhonetic(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Set the show phonetic property for a range of columns.
            </summary>
            <param name="StartColumnIndex">The column index of the start column.</param>
            <param name="EndColumnIndex">The column index of the end column.</param>
            <param name="ShowPhonetic">True if the columns should show phonetic information. False otherwise.</param>
            <returns>True if the column indices are valid. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyColumn(System.String,System.String)">
            <summary>
            Copy one column to another column.
            </summary>
            <param name="ColumnName">The column name of the column to be copied from.</param>
            <param name="AnchorColumnName">The column name of the column to be copied to.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyColumn(System.Int32,System.Int32)">
            <summary>
            Copy one column to another column.
            </summary>
            <param name="ColumnIndex">The column index of the column to be copied from.</param>
            <param name="AnchorColumnIndex">The column index of the column to be copied to.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyColumn(System.String,System.String,System.Boolean)">
            <summary>
            Copy one column to another column.
            </summary>
            <param name="ColumnName">The column name of the column to be copied from.</param>
            <param name="AnchorColumnName">The column name of the column to be copied to.</param>
            <param name="ToCut">True for cut-and-paste. False for copy-and-paste.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyColumn(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Copy one column to another column.
            </summary>
            <param name="ColumnIndex">The column index of the column to be copied from.</param>
            <param name="AnchorColumnIndex">The column index of the column to be copied to.</param>
            <param name="ToCut">True for cut-and-paste. False for copy-and-paste.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyColumn(System.String,System.String,System.String)">
            <summary>
            Copy a range of columns to another range, given the anchor column of the destination range (left-most column).
            </summary>
            <param name="StartColumnName">The column name of the start column of the column range. This is typically the left-most column.</param>
            <param name="EndColumnName">The column name of the end column of the column range. This is typically the right-most column.</param>
            <param name="AnchorColumnName">The column name of the anchor column.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyColumn(System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy a range of columns to another range, given the anchor column of the destination range (left-most column).
            </summary>
            <param name="StartColumnIndex">The column index of the start column of the column range. This is typically the left-most column.</param>
            <param name="EndColumnIndex">The column index of the end column of the column range. This is typically the right-most column.</param>
            <param name="AnchorColumnIndex">The column index of the anchor column.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyColumn(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Copy a range of columns to another range, given the anchor column of the destination range (left-most column).
            </summary>
            <param name="StartColumnName">The column name of the start column of the column range. This is typically the left-most column.</param>
            <param name="EndColumnName">The column name of the end column of the column range. This is typically the right-most column.</param>
            <param name="AnchorColumnName">The column name of the anchor column.</param>
            <param name="ToCut">True for cut-and-paste. False for copy-and-paste.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CopyColumn(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Copy a range of columns to another range, given the anchor column of the destination range (left-most column).
            </summary>
            <param name="StartColumnIndex">The column index of the start column of the column range. This is typically the left-most column.</param>
            <param name="EndColumnIndex">The column index of the end column of the column range. This is typically the right-most column.</param>
            <param name="AnchorColumnIndex">The column index of the anchor column.</param>
            <param name="ToCut">True for cut-and-paste. False for copy-and-paste.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetColumnGroupLevel(System.String)">
            <summary>
            Get the group level of the column.
            </summary>
            <param name="ColumnName">The column name, such as "A".</param>
            <returns>The group level (between 0 and 7, both inclusive). The default is 0.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GetColumnGroupLevel(System.Int32)">
            <summary>
            Get the group level of the column.
            </summary>
            <param name="ColumnIndex">The column index.</param>
            <returns>The group level (between 0 and 7, both inclusive). The default is 0.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GroupColumns(System.String,System.String)">
            <summary>
            Group columns.
            </summary>
            <param name="StartColumnName">The column name of the start column of the column range. This is typically the left-most column.</param>
            <param name="EndColumnName">The column name of the end column of the column range. This is typically the right-most column.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.GroupColumns(System.Int32,System.Int32)">
            <summary>
            Group columns.
            </summary>
            <param name="StartColumnIndex">The column index of the start column.</param>
            <param name="EndColumnIndex">The column index of the end column.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.UngroupColumns(System.String,System.String)">
            <summary>
            Ungroup columns.
            </summary>
            <param name="StartColumnName">The column name of the start column of the column range. This is typically the left-most column.</param>
            <param name="EndColumnName">The column name of the end column of the column range. This is typically the right-most column.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.UngroupColumns(System.Int32,System.Int32)">
            <summary>
            Ungroup columns.
            </summary>
            <param name="StartColumnIndex">The column index of the start column.</param>
            <param name="EndColumnIndex">The column index of the end column.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CollapseColumns(System.String)">
            <summary>
            Collapse a group of columns.
            </summary>
            <param name="ColumnName">The column name (such as "A1") of the column just after the group of columns you want to collapse. For example, this will be column E if columns B to D are grouped.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.CollapseColumns(System.Int32)">
            <summary>
            Collapse a group of columns.
            </summary>
            <param name="ColumnIndex">The column index of the column just after the group of columns you want to collapse. For example, this will be column 5 if columns 2 to 4 are grouped.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.ExpandColumns(System.String)">
            <summary>
            Expand a group of columns.
            </summary>
            <param name="ColumnName">The column name (such as "A1") of the column just after the group of columns you want to expand. For example, this will be column E if columns B to D are grouped.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.ExpandColumns(System.Int32)">
            <summary>
            Expand a group of columns.
            </summary>
            <param name="ColumnIndex">The column index of the column just after the group of columns you want to expand. For example, this will be column 5 if columns 2 to 4 are grouped.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.InsertColumn(System.String,System.Int32)">
            <summary>
            Insert one or more columns.
            </summary>
            <param name="StartColumnName">Additional columns will be inserted at this column.</param>
            <param name="NumberOfColumns">Number of columns to insert.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.InsertColumn(System.Int32,System.Int32)">
            <summary>
            Insert one or more columns.
            </summary>
            <param name="StartColumnIndex">Additional columns will be inserted at this column index.</param>
            <param name="NumberOfColumns">Number of columns to insert.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.DeleteColumn(System.String,System.Int32)">
            <summary>
            Delete one or more columns.
            </summary>
            <param name="StartColumnName">Columns will deleted from this column, including this column itself.</param>
            <param name="NumberOfColumns">Number of columns to delete.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.DeleteColumn(System.Int32,System.Int32)">
            <summary>
            Delete one or more columns.
            </summary>
            <param name="StartColumnIndex">Columns will be deleted from this column index, including this column itself.</param>
            <param name="NumberOfColumns">Number of columns to delete.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.ClearColumnContent(System.String,System.String)">
            <summary>
            Clear all cell content within specified columns. If the top-left cell of a merged cell is within specified columns, the merged cell content is also cleared.
            </summary>
            <param name="StartColumnName">The column name of the start column.</param>
            <param name="EndColumnName">The column name of the end column.</param>
            <returns>True if content has been cleared. False otherwise. If there are no content within specified rows, false is also returned.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.ClearColumnContent(System.Int32,System.Int32)">
            <summary>
            Clear all cell content within specified columns. If the top-left cell of a merged cell is within specified columns, the merged cell content is also cleared.
            </summary>
            <param name="StartColumnIndex">The column index of the start column.</param>
            <param name="EndColumnIndex">The column index of the end column.</param>
            <returns>True if content has been cleared. False otherwise. If there are no content within specified rows, false is also returned.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.AddRowColumnIndexDelta(System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@)">
            <summary>
            Delta is >= 0
            </summary>
            <param name="GivenStartIndex"></param>
            <param name="Delta">Delta is >= 0</param>
            <param name="IsRow"></param>
            <param name="CurrentStartIndex"></param>
            <param name="CurrentEndIndex"></param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.DeleteRowColumnIndexDelta(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Delta is >= 0
            </summary>
            <param name="GivenStartIndex"></param>
            <param name="GivenEndIndex"></param>
            <param name="Delta">Delta is >= 0</param>
            <param name="CurrentStartIndex"></param>
            <param name="CurrentEndIndex"></param>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.AutoFitRowColumn(System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
            This returns a list of index with pixel lengths. Depending on the type,
            the pixel length is for row heights or column widths
            </summary>
            <param name="IsRow"></param>
            <param name="StartIndex"></param>
            <param name="EndIndex"></param>
            <param name="MaxPixelLength"></param>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetLight.SLDocument.FlattenAllSharedCellFormula">
            <summary>
            Flattens shared cell formulas into respective cells.
            For example, if there's a shared cell formula in A2 for the range A2:A6, the shared cell formula will be
            individually assigned into A2, A3, A4, A5 and A6. And the shared cell formula portion will then be removed.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDocument.ThrowExceptionsIfAny">
            <summary>
            Set to true to bubble exceptions up if there are any occurring within SpreadsheetLight. Set to false otherwise. The default is false.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDocument.BlankSpreadsheetFileName">
            <summary>
            The file name of the default blank spreadsheet. This is read-only.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDocument.DefaultFirstSheetName">
            <summary>
            The name of the first worksheet when creating a new spreadsheet. This is read-only.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDocument.DefaultFontSize">
            <summary>
            The default font size in points. This is read-only.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDocument.RowLimit">
            <summary>
            The maximum number of rows in a worksheet. This is read-only.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDocument.ColumnLimit">
            <summary>
            The maximum number of columns in a worksheet. This is read-only.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDocument.PixelToEMU">
            <summary>
            This should be assigned immediately after the minor font is determined
            and never assigned anymore after that.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDocument.RowHeightMultiple">
            <summary>
            This should be assigned immediately after the minor font is determined
            and never assigned anymore after that.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDocument.DocumentProperties">
            <summary>
            The document metadata.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLPieChartOptions">
            <summary>
            Chart customization options for pie, bar-of-pie, pie-of-pie and doughnut charts.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLPieChartOptions.#ctor">
            <summary>
            Initializes an instance of SLPieChartOptions. It is recommended to use SLChart.CreatePieChartOptions().
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLPieChartOptions.SplitSeriesByPosition(System.Int32)">
            <summary>
            Split the data series by position where the second plot contains the last N values. This is only for bar-of-pie or pie-of-pie charts.
            </summary>
            <param name="LastNValues">The last N values used in the second plot.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLPieChartOptions.SplitSeriesByValue(System.Double)">
            <summary>
            Split the data series by value where the second plot contains all values less than a maximum value. This is only for bar-of-pie or pie-of-pie charts.
            </summary>
            <param name="MaxValue">The maximum value.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLPieChartOptions.SplitSeriesByPercentage(System.Double)">
            <summary>
            Split the data series by percentage where the second plot contains all values less than a percentage of the sum. This is only for bar-of-pie or pie-of-pie charts.
            </summary>
            <param name="MaxPercentage">The maximum percentage of the sum.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLPieChartOptions.SplitSeriesByCustom(System.Int32[])">
            <summary>
            Split the data series by selecting data points for the second plot. This is only for bar-of-pie or pie-of-pie charts.
            </summary>
            <param name="DataPointIndices">The indices of the data points of the data series. The index is 1-based, so "1,3,4" sets the 1st, 3rd and 4th data point in the second plot.</param>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLPieChartOptions.VaryColors">
            <summary>
            Each data point shall have a different color. The default is "true".
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLPieChartOptions.FirstSliceAngle">
            <summary>
            Angle of the first slice, ranging from 0 degrees to 360 degrees.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLPieChartOptions.HoleSize">
            <summary>
            The size of the hole in a doughnut chart, ranging from 10% to 90% of the diameter of the doughnut chart. If the doughnut chart is exploded, the diameter is taken to be that when it's not exploded.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLPieChartOptions.GapWidth">
            <summary>
            The gap width between the first pie and the second bar or pie chart, ranging from 0 to 500 (both inclusive). This is for bar-of-pie or pie-of-pie charts.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLPieChartOptions.SecondPieSize">
            <summary>
            The size of the second bar or pie of the bar-of-pie or pie-of-pie chart as a percentage of the size of the first pie. This ranges from 5% to 200% (both inclusive).
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLPieChartOptions.Line">
            <summary>
            Line properties for the connecting line for bar-of-pie or pie-of-pie charts.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLPieChartOptions.Shadow">
            <summary>
            Shadow properties for the connecting line for bar-of-pie or pie-of-pie charts.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLPieChartOptions.Glow">
            <summary>
            Glow properties for the connecting line for bar-of-pie or pie-of-pie charts.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLPieChartOptions.SoftEdge">
            <summary>
            Soft edge properties for the connecting line for bar-of-pie or pie-of-pie charts.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLAxisDataSourceType">
            <summary>
            For CategoryAxisData and XValues
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLSharedCellFormula">
            <summary>
            Encapsulates properties and methods for shared cell formula.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLSharedCellFormula.#ctor">
            <summary>
            Initializes an instance of SLSharedCellFormula.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLSharedCellFormula.Clone">
            <summary>
            Clone a new instance of SLSharedCellFormula.
            </summary>
            <returns>A cloned SLSharedCellFormula object.</returns>
        </member>
        <member name="P:SpreadsheetLight.SLSharedCellFormula.BaseCellRowIndex">
            <summary>
            The base row index for the shared cell formula.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSharedCellFormula.BaseCellColumnIndex">
            <summary>
            The base column index for the shared cell formula.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSharedCellFormula.SharedIndex">
            <summary>
            The shared index.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSharedCellFormula.Reference">
            <summary>
            The cell range(s) under the shared cell formula.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSharedCellFormula.FormulaText">
            <summary>
            The shared cell formula text.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Drawing.SLFill">
            <summary>
            Encapsulates properties and methods for specifying fill effects.
            This simulates the DocumentFormat.OpenXml.Drawing.Fill class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFill.SetAutomaticFill">
            <summary>
            Set the fill to automatic.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFill.SetNoFill">
            <summary>
            Set no fill.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFill.SetSolidFill(System.Drawing.Color,System.Decimal)">
            <summary>
            Set a solid fill.
            </summary>
            <param name="FillColor">The color used.</param>
            <param name="Transparency">Transparency of the color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFill.SetSolidFill(SpreadsheetLight.SLThemeColorIndexValues,System.Double,System.Decimal)">
            <summary>
            Set a solid fill.
            </summary>
            <param name="FillColor">The theme color used.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="Transparency">Transparency of the color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFill.SetLinearGradient(SpreadsheetLight.Drawing.SLGradientPresetValues,System.Decimal)">
            <summary>
            Set a linear gradient given a preset setting.
            </summary>
            <param name="Preset">The preset to be used.</param>
            <param name="Angle">The interpolation angle ranging from 0 degrees to 359.9 degrees. 0 degrees mean from left to right, 90 degrees mean from top to bottom, 180 degrees mean from right to left and 270 degrees mean from bottom to top. Accurate to 1/60000 of a degree.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFill.SetRadialGradient(SpreadsheetLight.Drawing.SLGradientPresetValues,SpreadsheetLight.Drawing.SLGradientDirectionValues)">
            <summary>
            Set a radial gradient given a preset setting.
            </summary>
            <param name="Preset">The preset to be used.</param>
            <param name="Direction">The radial gradient direction.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFill.SetRectangularGradient(SpreadsheetLight.Drawing.SLGradientPresetValues,SpreadsheetLight.Drawing.SLGradientDirectionValues)">
            <summary>
            Set a rectangular gradient given a preset setting.
            </summary>
            <param name="Preset">The preset to be used.</param>
            <param name="Direction">The rectangular gradient direction.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFill.SetPathGradient(SpreadsheetLight.Drawing.SLGradientPresetValues)">
            <summary>
            Set a path gradient given a preset setting.
            </summary>
            <param name="Preset">The preset to be used.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFill.AppendGradientStop(System.Drawing.Color,System.Decimal,System.Decimal)">
            <summary>
            Append a gradient stop given a color, the color's transparency and the position of gradient stop.
            </summary>
            <param name="Color">The color to be used.</param>
            <param name="Transparency">Transparency of the color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
            <param name="Position">The position in percentage ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFill.AppendGradientStop(SpreadsheetLight.SLThemeColorIndexValues,System.Double,System.Decimal,System.Decimal)">
            <summary>
            Append a gradient stop given a color, the color's transparency and the position of gradient stop.
            </summary>
            <param name="Color">The theme color to be used.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="Transparency">Transparency of the color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
            <param name="Position">The position in percentage ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFill.ClearGradientStops">
            <summary>
            Clear all gradient stops.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFill.SetPictureFill(System.String,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Set a picture fill. This stretches the picture.
            </summary>
            <param name="PictureFileName">The file name of the image/picture used.</param>
            <param name="LeftOffset">The left offset in percentage. A suggested range is -100% to 100%. Accurate to 1/1000 of a percent.</param>
            <param name="RightOffset">The right offset in percentage. A suggested range is -100% to 100%. Accurate to 1/1000 of a percent.</param>
            <param name="TopOffset">The top offset in percentage. A suggested range is -100% to 100%. Accurate to 1/1000 of a percent.</param>
            <param name="BottomOffset">The bottom offset in percentage. A suggested range is -100% to 100%. Accurate to 1/1000 of a percent.</param>
            <param name="Transparency">Transparency of the picture ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFill.SetPictureFill(System.String,System.Decimal,System.Decimal,System.Decimal,System.Decimal,DocumentFormat.OpenXml.Drawing.RectangleAlignmentValues,DocumentFormat.OpenXml.Drawing.TileFlipValues,System.Decimal)">
            <summary>
            Set a picture fill. This tiles the picture.
            </summary>
            <param name="PictureFileName">The file name of the image/picture used.</param>
            <param name="OffsetX">Horizontal offset ranging from -2147483648 pt to 2147483647 pt. However a suggested range is -1585pt to 1584pt. Accurate to 1/12700 of a point.</param>
            <param name="OffsetY">Vertical offset ranging from -2147483648 pt to 2147483647 pt. However a suggested range is -1585pt to 1584pt. Accurate to 1/12700 of a point.</param>
            <param name="ScaleX">Horizontal scale in percentage. A suggested range is 0% to 100%.</param>
            <param name="ScaleY">Vertical scale in percentage. A suggested range is 0% to 100%.</param>
            <param name="Alignment">Picture alignment.</param>
            <param name="MirrorType">Picture mirror type.</param>
            <param name="Transparency">Transparency of the picture ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFill.SetPatternFill(DocumentFormat.OpenXml.Drawing.PresetPatternValues,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Set a pattern fill with a preset pattern, foreground color and background color.
            </summary>
            <param name="PresetPattern">A preset fill pattern.</param>
            <param name="ForegroundColor">The color to be used for the foreground.</param>
            <param name="BackgroundColor">The color to be used for the background.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFill.SetPatternFill(DocumentFormat.OpenXml.Drawing.PresetPatternValues,System.Drawing.Color,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set a pattern fill with a preset pattern, foreground color and background color.
            </summary>
            <param name="PresetPattern">A preset fill pattern.</param>
            <param name="ForegroundColor">The color to be used for the foreground.</param>
            <param name="BackgroundColorTheme">The theme color to be used for the background.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFill.SetPatternFill(DocumentFormat.OpenXml.Drawing.PresetPatternValues,System.Drawing.Color,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set a pattern fill with a preset pattern, foreground color and background color.
            </summary>
            <param name="PresetPattern">A preset fill pattern.</param>
            <param name="ForegroundColor">The color to be used for the foreground.</param>
            <param name="BackgroundColorTheme">The theme color to be used for the background.</param>
            <param name="BackgroundColorTint">The tint applied to the background theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFill.SetPatternFill(DocumentFormat.OpenXml.Drawing.PresetPatternValues,SpreadsheetLight.SLThemeColorIndexValues,System.Drawing.Color)">
            <summary>
            Set a pattern fill with a preset pattern, foreground color and background color.
            </summary>
            <param name="PresetPattern">A preset fill pattern.</param>
            <param name="ForegroundColorTheme">The theme color to be used for the foreground.</param>
            <param name="BackgroundColor">The color to be used for the background.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFill.SetPatternFill(DocumentFormat.OpenXml.Drawing.PresetPatternValues,SpreadsheetLight.SLThemeColorIndexValues,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set a pattern fill with a preset pattern, foreground color and background color.
            </summary>
            <param name="PresetPattern">A preset fill pattern.</param>
            <param name="ForegroundColorTheme">The theme color to be used for the foreground.</param>
            <param name="BackgroundColorTheme">The theme color to be used for the background.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFill.SetPatternFill(DocumentFormat.OpenXml.Drawing.PresetPatternValues,SpreadsheetLight.SLThemeColorIndexValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set a pattern fill with a preset pattern, foreground color and background color.
            </summary>
            <param name="PresetPattern">A preset fill pattern.</param>
            <param name="ForegroundColorTheme">The theme color to be used for the foreground.</param>
            <param name="BackgroundColorTheme">The theme color to be used for the background.</param>
            <param name="BackgroundColorTint">The tint applied to the background theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFill.SetPatternFill(DocumentFormat.OpenXml.Drawing.PresetPatternValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double,System.Drawing.Color)">
            <summary>
            Set a pattern fill with a preset pattern, foreground color and background color.
            </summary>
            <param name="PresetPattern">A preset fill pattern.</param>
            <param name="ForegroundColorTheme">The theme color to be used for the foreground.</param>
            <param name="ForegroundColorTint">The tint applied to the foreground theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="BackgroundColor">The color to be used for the background.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFill.SetPatternFill(DocumentFormat.OpenXml.Drawing.PresetPatternValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set a pattern fill with a preset pattern, foreground color and background color.
            </summary>
            <param name="PresetPattern">A preset fill pattern.</param>
            <param name="ForegroundColorTheme">The theme color to be used for the foreground.</param>
            <param name="ForegroundColorTint">The tint applied to the foreground theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="BackgroundColorTheme">The theme color to be used for the background.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFill.SetPatternFill(DocumentFormat.OpenXml.Drawing.PresetPatternValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set a pattern fill with a preset pattern, foreground color and background color.
            </summary>
            <param name="PresetPattern">A preset fill pattern.</param>
            <param name="ForegroundColorTheme">The theme color to be used for the foreground.</param>
            <param name="ForegroundColorTint">The tint applied to the foreground theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="BackgroundColorTheme">The theme color to be used for the background.</param>
            <param name="BackgroundColorTint">The tint applied to the background theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLHighLowLines">
            <summary>
            Encapsulates properties and methods for high-low lines.
            This simulates the DocumentFormat.OpenXml.Drawing.Charts.HighLowLines class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLHighLowLines.ClearShapeProperties">
            <summary>
            Clear all styling shape properties. Use this if you want to start styling from a clean slate.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLHighLowLines.Line">
            <summary>
            Line properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLHighLowLines.Shadow">
            <summary>
            Shadow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLHighLowLines.Glow">
            <summary>
            Glow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLHighLowLines.SoftEdge">
            <summary>
            Soft edge properties.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLAreaChartOptions">
            <summary>
            Chart customization options for area charts.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLAreaChartOptions.#ctor">
            <summary>
            Initializes an instance of SLAreaChartOptions. It is recommended to use SLChart.CreateAreaChartOptions().
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLAreaChartOptions.Clone">
            <summary>
            Clone a new instance of SLAreaChartOptions.
            </summary>
            <returns>An SLAreaChartOptions object.</returns>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLAreaChartOptions.HasDropLines">
            <summary>
            Indicates if the area chart has drop lines.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLAreaChartOptions.DropLines">
            <summary>
            Drop lines properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLAreaChartOptions.GapDepth">
            <summary>
            The gap depth between area clusters (between different data series) as a percentage of width, ranging between 0% and 500% (both inclusive). The default is 150%. This is only used for 3D chart version.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLNamedCellStyleValues">
            <summary>
            Specifies the named cell style to be used.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Bad">
            <summary>
            Bad
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Good">
            <summary>
            Good
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Neutral">
            <summary>
            Neutral
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Calculation">
            <summary>
            Calculation
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.CheckCell">
            <summary>
            Check Cell
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.ExplanatoryText">
            <summary>
            Explanatory Text
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Input">
            <summary>
            Input
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.LinkedCell">
            <summary>
            Linked Cell
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Note">
            <summary>
            Note
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Output">
            <summary>
            Output
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.WarningText">
            <summary>
            Warning Text
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Heading1">
            <summary>
            Level 1 heading
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Heading2">
            <summary>
            Level 2 heading
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Heading3">
            <summary>
            Level 3 heading
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Heading4">
            <summary>
            Level 4 heading
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Total">
            <summary>
            Total
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Accent1">
            <summary>
            Background color is Accent1 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Accent1Percentage20">
            <summary>
            Background color is 20% of Accent1 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Accent1Percentage40">
            <summary>
            Background color is 40% of Accent1 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Accent1Percentage60">
            <summary>
            Background color is 60% of Accent1 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Accent2">
            <summary>
            Background color is Accent2 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Accent2Percentage20">
            <summary>
            Background color is 20% of Accent2 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Accent2Percentage40">
            <summary>
            Background color is 40% of Accent2 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Accent2Percentage60">
            <summary>
            Background color is 60% of Accent2 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Accent3">
            <summary>
            Background color is Accent3 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Accent3Percentage20">
            <summary>
            Background color is 20% of Accent3 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Accent3Percentage40">
            <summary>
            Background color is 40% of Accent3 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Accent3Percentage60">
            <summary>
            Background color is 60% of Accent3 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Accent4">
            <summary>
            Background color is Accent4 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Accent4Percentage20">
            <summary>
            Background color is 20% of Accent4 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Accent4Percentage40">
            <summary>
            Background color is 40% of Accent4 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Accent4Percentage60">
            <summary>
            Background color is 60% of Accent4 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Accent5">
            <summary>
            Background color is Accent5 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Accent5Percentage20">
            <summary>
            Background color is 20% of Accent5 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Accent5Percentage40">
            <summary>
            Background color is 40% of Accent5 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Accent5Percentage60">
            <summary>
            Background color is 60% of Accent5 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Accent6">
            <summary>
            Background color is Accent6 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Accent6Percentage20">
            <summary>
            Background color is 20% of Accent6 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Accent6Percentage40">
            <summary>
            Background color is 40% of Accent6 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Accent6Percentage60">
            <summary>
            Background color is 60% of Accent6 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Comma">
            <summary>
            Formats numerical data with a comma as the thousands separator.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Comma0">
            <summary>
            Formats numerical data with a comma as the thousands separator, truncating decimal values.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Currency">
            <summary>
            Formats numerical data with a comma as the thousands separator, with $ on the left of the data.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Currency0">
            <summary>
            Formats numerical data with a comma as the thousands separator, with $ on the left of the data, and truncating decimal values.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLNamedCellStyleValues.Percentage">
            <summary>
            Appends % on the end of the numerical data, and truncating decimal values.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLStyle">
            <summary>
            Encapsulates properties and methods for setting various formatting styles.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.#ctor">
            <summary>
            Initializes an instance of SLStyle. It is recommended to use CreateStyle() of the SLDocument class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetFont(System.String,System.Double)">
            <summary>
            Set the font, given a font name and font size.
            </summary>
            <param name="FontName">The name of the font to be used.</param>
            <param name="FontSize">The size of the font in points.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetFont(DocumentFormat.OpenXml.Spreadsheet.FontSchemeValues,System.Double)">
            <summary>
            Set the font, given a font scheme and font size.
            </summary>
            <param name="FontScheme">The font scheme. If None is given, the current theme's minor font will be used (but if the theme is changed, the text remains as of the old theme's minor font instead of the new theme's minor font).</param>
            <param name="FontSize">The size of the font in points.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetFontColor(System.Drawing.Color)">
            <summary>
            Set the font color.
            </summary>
            <param name="FontColor">The color of the font text.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetFontColor(SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set the font color with one of the theme colors.
            </summary>
            <param name="ThemeColorIndex">The theme color to be used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetFontColor(SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set the font color with one of the theme colors, modifying the theme color with a tint value.
            </summary>
            <param name="ThemeColorIndex">The theme color to be used.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetFontBold(System.Boolean)">
            <summary>
            Toggle bold settings.
            </summary>
            <param name="IsBold">True to set font as bold. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetFontItalic(System.Boolean)">
            <summary>
            Toggle italic settings.
            </summary>
            <param name="IsItalic">True to set font as italic. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetFontUnderline(DocumentFormat.OpenXml.Spreadsheet.UnderlineValues)">
            <summary>
            Set font underline.
            </summary>
            <param name="FontUnderline">Specifies the underline formatting style of the font text.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetPatternFill(DocumentFormat.OpenXml.Spreadsheet.PatternValues,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Set the pattern type, foreground color and background color of the fill pattern.
            </summary>
            <param name="PatternType">The pattern type. Default value is None.</param>
            <param name="ForegroundColor">The color to be used for the foreground.</param>
            <param name="BackgroundColor">The color to be used for the background.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetPatternFill(DocumentFormat.OpenXml.Spreadsheet.PatternValues,System.Drawing.Color,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set the pattern type, foreground color and background color of the fill pattern.
            </summary>
            <param name="PatternType">The pattern type. Default value is None.</param>
            <param name="ForegroundColor">The color to be used for the foreground.</param>
            <param name="BackgroundColorTheme">The theme color to be used for the background.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetPatternFill(DocumentFormat.OpenXml.Spreadsheet.PatternValues,System.Drawing.Color,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set the pattern type, foreground color and background color of the fill pattern.
            </summary>
            <param name="PatternType">The pattern type. Default value is None.</param>
            <param name="ForegroundColor">The color to be used for the foreground.</param>
            <param name="BackgroundColorTheme">The theme color to be used for the background.</param>
            <param name="BackgroundColorTint">The tint applied to the background theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetPatternFill(DocumentFormat.OpenXml.Spreadsheet.PatternValues,SpreadsheetLight.SLThemeColorIndexValues,System.Drawing.Color)">
            <summary>
            Set the pattern type, foreground color and background color of the fill pattern.
            </summary>
            <param name="PatternType">The pattern type. Default value is None.</param>
            <param name="ForegroundColorTheme">The theme color to be used for the foreground.</param>
            <param name="BackgroundColor">The color to be used for the background.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetPatternFill(DocumentFormat.OpenXml.Spreadsheet.PatternValues,SpreadsheetLight.SLThemeColorIndexValues,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set the pattern type, foreground color and background color of the fill pattern.
            </summary>
            <param name="PatternType">The pattern type. Default value is None.</param>
            <param name="ForegroundColorTheme">The theme color to be used for the foreground.</param>
            <param name="BackgroundColorTheme">The theme color to be used for the background.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetPatternFill(DocumentFormat.OpenXml.Spreadsheet.PatternValues,SpreadsheetLight.SLThemeColorIndexValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set the pattern type, foreground color and background color of the fill pattern.
            </summary>
            <param name="PatternType">The pattern type. Default value is None.</param>
            <param name="ForegroundColorTheme">The theme color to be used for the foreground.</param>
            <param name="BackgroundColorTheme">The theme color to be used for the background.</param>
            <param name="BackgroundColorTint">The tint applied to the background theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetPatternFill(DocumentFormat.OpenXml.Spreadsheet.PatternValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double,System.Drawing.Color)">
            <summary>
            Set the pattern type, foreground color and background color of the fill pattern.
            </summary>
            <param name="PatternType">The pattern type. Default value is None.</param>
            <param name="ForegroundColorTheme">The theme color to be used for the foreground.</param>
            <param name="ForegroundColorTint">The tint applied to the foreground theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="BackgroundColor">The color to be used for the background.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetPatternFill(DocumentFormat.OpenXml.Spreadsheet.PatternValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set the pattern type, foreground color and background color of the fill pattern.
            </summary>
            <param name="PatternType">The pattern type. Default value is None.</param>
            <param name="ForegroundColorTheme">The theme color to be used for the foreground.</param>
            <param name="ForegroundColorTint">The tint applied to the foreground theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="BackgroundColorTheme">The theme color to be used for the background.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetPatternFill(DocumentFormat.OpenXml.Spreadsheet.PatternValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set the pattern type, foreground color and background color of the fill pattern.
            </summary>
            <param name="PatternType">The pattern type. Default value is None.</param>
            <param name="ForegroundColorTheme">The theme color to be used for the foreground.</param>
            <param name="ForegroundColorTint">The tint applied to the foreground theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="BackgroundColorTheme">The theme color to be used for the background.</param>
            <param name="BackgroundColorTint">The tint applied to the background theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetGradientFill(SpreadsheetLight.SLGradientShadingStyleValues,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Set a gradient fill given the shading style and 2 colors.
            </summary>
            <param name="ShadingStyle">The gradient shading style.</param>
            <param name="Color1">The first color.</param>
            <param name="Color2">The second color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetGradientFill(SpreadsheetLight.SLGradientShadingStyleValues,System.Drawing.Color,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set a gradient fill given the shading style and 2 colors.
            </summary>
            <param name="ShadingStyle">The gradient shading style.</param>
            <param name="Color1">The first color.</param>
            <param name="Color2Theme">The second color as one of the theme colors.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetGradientFill(SpreadsheetLight.SLGradientShadingStyleValues,System.Drawing.Color,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set a gradient fill given the shading style and 2 colors.
            </summary>
            <param name="ShadingStyle">The gradient shading style.</param>
            <param name="Color1">The first color.</param>
            <param name="Color2Theme">The second color as one of the theme colors.</param>
            <param name="Color2Tint">The tint applied to the second theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetGradientFill(SpreadsheetLight.SLGradientShadingStyleValues,SpreadsheetLight.SLThemeColorIndexValues,System.Drawing.Color)">
            <summary>
            Set a gradient fill given the shading style and 2 colors.
            </summary>
            <param name="ShadingStyle">The gradient shading style.</param>
            <param name="Color1Theme">The first color as one of the theme colors.</param>
            <param name="Color2">The second color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetGradientFill(SpreadsheetLight.SLGradientShadingStyleValues,SpreadsheetLight.SLThemeColorIndexValues,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set a gradient fill given the shading style and 2 colors.
            </summary>
            <param name="ShadingStyle">The gradient shading style.</param>
            <param name="Color1Theme">The first color as one of the theme colors.</param>
            <param name="Color2Theme">The second color as one of the theme colors.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetGradientFill(SpreadsheetLight.SLGradientShadingStyleValues,SpreadsheetLight.SLThemeColorIndexValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set a gradient fill given the shading style and 2 colors.
            </summary>
            <param name="ShadingStyle">The gradient shading style.</param>
            <param name="Color1Theme">The first color as one of the theme colors.</param>
            <param name="Color2Theme">The second color as one of the theme colors.</param>
            <param name="Color2Tint">The tint applied to the second theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetGradientFill(SpreadsheetLight.SLGradientShadingStyleValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double,System.Drawing.Color)">
            <summary>
            Set a gradient fill given the shading style and 2 colors.
            </summary>
            <param name="ShadingStyle">The gradient shading style.</param>
            <param name="Color1Theme">The first color as one of the theme colors.</param>
            <param name="Color1Tint">The tint applied to the first theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="Color2">The second color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetGradientFill(SpreadsheetLight.SLGradientShadingStyleValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set a gradient fill given the shading style and 2 colors.
            </summary>
            <param name="ShadingStyle">The gradient shading style.</param>
            <param name="Color1Theme">The first color as one of the theme colors.</param>
            <param name="Color1Tint">The tint applied to the first theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="Color2Theme">The second color as one of the theme colors.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetGradientFill(SpreadsheetLight.SLGradientShadingStyleValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set a gradient fill given the shading style and 2 colors.
            </summary>
            <param name="ShadingStyle">The gradient shading style.</param>
            <param name="Color1Theme">The first color as one of the theme colors.</param>
            <param name="Color1Tint">The tint applied to the first theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="Color2Theme">The second color as one of the theme colors.</param>
            <param name="Color2Tint">The tint applied to the second theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetLeftBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,System.Drawing.Color)">
            <summary>
            Set the left border with a border style and a color.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The border color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetLeftBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set the left border with a border style and a theme color.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The theme color to be used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetLeftBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set the left border with a border style and a theme color, modifying the theme color with a tint value.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The theme color to be used.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetRightBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,System.Drawing.Color)">
            <summary>
            Set the right border with a border style and a color.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The border color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetRightBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set the right border with a border style and a theme color.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The theme color to be used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetRightBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set the right border with a border style and a theme color, modifying the theme color with a tint value.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The theme color to be used.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetTopBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,System.Drawing.Color)">
            <summary>
            Set the top border with a border style and a color.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The border color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetTopBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set the top border with a border style and a theme color.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The theme color to be used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetTopBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set the top border with a border style and a theme color, modifying the theme color with a tint value.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The theme color to be used.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetBottomBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,System.Drawing.Color)">
            <summary>
            Set the bottom border with a border style and a color.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The border color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetBottomBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set the bottom border with a border style and a theme color.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The theme color to be used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetBottomBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set the bottom border with a border style and a theme color, modifying the theme color with a tint value.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The theme color to be used.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetDiagonalBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,System.Drawing.Color)">
            <summary>
            Set the diagonal border with a border style and a color.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The border color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetDiagonalBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set the diagonal border with a border style and a theme color.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The theme color to be used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetDiagonalBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set the diagonal border with a border style and a theme color, modifying the theme color with a tint value.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The theme color to be used.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetVerticalBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,System.Drawing.Color)">
            <summary>
            Set the vertical border with a border style and a color.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The border color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetVerticalBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set the vertical border with a border style and a theme color.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The theme color to be used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetVerticalBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set the vertical border with a border style and a theme color, modifying the theme color with a tint value.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The theme color to be used.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetHorizontalBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,System.Drawing.Color)">
            <summary>
            Set the horizontal border with a border style and a color.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The border color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetHorizontalBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set the horizontal border with a border style and a theme color.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The theme color to be used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetHorizontalBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set the horizontal border with a border style and a theme color, modifying the theme color with a tint value.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The theme color to be used.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetVerticalAlignment(DocumentFormat.OpenXml.Spreadsheet.VerticalAlignmentValues)">
            <summary>
            Align text vertically.
            </summary>
            <param name="VerticalAlignment">Specifies the vertical alignment. Default value is Bottom.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetHorizontalAlignment(DocumentFormat.OpenXml.Spreadsheet.HorizontalAlignmentValues)">
            <summary>
            Align text horizontally.
            </summary>
            <param name="HorizontalAlignment">Specifies the horizontal alignment. Default value is General.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.SetWrapText(System.Boolean)">
            <summary>
            Toggle wrap text settings.
            </summary>
            <param name="IsWrapped">True to wrap text. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.ApplyNamedCellStyle(SpreadsheetLight.SLNamedCellStyleValues)">
            <summary>
            Apply a named cell style. Existing styles are kept, unless the chosen named cell style overrides those styles.
            </summary>
            <param name="NamedCellStyle">The named cell style to be applied.</param>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.RemoveAlignment">
            <summary>
            Remove any existing alignment properties.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.RemoveProtection">
            <summary>
            Remove any existing protection properties.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.RemoveFormatCode">
            <summary>
            Remove any existing format code.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.RemoveFont">
            <summary>
            Remove any existing font properties.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.RemoveFill">
            <summary>
            Remove any existing fill properties.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.RemoveBorder">
            <summary>
            Remove any existing border properties.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.ToCellFormat">
            <summary>
            IMPORTANT! Fill the indices for numbering format, font, fill and border!
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetLight.SLStyle.Clone">
            <summary>
            Clone a new instance of SLStyle with identical style settings.
            </summary>
            <returns>An SLStyle object with identical style settings.</returns>
        </member>
        <member name="P:SpreadsheetLight.SLStyle.Alignment">
            <summary>
            Specifies the alignment properties for this style.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLStyle.Protection">
            <summary>
            Specifies the protection properties for this style.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLStyle.FormatCode">
            <summary>
            Specifies the (number) format code for this style. Note that the format has to be in invariant-culture mode. So "#,##0.000" is accepted but "#.##0,000" isn't. For cultures with a period as the thousands separator and a comma for the decimal digit separator... sorry.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLStyle.Font">
            <summary>
            Specifies the font properties for this style.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLStyle.Fill">
            <summary>
            Specifies the fill properties for this style.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLStyle.Border">
            <summary>
            Specifies the border properties for this style.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLStyle.QuotePrefix">
            <summary>
            Specifies if the cell content text should be prefixed with a single quotation mark.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLStyle.PivotButton">
            <summary>
            Specifies if a pivot table dropdown button should be displayed.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLPlotArea">
            <summary>
            Encapsulates properties and methods for setting plot areas in charts.
            This simulates the DocumentFormat.OpenXml.Drawing.Charts.PlotArea class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLPlotArea.ClearShapeProperties">
            <summary>
            Clear all styling shape properties. Use this if you want to start styling from a clean slate.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLPlotArea.Fill">
            <summary>
            Fill properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLPlotArea.Border">
            <summary>
            Border properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLPlotArea.Shadow">
            <summary>
            Shadow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLPlotArea.Glow">
            <summary>
            Glow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLPlotArea.SoftEdge">
            <summary>
            Soft edge properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLPlotArea.Format3D">
            <summary>
            3D format properties.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLSparklineStyle">
            <summary>
            Built-in sparkline styles.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSparklineStyle.Accent1Darker50Percent">
            <summary>
            Accent 1 Darker 50%
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSparklineStyle.Accent2Darker50Percent">
            <summary>
            Accent 2 Darker 50%
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSparklineStyle.Accent3Darker50Percent">
            <summary>
            Accent 3 Darker 50%
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSparklineStyle.Accent4Darker50Percent">
            <summary>
            Accent 4 Darker 50%
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSparklineStyle.Accent5Darker50Percent">
            <summary>
            Accent 5 Darker 50%
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSparklineStyle.Accent6Darker50Percent">
            <summary>
            Accent 6 Darker 50%
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSparklineStyle.Accent1Darker25Percent">
            <summary>
            Accent 1 Darker 25%
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSparklineStyle.Accent2Darker25Percent">
            <summary>
            Accent 2 Darker 25%
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSparklineStyle.Accent3Darker25Percent">
            <summary>
            Accent 3 Darker 25%
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSparklineStyle.Accent4Darker25Percent">
            <summary>
            Accent 4 Darker 25%
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSparklineStyle.Accent5Darker25Percent">
            <summary>
            Accent 5 Darker 25%
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSparklineStyle.Accent6Darker25Percent">
            <summary>
            Accent 6 Darker 25%
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSparklineStyle.Accent1">
            <summary>
            Accent 1
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSparklineStyle.Accent2">
            <summary>
            Accent 2
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSparklineStyle.Accent3">
            <summary>
            Accent 3
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSparklineStyle.Accent4">
            <summary>
            Accent 4
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSparklineStyle.Accent5">
            <summary>
            Accent 5
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSparklineStyle.Accent6">
            <summary>
            Accent 6
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSparklineStyle.Accent1Lighter40Percent">
            <summary>
            Accent 1 Lighter 40%
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSparklineStyle.Accent2Lighter40Percent">
            <summary>
            Accent 2 Lighter 40%
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSparklineStyle.Accent3Lighter40Percent">
            <summary>
            Accent 3 Lighter 40%
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSparklineStyle.Accent4Lighter40Percent">
            <summary>
            Accent 4 Lighter 40%
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSparklineStyle.Accent5Lighter40Percent">
            <summary>
            Accent 5 Lighter 40%
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSparklineStyle.Accent6Lighter40Percent">
            <summary>
            Accent 6 Lighter 40%
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSparklineStyle.Dark1">
            <summary>
            Dark #1
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSparklineStyle.Dark2">
            <summary>
            Dark #2
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSparklineStyle.Dark3">
            <summary>
            Dark #3
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSparklineStyle.Dark4">
            <summary>
            Dark #4
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSparklineStyle.Dark5">
            <summary>
            Dark #5
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSparklineStyle.Dark6">
            <summary>
            Dark #6
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSparklineStyle.Colorful1">
            <summary>
            Colorful #1
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSparklineStyle.Colorful2">
            <summary>
            Colorful #2
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSparklineStyle.Colorful3">
            <summary>
            Colorful #3
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSparklineStyle.Colorful4">
            <summary>
            Colorful #4
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSparklineStyle.Colorful5">
            <summary>
            Colorful #5
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLSparklineStyle.Colorful6">
            <summary>
            Colorful #6
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLSparklineGroup">
            <summary>
            Encapsulates properties and methods for specifying sparklines.
            This simulates the DocumentFormat.OpenXml.Office2010.Excel.SparklineGroup class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLSparklineGroup.SetLocation(System.String)">
            <summary>
            Set the location of the sparkline group given a cell reference. Use this if your data source is either 1 row of cells or 1 column of cells.
            </summary>
            <param name="CellReference">The cell reference such as "A1".</param>
        </member>
        <member name="M:SpreadsheetLight.SLSparklineGroup.SetLocation(System.String,System.String)">
            <summary>
            Set the location of the sparkline group given cell references of opposite cells in a cell range.
            Note that the cell range has to be a 1-dimensional vector, meaning it's either a single row or single column.
            Note also that the length of the vector must be equal to either the number of rows or number of columns in the data source range.
            </summary>
            <param name="StartCellReference">The cell reference of the start cell of the location cell range, such as "A1". This is either the top-most or left-most cell.</param>
            <param name="EndCellReference">The cell reference of the end cell of the location cell range, such as "A1". This is either the bottom-most or right-most cell.</param>
        </member>
        <member name="M:SpreadsheetLight.SLSparklineGroup.SetLocation(System.String,System.String,System.Boolean)">
            <summary>
            Set the location of the sparkline group given cell references of opposite cells in a cell range.
            Note that the cell range has to be a 1-dimensional vector, meaning it's either a single row or single column.
            Note also that the length of the vector must be equal to either the number of rows or number of columns in the data source range.
            </summary>
            <param name="StartCellReference">The cell reference of the start cell of the location cell range, such as "A1". This is either the top-most or left-most cell.</param>
            <param name="EndCellReference">The cell reference of the end cell of the location cell range, such as "A1". This is either the bottom-most or right-most cell.</param>
            <param name="RowsAsDataSeries">True if the data source has its series in rows. False if it's in columns. This only comes into play if the data source has the same number of rows as its columns.</param>
        </member>
        <member name="M:SpreadsheetLight.SLSparklineGroup.SetLocation(System.Int32,System.Int32)">
            <summary>
            Set the location of the sparkline group given a row and column index. Use this if your data source is either 1 row of cells or 1 column of cells.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
        </member>
        <member name="M:SpreadsheetLight.SLSparklineGroup.SetLocation(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the location of the sparkline group given row and column indices of opposite cells in a cell range.
            Note that the cell range has to be a 1-dimensional vector, meaning it's either a single row or single column.
            Note also that the length of the vector must be equal to either the number of rows or number of columns in the data source range.
            </summary>
            <param name="StartRowIndex">The row index of the start row. This is typically the top row.</param>
            <param name="StartColumnIndex">The column index of the start column. This is typically the left-most column.</param>
            <param name="EndRowIndex">The row index of the end row. This is typically the bottom row.</param>
            <param name="EndColumnIndex">The column index of the end column. This is typically the right-most column.</param>
        </member>
        <member name="M:SpreadsheetLight.SLSparklineGroup.SetLocation(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Set the location of the sparkline group given row and column indices of opposite cells in a cell range.
            Note that the cell range has to be a 1-dimensional vector, meaning it's either a single row or single column.
            Note also that the length of the vector must be equal to either the number of rows or number of columns in the data source range.
            </summary>
            <param name="StartRowIndex">The row index of the start row. This is typically the top row.</param>
            <param name="StartColumnIndex">The column index of the start column. This is typically the left-most column.</param>
            <param name="EndRowIndex">The row index of the end row. This is typically the bottom row.</param>
            <param name="EndColumnIndex">The column index of the end column. This is typically the right-most column.</param>
            <param name="RowsAsDataSeries">True if the data source has its series in rows. False if it's in columns. This only comes into play if the data source has the same number of rows as its columns.</param>
        </member>
        <member name="M:SpreadsheetLight.SLSparklineGroup.SetGeneralAxis">
            <summary>
            Set the horizontal axis as general axis type.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLSparklineGroup.SetDateAxis(System.String,System.String)">
            <summary>
            Set the horizontal axis as date axis type, given a cell range containing the date values.
            Note that this means the cell range is a 1-dimensional vector, meaning it's a single row or single column.
            Note also that this probably means the length of the vector is the same as your location cell range.
            </summary>
            <param name="StartCellReference">The cell reference of the start cell of the date cell range, such as "A1". This is either the top-most or left-most cell.</param>
            <param name="EndCellReference">The cell reference of the end cell of the date cell range, such as "A1". This is either the bottom-most or right-most cell.</param>
        </member>
        <member name="M:SpreadsheetLight.SLSparklineGroup.SetDateAxis(System.String,System.String,System.String)">
            <summary>
            Set the horizontal axis as date axis type, given a worksheet name and a cell range containing the date values.
            Note that this means the cell range is a 1-dimensional vector, meaning it's a single row or single column.
            Note also that this probably means the length of the vector is the same as your location cell range.
            </summary>
            <param name="WorksheetName">The name of the source worksheet.</param>
            <param name="StartCellReference">The cell reference of the start cell of the date cell range, such as "A1". This is either the top-most or left-most cell.</param>
            <param name="EndCellReference">The cell reference of the end cell of the date cell range, such as "A1". This is either the bottom-most or right-most cell.</param>
        </member>
        <member name="M:SpreadsheetLight.SLSparklineGroup.SetDateAxis(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the horizontal axis as date axis type, given row and column indices of opposite cells in a cell range containing the date values.
            Note that this means the cell range is a 1-dimensional vector, meaning it's a single row or single column.
            Note also that this probably means the length of the vector is the same as your location cell range.
            </summary>
            <param name="StartRowIndex">The row index of the start row. This is typically the top row.</param>
            <param name="StartColumnIndex">The column index of the start column. This is typically the left-most column.</param>
            <param name="EndRowIndex">The row index of the end row. This is typically the bottom row.</param>
            <param name="EndColumnIndex">The column index of the end column. This is typically the right-most column.</param>
        </member>
        <member name="M:SpreadsheetLight.SLSparklineGroup.SetDateAxis(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the horizontal axis as date axis type, given a worksheet name, and row and column indices of opposite cells in a cell range containing the date values.
            Note that this means the cell range is a 1-dimensional vector, meaning it's a single row or single column.
            Note also that this probably means the length of the vector is the same as your location cell range.
            </summary>
            <param name="WorksheetName">The name of the source worksheet.</param>
            <param name="StartRowIndex">The row index of the start row. This is typically the top row.</param>
            <param name="StartColumnIndex">The column index of the start column. This is typically the left-most column.</param>
            <param name="EndRowIndex">The row index of the end row. This is typically the bottom row.</param>
            <param name="EndColumnIndex">The column index of the end column. This is typically the right-most column.</param>
        </member>
        <member name="M:SpreadsheetLight.SLSparklineGroup.SetAutomaticMinimumValue">
            <summary>
            Set automatic minimum value for the vertical axis for the entire sparkline group.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLSparklineGroup.SetSameMinimumValue">
            <summary>
            Set the same minimum value for the vertical axis for the entire sparkline group.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLSparklineGroup.SetCustomMinimumValue(System.Double)">
            <summary>
            Set a custom minimum value for the vertical axis for the entire sparkline group.
            </summary>
            <param name="MinValue">The custom minimum value.</param>
        </member>
        <member name="M:SpreadsheetLight.SLSparklineGroup.SetAutomaticMaximumValue">
            <summary>
            Set automatic maximum value for the vertical axis for the entire sparkline group.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLSparklineGroup.SetSameMaximumValue">
            <summary>
            Set the same maximum value for the vertical axis for the entire sparkline group.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLSparklineGroup.SetCustomMaximumValue(System.Double)">
            <summary>
            Set a custom maximum value for the vertical axis for the entire sparkline group.
            </summary>
            <param name="MaxValue">The custom maximum value.</param>
        </member>
        <member name="M:SpreadsheetLight.SLSparklineGroup.SetSparklineStyle(SpreadsheetLight.SLSparklineStyle)">
            <summary>
            Set the sparkline style.
            </summary>
            <param name="Style">A built-in sparkline style.</param>
        </member>
        <member name="P:SpreadsheetLight.SLSparklineGroup.SeriesColor">
            <summary>
            The color for the main sparkline series.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSparklineGroup.NegativeColor">
            <summary>
            The color for negative points.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSparklineGroup.AxisColor">
            <summary>
            The color for the axis.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSparklineGroup.MarkersColor">
            <summary>
            The color for markers.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSparklineGroup.FirstMarkerColor">
            <summary>
            The color for the first point.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSparklineGroup.LastMarkerColor">
            <summary>
            The color for the last point.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSparklineGroup.HighMarkerColor">
            <summary>
            The color for the high point.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSparklineGroup.LowMarkerColor">
            <summary>
            The color for the low point.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSparklineGroup.LineWeight">
            <summary>
            Line weight for the sparkline group in points, ranging from 0 pt to 1584 pt (both inclusive).
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSparklineGroup.Type">
            <summary>
            The type of sparkline. Use "Stacked" for "Win/Loss".
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSparklineGroup.ShowEmptyCellsAs">
            <summary>
            The default is to show empty cells with a gap.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSparklineGroup.ShowMarkers">
            <summary>
            Specifies if markers are shown.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSparklineGroup.ShowHighPoint">
            <summary>
            Specifies if the high point is shown.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSparklineGroup.ShowLowPoint">
            <summary>
            Specifies if the low point is shown.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSparklineGroup.ShowFirstPoint">
            <summary>
            Specifies if the first point is shown.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSparklineGroup.ShowLastPoint">
            <summary>
            Specifies if the last point is shown.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSparklineGroup.ShowNegativePoints">
            <summary>
            Specifies if negative points are shown.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSparklineGroup.ShowAxis">
            <summary>
            Specifies is the horizontal axis is shown. This only appears if there's sparkline data crossing the zero point.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSparklineGroup.ShowHiddenData">
            <summary>
            Specifies if hidden data is shown.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSparklineGroup.RightToLeft">
            <summary>
            Plot data right-to-left.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLMinorGridlines">
            <summary>
            Encapsulates properties and methods for setting chart minor gridlines in charts.
            This simulates the DocumentFormat.OpenXml.Drawing.Charts.MinorGridlines class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLMinorGridlines.ClearShapeProperties">
            <summary>
            Clear all styling shape properties. Use this if you want to start styling from a clean slate.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLMinorGridlines.Line">
            <summary>
            Line properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLMinorGridlines.Shadow">
            <summary>
            Shadow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLMinorGridlines.Glow">
            <summary>
            Glow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLMinorGridlines.SoftEdge">
            <summary>
            Soft edge properties.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLBarChartOptions">
            <summary>
            Chart customization options for bar and column charts.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLBarChartOptions.#ctor">
            <summary>
            Initializes an instance of SLBarChartOptions.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLBarChartOptions.GapWidth">
            <summary>
            The gap width between bar or column clusters (in the same data series) as a percentage of bar or column width, ranging between 0% and 500% (both inclusive). The default is 150%.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLBarChartOptions.GapDepth">
            <summary>
            The gap depth between bar or columns clusters (between different data series) as a percentage of bar or column width, ranging between 0% and 500% (both inclusive). The default is 150%. This is only used for 3D chart version.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLBarChartOptions.Overlap">
            <summary>
            The amount of overlapping for bars and columns on 2D bar/column charts, ranging from -100 to 100 (both inclusive). The default is 0. For stacked and "100% stacked" bar/column charts, this should be 100.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLCellStyle">
            <summary>
            Encapsulates properties and methods for specifying cell styles. This simulates the DocumentFormat.OpenXml.Spreadsheet.CellStyle class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLCellStyle.#ctor">
            <summary>
            Initializes an instance of SLCellStyle.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLCellStyle.Name">
            <summary>
            Name of the cell style.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLCellStyle.FormatId">
            <summary>
            Specifies a zero-based index referencing a CellFormat in the CellStyleFormats class.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLCellStyle.BuiltinId">
            <summary>
            Specifies the index of a built-in cell style.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLCellStyle.OutlineLevel">
            <summary>
            Specifies that the formatting is for an outline style.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLCellStyle.Hidden">
            <summary>
            Specifies if the style is shown in the application user interface.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLCellStyle.CustomBuiltin">
            <summary>
            Specifies if the built-in cell style is customized.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLItem.ItemName">
            <summary>
            Attribute: n
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLItem.ItemType">
            <summary>
            Attribute: t
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLItem.Hidden">
            <summary>
            Attribute: h
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLItem.HasStringVlue">
            <summary>
            Attribute: s
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLItem.HideDetails">
            <summary>
            Attribute: sd
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLItem.Calculated">
            <summary>
            Attribute: f
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLItem.Missing">
            <summary>
            Attribute: m
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLItem.ChildItems">
            <summary>
            Attribute: c
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLItem.Index">
            <summary>
            Attribute: x
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLItem.Expanded">
            <summary>
            Attribute: d
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLItem.DrillAcrossAttributes">
            <summary>
            Attribute: e
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLDataTable">
            <summary>
            Encapsulates properties and methods for setting the data table of charts.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLDataTable.ClearShapeProperties">
            <summary>
            Clear all styling shape properties. Use this if you want to start styling from a clean slate.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLDataTable.SetFont(SpreadsheetLight.SLFont)">
            <summary>
            Set font settings for the contents of the data table.
            </summary>
            <param name="Font">The SLFont containing the font settings.</param>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDataTable.ShowHorizontalBorder">
            <summary>
            Specifies if horizontal table borders are shown.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDataTable.ShowVerticalBorder">
            <summary>
            Specifies if vertical table borders are shown.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDataTable.ShowOutlineBorder">
            <summary>
            Specifies if table outline borders are shown.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDataTable.ShowLegendKeys">
            <summary>
            Specifies if legend keys are shown.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDataTable.Fill">
            <summary>
            Fill properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDataTable.Border">
            <summary>
            Border properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDataTable.Shadow">
            <summary>
            Shadow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDataTable.Glow">
            <summary>
            Glow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDataTable.SoftEdge">
            <summary>
            Soft edge properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDataTable.Format3D">
            <summary>
            3D format properties.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLDataPointOptions">
            <summary>
            Encapsulates properties and methods for setting data point options for charts.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDataPointOptions.Fill">
            <summary>
            Fill properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDataPointOptions.Line">
            <summary>
            Border/Line properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDataPointOptions.Shadow">
            <summary>
            Shadow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDataPointOptions.Glow">
            <summary>
            Glow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDataPointOptions.SoftEdge">
            <summary>
            Soft edge properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDataPointOptions.Format3D">
            <summary>
            3D format properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDataPointOptions.InvertIfNegative">
            <summary>
            Invert colors if negative. If null, the effective default is used (false). This is for bar charts, column charts and bubble charts.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDataPointOptions.Marker">
            <summary>
            Marker properties. This is for line charts, radar charts and scatter charts.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDataPointOptions.Explosion">
            <summary>
            The explosion distance from the center of the pie in percentage. It is suggested to keep the range between 0% and 400%.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.EGDLblShared">
            <summary>
            This simulates the element group EG_DLblShared as specified in the Open XML specs.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.EGDLblShared.SetLabelPosition(DocumentFormat.OpenXml.Drawing.Charts.DataLabelPositionValues)">
            <summary>
            Set the position of the data label.
            </summary>
            <param name="Position">The data label position.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.EGDLblShared.SetAutoLabelPosition">
            <summary>
            Set automatic positioning of the data label.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.EGDLblShared.FormatCode">
            <summary>
            Format code. If you set a custom format code, you might also want to set SourceLinked to false.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.EGDLblShared.SourceLinked">
            <summary>
            Whether the format code is linked to the data source.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.EGDLblShared.Fill">
            <summary>
            Fill properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.EGDLblShared.Border">
            <summary>
            Border properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.EGDLblShared.Shadow">
            <summary>
            Shadow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.EGDLblShared.Glow">
            <summary>
            Glow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.EGDLblShared.SoftEdge">
            <summary>
            Soft edge properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.EGDLblShared.Format3D">
            <summary>
            3D format properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.EGDLblShared.ShowLegendKey">
            <summary>
            Specifies if the legend key is included in the label.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.EGDLblShared.ShowValue">
            <summary>
            Specifies if the label contains the value. For certain charts, this is known as the "Y Value".
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.EGDLblShared.ShowCategoryName">
            <summary>
            Specifies if the label contains the category name. For certain charts, this is known as the "X Value".
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.EGDLblShared.ShowSeriesName">
            <summary>
            Specifies if the label contains the series name.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.EGDLblShared.ShowPercentage">
            <summary>
            Specifies if the label contains the percentage. This is for pie charts.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.EGDLblShared.ShowBubbleSize">
            <summary>
            Specifies if the label contains the bubble size. This is for bubble charts.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.EGDLblShared.Separator">
            <summary>
            The separator.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Drawing.SLPicture">
            <summary>
            Encapsulates properties and methods for a picture to be inserted into a worksheet.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.#ctor(System.String)">
            <summary>
            Initializes an instance of SLPicture given the file name of a picture.
            </summary>
            <param name="PictureFileName">The file name of a picture to be inserted.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes an instance of SLPicture given the file name of a picture.
            </summary>
            <param name="PictureFileName">The file name of a picture to be inserted.</param>
            <param name="ThrowExceptionsIfAny">Set to true to bubble exceptions up if there are any occurring within SpreadsheetLight. Set to false otherwise. The default is false.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes an instance of SLPicture given the file name of a picture, and the targeted computer's horizontal and vertical resolution. This scales the picture according to how it will be displayed on the targeted computer screen.
            </summary>
            <param name="PictureFileName">The file name of a picture to be inserted.</param>
            <param name="TargetHorizontalResolution">The targeted computer's horizontal resolution (DPI).</param>
            <param name="TargetVerticalResolution">The targeted computer's vertical resolution (DPI).</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.#ctor(System.String,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes an instance of SLPicture given the file name of a picture, and the targeted computer's horizontal and vertical resolution. This scales the picture according to how it will be displayed on the targeted computer screen.
            </summary>
            <param name="PictureFileName">The file name of a picture to be inserted.</param>
            <param name="TargetHorizontalResolution">The targeted computer's horizontal resolution (DPI).</param>
            <param name="TargetVerticalResolution">The targeted computer's vertical resolution (DPI).</param>
            <param name="ThrowExceptionsIfAny">Set to true to bubble exceptions up if there are any occurring within SpreadsheetLight. Set to false otherwise. The default is false.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.#ctor(System.Byte[],DocumentFormat.OpenXml.Packaging.ImagePartType)">
            <summary>
            Initializes an instance of SLPicture given a picture's data in a byte array.
            </summary>
            <param name="PictureByteData">The picture's data in a byte array.</param>
            <param name="PictureType">The image type of the picture.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.#ctor(System.Byte[],DocumentFormat.OpenXml.Packaging.ImagePartType,System.Boolean)">
            <summary>
            Initializes an instance of SLPicture given a picture's data in a byte array.
            </summary>
            <param name="PictureByteData">The picture's data in a byte array.</param>
            <param name="PictureType">The image type of the picture.</param>
            <param name="ThrowExceptionsIfAny">Set to true to bubble exceptions up if there are any occurring within SpreadsheetLight. Set to false otherwise. The default is false.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.#ctor(System.Byte[],DocumentFormat.OpenXml.Packaging.ImagePartType,System.Single,System.Single)">
            <summary>
            Initializes an instance of SLPicture given a picture's data in a byte array, and the targeted computer's horizontal and vertical resolution. This scales the picture according to how it will be displayed on the targeted computer screen.
            </summary>
            <param name="PictureByteData">The picture's data in a byte array.</param>
            <param name="PictureType">The image type of the picture.</param>
            <param name="TargetHorizontalResolution">The targeted computer's horizontal resolution (DPI).</param>
            <param name="TargetVerticalResolution">The targeted computer's vertical resolution (DPI).</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.#ctor(System.Byte[],DocumentFormat.OpenXml.Packaging.ImagePartType,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes an instance of SLPicture given a picture's data in a byte array, and the targeted computer's horizontal and vertical resolution. This scales the picture according to how it will be displayed on the targeted computer screen.
            </summary>
            <param name="PictureByteData">The picture's data in a byte array.</param>
            <param name="PictureType">The image type of the picture.</param>
            <param name="TargetHorizontalResolution">The targeted computer's horizontal resolution (DPI).</param>
            <param name="TargetVerticalResolution">The targeted computer's vertical resolution (DPI).</param>
            <param name="ThrowExceptionsIfAny">Set to true to bubble exceptions up if there are any occurring within SpreadsheetLight. Set to false otherwise. The default is false.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.SetAbsolutePositionInPixels(System.Int32,System.Int32)">
            <summary>
            <strong>Obsolete. </strong>Set the absolute position of the picture in pixels relative to the top-left corner of the worksheet.
            Consider using the SetPosition() function instead.
            </summary>
            <param name="OffsetX">Offset from the left of the worksheet in pixels.</param>
            <param name="OffsetY">Offset from the top of the worksheet in pixels.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.SetAbsolutePositionInEMU(System.Int64,System.Int64)">
            <summary>
            <strong>Obsolete. </strong>Set the absolute position of the picture in English Metric Units (EMUs) relative to the top-left corner of the worksheet.
            Consider using the SetPosition() function instead.
            </summary>
            <param name="OffsetX">Offset from the left of the worksheet in EMUs.</param>
            <param name="OffsetY">Offset from the top of the worksheet in EMUs.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.SetPosition(System.Double,System.Double)">
            <summary>
            Set the position of the picture relative to the top-left of the worksheet.
            </summary>
            <param name="Top">Top position based on row index. For example, 0.5 means at the half-way point of the 1st row, 2.5 means at the half-way point of the 3rd row.</param>
            <param name="Left">Left position based on column index. For example, 0.5 means at the half-way point of the 1st column, 2.5 means at the half-way point of the 3rd column.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.SetRelativePositionInPixels(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <strong>Obsolete. </strong>Set the position of the picture in pixels relative to the top-left of the worksheet. The picture is anchored to the top-left corner of a given cell.
            Consider using the SetPosition() function instead.
            </summary>
            <param name="AnchorRowIndex">Row index of the anchor cell.</param>
            <param name="AnchorColumnIndex">Column index of the anchor cell.</param>
            <param name="OffsetX">Offset from the left of the anchor cell in pixels.</param>
            <param name="OffsetY">Offset from the top of the anchor cell in pixels.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.SetRelativePositionInEMU(System.Int32,System.Int32,System.Int64,System.Int64)">
            <summary>
            <strong>Obsolete. </strong>Set the position of the picture in English Metric Units (EMUs) relative to the top-left of the worksheet. The picture is anchored to the top-left corner of a given cell.
            Consider using the SetPosition() function instead.
            </summary>
            <param name="AnchorRowIndex">Row index of the anchor cell.</param>
            <param name="AnchorColumnIndex">Column index of the anchor cell.</param>
            <param name="OffsetX">Offset from the left of the anchor cell in EMUs.</param>
            <param name="OffsetY">Offset from the top of the anchor cell in EMUs.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.ResizeInPercentage(System.Int32,System.Int32)">
            <summary>
            Resize the picture with new size dimensions using percentages of the original size dimensions.
            </summary>
            <param name="ScaleWidth">A percentage of the original width. It is suggested to keep the range between 1% and 56624%.</param>
            <param name="ScaleHeight">A percentage of the original height. It is suggested to keep the range between 1% and 56624%.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.ResizeInPixels(System.Int32,System.Int32)">
            <summary>
            Resize the picture with new size dimensions in pixels.
            </summary>
            <param name="Width">The new width in pixels.</param>
            <param name="Height">The new height in pixels.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.ResizeInEMU(System.Int64,System.Int64)">
            <summary>
            Resize the picture with new size dimension in English Metric Units (EMUs).
            </summary>
            <param name="Width">The new width in EMUs.</param>
            <param name="Height">The new height in EMUs.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.SetSolidFill(System.Drawing.Color,System.Decimal)">
            <summary>
            <strong>Obsolete. </strong>Fill the background of the picture with color. The color will be seen through the transparent parts of the picture.
            </summary>
            <param name="FillColor">The color used to fill the background of the picture.</param>
            <param name="Transparency">Transparency of the fill color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.SetSolidFill(DocumentFormat.OpenXml.Drawing.SchemeColorValues,System.Decimal)">
            <summary>
            <strong>Obsolete. </strong>Fill the background of the picture with color. The color will be seen through the transparent parts of the picture.
            </summary>
            <param name="ThemeColor">The theme color used to fill the background of the picture.</param>
            <param name="Transparency">Transparency of the fill color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.SetSolidFill(DocumentFormat.OpenXml.Drawing.SchemeColorValues,System.Decimal,System.Decimal)">
            <summary>
            <strong>Obsolete. </strong>Fill the background of the picture with color. The color will be seen through the transparent parts of the picture.
            </summary>
            <param name="ThemeColor">The theme color used to fill the background of the picture.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="Transparency">Transparency of the fill color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.SetSolidOutline(System.Drawing.Color,System.Decimal)">
            <summary>
            <strong>Obsolete. </strong>Set the outline color.
            </summary>
            <param name="OutlineColor">The color used to outline the picture.</param>
            <param name="Transparency">Transparency of the outline color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.SetSolidOutline(DocumentFormat.OpenXml.Drawing.SchemeColorValues,System.Decimal)">
            <summary>
            <strong>Obsolete. </strong>Set the outline color.
            </summary>
            <param name="ThemeColor">The theme color used to outline the picture.</param>
            <param name="Transparency">Transparency of the outline color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.SetSolidOutline(DocumentFormat.OpenXml.Drawing.SchemeColorValues,System.Decimal,System.Decimal)">
            <summary>
            <strong>Obsolete. </strong>Set the outline color.
            </summary>
            <param name="ThemeColor">The theme color used to outline the picture.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="Transparency">Transparency of the outline color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.SetOutlineStyle(System.Decimal,System.Nullable{DocumentFormat.OpenXml.Drawing.CompoundLineValues},System.Nullable{DocumentFormat.OpenXml.Drawing.PresetLineDashValues},System.Nullable{DocumentFormat.OpenXml.Drawing.LineCapValues},System.Nullable{SpreadsheetLight.Drawing.SLLineJoinValues})">
            <summary>
            <strong>Obsolete. </strong>Set the outline style of the picture.
            </summary>
            <param name="Width">Width of the outline, between 0 pt and 1584 pt. Accurate to 1/12700 of a point.</param>
            <param name="CompoundType">Compound type. Default value is single.</param>
            <param name="DashType">Dash style of the outline.</param>
            <param name="CapType">Line cap type of the outline. Default value is square.</param>
            <param name="JoinType">Join type of the outline at the corners. Default value is round.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.SetInnerShadow(System.Drawing.Color,System.Decimal,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            <strong>Obsolete. </strong>Set an inner shadow of the picture.
            </summary>
            <param name="ShadowColor">The color used for the inner shadow.</param>
            <param name="Transparency">Transparency of the shadow color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
            <param name="Blur">Shadow blur, ranging from 0 pt to 2147483647 pt (but consider a maximum of 100 pt). Accurate to 1/12700 of a point. Default value is 0 pt.</param>
            <param name="Angle">Angle of shadow projection based on picture, ranging from 0 degrees to 359.9 degrees. 0 degrees means the shadow is to the right of the picture, 90 degrees means it's below, 180 degrees means it's to the left and 270 degrees means it's above. Accurate to 1/60000 of a degree. Default value is 0 degrees.</param>
            <param name="Distance">Distance of shadow away from picture, ranging from 0 pt to 2147483647 pt (but consider a maximum of 200 pt). Accurate to 1/12700 of a point. Default value is 0 pt.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.SetInnerShadow(DocumentFormat.OpenXml.Drawing.SchemeColorValues,System.Decimal,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            <strong>Obsolete. </strong>Set an inner shadow of the picture.
            </summary>
            <param name="ThemeColor">The theme color used for the inner shadow.</param>
            <param name="Transparency">Transparency of the shadow color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
            <param name="Blur">Shadow blur, ranging from 0 pt to 2147483647 pt (but consider a maximum of 100 pt). Accurate to 1/12700 of a point. Default value is 0 pt.</param>
            <param name="Angle">Angle of shadow projection based on picture, ranging from 0 degrees to 359.9 degrees. 0 degrees means the shadow is to the right of the picture, 90 degrees means it's below, 180 degrees means it's to the left and 270 degrees means it's above. Accurate to 1/60000 of a degree. Default value is 0 degrees.</param>
            <param name="Distance">Distance of shadow away from picture, ranging from 0 pt to 2147483647 pt (but consider a maximum of 200 pt). Accurate to 1/12700 of a point. Default value is 0 pt.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.SetInnerShadow(DocumentFormat.OpenXml.Drawing.SchemeColorValues,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            <strong>Obsolete. </strong>Set an inner shadow of the picture.
            </summary>
            <param name="ThemeColor">The theme color used for the inner shadow.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="Transparency">Transparency of the shadow color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
            <param name="Blur">Shadow blur, ranging from 0 pt to 2147483647 pt (but consider a maximum of 100 pt). Accurate to 1/12700 of a point. Default value is 0 pt.</param>
            <param name="Angle">Angle of shadow projection based on picture, ranging from 0 degrees to 359.9 degrees. 0 degrees means the shadow is to the right of the picture, 90 degrees means it's below, 180 degrees means it's to the left and 270 degrees means it's above. Accurate to 1/60000 of a degree. Default value is 0 degrees.</param>
            <param name="Distance">Distance of shadow away from picture, ranging from 0 pt to 2147483647 pt (but consider a maximum of 200 pt). Accurate to 1/12700 of a point. Default value is 0 pt.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.SetOuterShadow(System.Drawing.Color,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,DocumentFormat.OpenXml.Drawing.RectangleAlignmentValues,System.Boolean)">
            <summary>
            <strong>Obsolete. </strong>Set an outer shadow of the picture.
            </summary>
            <param name="ShadowColor">The color used for the outer shadow.</param>
            <param name="Transparency">Transparency of the shadow color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
            <param name="Size">Scale size of shadow based on size of picture in percentage (consider a range of 1% to 200%). Accurate to 1/1000 of a percent. Default value is 100%.</param>
            <param name="Blur">Shadow blur, ranging from 0 pt to 2147483647 pt (but consider a maximum of 100 pt). Accurate to 1/12700 of a point. Default value is 0 pt.</param>
            <param name="Angle">Angle of shadow projection based on picture, ranging from 0 degrees to 359.9 degrees. 0 degrees means the shadow is to the right of the picture, 90 degrees means it's below, 180 degrees means it's to the left and 270 degrees means it's above. Accurate to 1/60000 of a degree. Default value is 0 degrees.</param>
            <param name="Distance">Distance of shadow away from picture, ranging from 0 pt to 2147483647 pt (but consider a maximum of 200 pt). Accurate to 1/12700 of a point. Default value is 0 pt.</param>
            <param name="Alignment">Sets the origin of the picture for the size scaling. Default value is Bottom.</param>
            <param name="RotateWithPicture">True if the shadow should rotate with the picture if the picture is rotated. False otherwise. Default value is true.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.SetOuterShadow(DocumentFormat.OpenXml.Drawing.SchemeColorValues,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,DocumentFormat.OpenXml.Drawing.RectangleAlignmentValues,System.Boolean)">
            <summary>
            <strong>Obsolete. </strong>Set an outer shadow of the picture.
            </summary>
            <param name="ThemeColor">The theme color used for the outer shadow.</param>
            <param name="Transparency">Transparency of the shadow color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
            <param name="Size">Scale size of shadow based on size of picture in percentage (consider a range of 1% to 200%). Accurate to 1/1000 of a percent. Default value is 100%.</param>
            <param name="Blur">Shadow blur, ranging from 0 pt to 2147483647 pt (but consider a maximum of 100 pt). Accurate to 1/12700 of a point. Default value is 0 pt.</param>
            <param name="Angle">Angle of shadow projection based on picture, ranging from 0 degrees to 359.9 degrees. 0 degrees means the shadow is to the right of the picture, 90 degrees means it's below, 180 degrees means it's to the left and 270 degrees means it's above. Accurate to 1/60000 of a degree. Default value is 0 degrees.</param>
            <param name="Distance">Distance of shadow away from picture, ranging from 0 pt to 2147483647 pt (but consider a maximum of 200 pt). Accurate to 1/12700 of a point. Default value is 0 pt.</param>
            <param name="Alignment">Sets the origin of the picture for the size scaling. Default value is Bottom.</param>
            <param name="RotateWithPicture">True if the shadow should rotate with the picture if the picture is rotated. False otherwise. Default value is true.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.SetOuterShadow(DocumentFormat.OpenXml.Drawing.SchemeColorValues,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,DocumentFormat.OpenXml.Drawing.RectangleAlignmentValues,System.Boolean)">
            <summary>
            <strong>Obsolete. </strong>Set an outer shadow of the picture.
            </summary>
            <param name="ThemeColor">The theme color used for the outer shadow.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="Transparency">Transparency of the shadow color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
            <param name="Size">Scale size of shadow based on size of picture in percentage (consider a range of 1% to 200%). Accurate to 1/1000 of a percent. Default value is 100%.</param>
            <param name="Blur">Shadow blur, ranging from 0 pt to 2147483647 pt (but consider a maximum of 100 pt). Accurate to 1/12700 of a point. Default value is 0 pt.</param>
            <param name="Angle">Angle of shadow projection based on picture, ranging from 0 degrees to 359.9 degrees. 0 degrees means the shadow is to the right of the picture, 90 degrees means it's below, 180 degrees means it's to the left and 270 degrees means it's above. Accurate to 1/60000 of a degree. Default value is 0 degrees.</param>
            <param name="Distance">Distance of shadow away from picture, ranging from 0 pt to 2147483647 pt (but consider a maximum of 200 pt). Accurate to 1/12700 of a point. Default value is 0 pt.</param>
            <param name="Alignment">Sets the origin of the picture for the size scaling. Default value is Bottom.</param>
            <param name="RotateWithPicture">True if the shadow should rotate with the picture if the picture is rotated. False otherwise. Default value is true.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.SetPerspectiveShadow(System.Drawing.Color,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,DocumentFormat.OpenXml.Drawing.RectangleAlignmentValues,System.Boolean)">
            <summary>
            <strong>Obsolete. </strong>Set a perspective shadow of the picture.
            </summary>
            <param name="ShadowColor">The color used for the perspective shadow.</param>
            <param name="Transparency">Transparency of the shadow color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
            <param name="HorizontalRatio">Horizontal scaling ratio in percentage (consider a range of -200% to 200%). A negative ratio flips the shadow horizontally. Accurate to 1/1000 of a percent. Default value is 100%.</param>
            <param name="VerticalRatio">Vertical scaling ratio in percentage (consider a range of -200% to 200%). A negative ratio flips the shadow vertically. Accurate to 1/1000 of a percent. Default value is 100%.</param>
            <param name="HorizontalSkew">Horizontal skew angle, ranging from -90 degrees to 90 degrees. Accurate to 1/60000 of a degree. Default value is 0 degrees.</param>
            <param name="VerticalSkew">Vertical skew angle, ranging from -90 degrees to 90 degrees. Accurate to 1/60000 of a degree. Default value is 0 degrees.</param>
            <param name="Blur">Shadow blur, ranging from 0 pt to 2147483647 pt (but consider a maximum of 100 pt). Accurate to 1/12700 of a point. Default value is 0 pt.</param>
            <param name="Angle">Angle of shadow projection based on picture, ranging from 0 degrees to 359.9 degrees. 0 degrees means the shadow is to the right of the picture, 90 degrees means it's below, 180 degrees means it's to the left and 270 degrees means it's above. Accurate to 1/60000 of a degree. Default value is 0 degrees.</param>
            <param name="Distance">Distance of shadow away from picture, ranging from 0 pt to 2147483647 pt (but consider a maximum of 200 pt). Accurate to 1/12700 of a point. Default value is 0 pt.</param>
            <param name="Alignment">Sets the origin of the picture for the size scaling, angle skews and distance offsets. Default value is Bottom.</param>
            <param name="RotateWithPicture">True if the shadow should rotate with the picture if the picture is rotated. False otherwise. Default value is true.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.SetPerspectiveShadow(DocumentFormat.OpenXml.Drawing.SchemeColorValues,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,DocumentFormat.OpenXml.Drawing.RectangleAlignmentValues,System.Boolean)">
            <summary>
            <strong>Obsolete. </strong>Set a perspective shadow of the picture.
            </summary>
            <param name="ThemeColor">The theme color used for the perspective shadow.</param>
            <param name="Transparency">Transparency of the shadow color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
            <param name="HorizontalRatio">Horizontal scaling ratio in percentage (consider a range of -200% to 200%). A negative ratio flips the shadow horizontally. Accurate to 1/1000 of a percent. Default value is 100%.</param>
            <param name="VerticalRatio">Vertical scaling ratio in percentage (consider a range of -200% to 200%). A negative ratio flips the shadow vertically. Accurate to 1/1000 of a percent. Default value is 100%.</param>
            <param name="HorizontalSkew">Horizontal skew angle, ranging from -90 degrees to 90 degrees. Accurate to 1/60000 of a degree. Default value is 0 degrees.</param>
            <param name="VerticalSkew">Vertical skew angle, ranging from -90 degrees to 90 degrees. Accurate to 1/60000 of a degree. Default value is 0 degrees.</param>
            <param name="Blur">Shadow blur, ranging from 0 pt to 2147483647 pt (but consider a maximum of 100 pt). Accurate to 1/12700 of a point. Default value is 0 pt.</param>
            <param name="Angle">Angle of shadow projection based on picture, ranging from 0 degrees to 359.9 degrees. 0 degrees means the shadow is to the right of the picture, 90 degrees means it's below, 180 degrees means it's to the left and 270 degrees means it's above. Accurate to 1/60000 of a degree. Default value is 0 degrees.</param>
            <param name="Distance">Distance of shadow away from picture, ranging from 0 pt to 2147483647 pt (but consider a maximum of 200 pt). Accurate to 1/12700 of a point. Default value is 0 pt.</param>
            <param name="Alignment">Sets the origin of the picture for the size scaling, angle skews and distance offsets. Default value is Bottom.</param>
            <param name="RotateWithPicture">True if the shadow should rotate with the picture if the picture is rotated. False otherwise. Default value is true.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.SetPerspectiveShadow(DocumentFormat.OpenXml.Drawing.SchemeColorValues,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,DocumentFormat.OpenXml.Drawing.RectangleAlignmentValues,System.Boolean)">
            <summary>
            <strong>Obsolete. </strong>Set a perspective shadow of the picture.
            </summary>
            <param name="ThemeColor">The theme color used for the perspective shadow.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="Transparency">Transparency of the shadow color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
            <param name="HorizontalRatio">Horizontal scaling ratio in percentage (consider a range of -200% to 200%). A negative ratio flips the shadow horizontally. Accurate to 1/1000 of a percent. Default value is 100%.</param>
            <param name="VerticalRatio">Vertical scaling ratio in percentage (consider a range of -200% to 200%). A negative ratio flips the shadow vertically. Accurate to 1/1000 of a percent. Default value is 100%.</param>
            <param name="HorizontalSkew">Horizontal skew angle, ranging from -90 degrees to 90 degrees. Accurate to 1/60000 of a degree. Default value is 0 degrees.</param>
            <param name="VerticalSkew">Vertical skew angle, ranging from -90 degrees to 90 degrees. Accurate to 1/60000 of a degree. Default value is 0 degrees.</param>
            <param name="Blur">Shadow blur, ranging from 0 pt to 2147483647 pt (but consider a maximum of 100 pt). Accurate to 1/12700 of a point. Default value is 0 pt.</param>
            <param name="Angle">Angle of shadow projection based on picture, ranging from 0 degrees to 359.9 degrees. 0 degrees means the shadow is to the right of the picture, 90 degrees means it's below, 180 degrees means it's to the left and 270 degrees means it's above. Accurate to 1/60000 of a degree. Default value is 0 degrees.</param>
            <param name="Distance">Distance of shadow away from picture, ranging from 0 pt to 2147483647 pt (but consider a maximum of 200 pt). Accurate to 1/12700 of a point. Default value is 0 pt.</param>
            <param name="Alignment">Sets the origin of the picture for the size scaling, angle skews and distance offsets. Default value is Bottom.</param>
            <param name="RotateWithPicture">True if the shadow should rotate with the picture if the picture is rotated. False otherwise. Default value is true.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.Set3DBevelTop(DocumentFormat.OpenXml.Drawing.BevelPresetValues,System.Decimal,System.Decimal)">
            <summary>
            <strong>Obsolete. </strong>Set a bevelled top.
            </summary>
            <param name="BevelPreset">The bevel type. Default value is circle.</param>
            <param name="Width">Width of the bevel, ranging from 0 pt to 2147483647 pt (but consider a maximum of 1584 pt). Accurate to 1/12700 of a point. Default value is 6 pt.</param>
            <param name="Height">Height of the bevel, ranging from 0 pt to 2147483647 pt (but consider a maximum of 1584 pt). Accurate to 1/12700 of a point. Default value is 6 pt.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.Set3DBevelBottom(DocumentFormat.OpenXml.Drawing.BevelPresetValues,System.Decimal,System.Decimal)">
            <summary>
            <strong>Obsolete. </strong>Set a bevelled bottom.
            </summary>
            <param name="BevelPreset">The bevel type. Default value is circle.</param>
            <param name="Width">Width of the bevel, ranging from 0 pt to 2147483647 pt (but consider a maximum of 1584 pt). Accurate to 1/12700 of a point. Default value is 6 pt.</param>
            <param name="Height">Height of the bevel, ranging from 0 pt to 2147483647 pt (but consider a maximum of 1584 pt). Accurate to 1/12700 of a point. Default value is 6 pt.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.Set3DExtrusion(System.Drawing.Color,System.Decimal,System.Decimal)">
            <summary>
            <strong>Obsolete. </strong>Set the extrusion (or depth).
            </summary>
            <param name="ExtrusionColor">The color used for the extrusion.</param>
            <param name="Transparency">Transparency of the extrusion color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
            <param name="ExtrusionHeight">Height of the extrusion, ranging from 0 pt to 2147483647 pt (but consider a maximum of 1584 pt). Accurate to 1/12700 of a point. Default value is 0 pt.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.Set3DExtrusion(DocumentFormat.OpenXml.Drawing.SchemeColorValues,System.Decimal,System.Decimal)">
            <summary>
            <strong>Obsolete. </strong>Set the extrusion (or depth).
            </summary>
            <param name="ThemeColor">The theme color used for the extrusion.</param>
            <param name="Transparency">Transparency of the theme color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
            <param name="ExtrusionHeight">Height of the extrusion, ranging from 0 pt to 2147483647 pt (but consider a maximum of 1584 pt). Accurate to 1/12700 of a point. Default value is 0 pt.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.Set3DExtrusion(DocumentFormat.OpenXml.Drawing.SchemeColorValues,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            <strong>Obsolete. </strong>Set the extrusion (or depth).
            </summary>
            <param name="ThemeColor">The theme color used for the extrusion.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="Transparency">Transparency of the theme color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
            <param name="ExtrusionHeight">Height of the extrusion, ranging from 0 pt to 2147483647 pt (but consider a maximum of 1584 pt). Accurate to 1/12700 of a point. Default value is 0 pt.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.Set3DContour(System.Drawing.Color,System.Decimal,System.Decimal)">
            <summary>
            <strong>Obsolete. </strong>Set the 3D contour.
            </summary>
            <param name="ContourColor">The color used for the contour.</param>
            <param name="Transparency">Transparency of the contour color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
            <param name="ContourWidth">Width of the contour, ranging from 0 pt to 2147483647 pt (but consider a maximum of 1584 pt). Accurate to 1/12700 of a point. Default value is 0 pt.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.Set3DContour(DocumentFormat.OpenXml.Drawing.SchemeColorValues,System.Decimal,System.Decimal)">
            <summary>
            <strong>Obsolete. </strong>Set the 3D contour.
            </summary>
            <param name="ThemeColor">The theme color used for the contour.</param>
            <param name="Transparency">Transparency of the theme color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
            <param name="ContourWidth">Width of the contour, ranging from 0 pt to 2147483647 pt (but consider a maximum of 1584 pt). Accurate to 1/12700 of a point. Default value is 0 pt.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.Set3DContour(DocumentFormat.OpenXml.Drawing.SchemeColorValues,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            <strong>Obsolete. </strong>Set the 3D contour.
            </summary>
            <param name="ThemeColor">The theme color used for the contour.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="Transparency">Transparency of the theme color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
            <param name="ContourWidth">Width of the contour, ranging from 0 pt to 2147483647 pt (but consider a maximum of 1584 pt). Accurate to 1/12700 of a point. Default value is 0 pt.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.Set3DMaterialType(DocumentFormat.OpenXml.Drawing.PresetMaterialTypeValues)">
            <summary>
            <strong>Obsolete. </strong>Set the surface material.
            </summary>
            <param name="MaterialType">The material used. Default value is WarmMatte.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.Set3DZDistance(System.Decimal)">
            <summary>
            <strong>Obsolete. </strong>Set the Z distance.
            </summary>
            <param name="ZDistance">The Z distance, ranging from -4000 pt to 4000 pt. Accurate to 1/12700 of a point. Default value is 0 pt.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.Set3DScene(DocumentFormat.OpenXml.Drawing.PresetCameraValues,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,DocumentFormat.OpenXml.Drawing.LightRigValues,DocumentFormat.OpenXml.Drawing.LightRigDirectionValues,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            <strong>Obsolete. </strong>Set the camera and light properties.
            </summary>
            <param name="CameraPreset">A preset set of properties for the camera, which can be overridden. Default value is OrthographicFront.</param>
            <param name="FieldOfView">Field of view, ranging from 0 degrees to 180 degrees. Accurate to 1/60000 of a degree.</param>
            <param name="Zoom">Zoom percentage, ranging from 0% to 2147483.647%. Accurate to 1/1000 of a percent.</param>
            <param name="CameraLatitude">Camera latitude angle, ranging from 0 degrees to 359.9 degrees. Accurate to 1/60000 of a degree.</param>
            <param name="CameraLongitude">Camera longitude angle, ranging from 0 degrees to 359.9 degrees. Accurate to 1/60000 of a degree.</param>
            <param name="CameraRevolution">Camera revolution angle, ranging from 0 degrees to 359.9 degrees. Accurate to 1/60000 of a degree.</param>
            <param name="LightRigType">The type of light used. Default value is ThreePoints.</param>
            <param name="LightRigDirection">The direction of the light. Default value is Top.</param>
            <param name="LightRigLatitude">Light rig latitude angle, ranging from 0 degrees to 359.9 degrees. Accurate to 1/60000 of a degree.</param>
            <param name="LightRigLongitude">Light rig longitude angle, ranging from 0 degrees to 359.9 degrees. Accurate to 1/60000 of a degree.</param>
            <param name="LightRigRevolution">Light rig revolution angle, ranging from 0 degrees to 359.9 degrees. Accurate to 1/60000 of a degree.</param>
            <remarks>Imagine the screen to be the X-Y plane, the positive X-axis pointing to the right, and the positive Y-axis pointing up.
            The positive Z-axis points perpendicularly from the screen towards you.
            The latitude value increases as you turn around the X-axis, using the right-hand rule.
            The longitude value increases as you turn around the Y-axis, using the <em>left-hand rule</em> (meaning it decreases according to right-hand rule).
            The revolution value increases as you turn around the Z-axis, using the right-hand rule.
            And if you're mapping values directly from Microsoft Excel, don't treat the X, Y and Z values as values related to the axes.
            The latitude maps to the Y value, longitude maps to the X value, and revolution maps to the Z value.</remarks>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.SetSoftEdge(System.Decimal)">
            <summary>
            <strong>Obsolete. </strong>Set soft edges on the picture.
            </summary>
            <param name="Radius">Radius of the soft edge, ranging from 0 pt to 2147483647 pt (but consider a much lower maximum). Accurate to 1/12700 of a point.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.SetGlow(System.Drawing.Color,System.Decimal,System.Decimal)">
            <summary>
            <strong>Obsolete. </strong>Set the picture to glow on the edges.
            </summary>
            <param name="GlowColor">The color used for the glow.</param>
            <param name="Transparency">Transparency of the glow color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
            <param name="GlowRadius">Radius of the glow, ranging from 0 pt to 2147483647 pt (but consider a much lower maximum). Accurate to 1/12700 of a point.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.SetGlow(DocumentFormat.OpenXml.Drawing.SchemeColorValues,System.Decimal,System.Decimal)">
            <summary>
            <strong>Obsolete. </strong>Set the picture to glow on the edges.
            </summary>
            <param name="ThemeColor">The theme color used for the glow.</param>
            <param name="Transparency">Transparency of the theme color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
            <param name="GlowRadius">Radius of the glow, ranging from 0 pt to 2147483647 pt (but consider a much lower maximum). Accurate to 1/12700 of a point.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.SetGlow(DocumentFormat.OpenXml.Drawing.SchemeColorValues,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            <strong>Obsolete. </strong>Set the picture to glow on the edges.
            </summary>
            <param name="ThemeColor">The theme color used for the glow.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="Transparency">Transparency of the theme color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
            <param name="GlowRadius">Radius of the glow, ranging from 0 pt to 2147483647 pt (but consider a much lower maximum). Accurate to 1/12700 of a point.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.SetTightReflection">
            <summary>
            <strong>Obsolete. </strong>Set a tight reflection of the picture.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.SetTightReflection(System.Decimal)">
            <summary>
            <strong>Obsolete. </strong>Set a tight reflection of the picture.
            </summary>
            <param name="Offset">Offset distance of the reflection below the picture, ranging from 0 pt to 2147483647 pt (but consider a much lower maximum). Accurate to 1/12700 of a point. Default value is 0 pt.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.SetHalfReflection">
            <summary>
            <strong>Obsolete. </strong>Set a reflection that's about half of the picture.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.SetHalfReflection(System.Decimal)">
            <summary>
            <strong>Obsolete. </strong>Set a reflection that's about half of the picture.
            </summary>
            <param name="Offset">Offset distance of the reflection below the picture, ranging from 0 pt to 2147483647 pt (but consider a much lower maximum). Accurate to 1/12700 of a point. Default value is 0 pt.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.SetFullReflection">
            <summary>
            <strong>Obsolete. </strong>Set a full reflection of the picture.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.SetFullReflection(System.Decimal)">
            <summary>
            <strong>Obsolete. </strong>Set a full reflection of the picture.
            </summary>
            <param name="Offset">Offset distance of the reflection below the picture, ranging from 0 pt to 2147483647 pt (but consider a much lower maximum). Accurate to 1/12700 of a point. Default value is 0 pt.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.SetReflection(System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,DocumentFormat.OpenXml.Drawing.RectangleAlignmentValues,System.Boolean)">
            <summary>
            <strong>Obsolete. </strong>Set a reflection of the picture.
            </summary>
            <param name="BlurRadius">Blur radius of the reflection, ranging from 0 pt to 2147483647 pt (but consider a much lower maximum). Accurate to 1/12700 of a point. Default value is 0 pt.</param>
            <param name="StartOpacity">Start opacity of the reflection, ranging from 0% to 100%. Accurate to 1/1000 of a percent. Default value is 100%.</param>
            <param name="StartPosition">Position of start opacity of the reflection, ranging from 0% to 100%. Accurate to 1/1000 of a percent. Default value is 0%.</param>
            <param name="EndAlpha">End alpha of the reflection, ranging from 0% to 100%. Accurate to 1/1000 of a percent. Default value is 0%.</param>
            <param name="EndPosition">Position of end alpha of the reflection, ranging from 0% to 100%. Accurate to 1/1000 of a percent. Default value is 100%.</param>
            <param name="Distance">Distance of the reflection from the picture, ranging from 0 pt to 2147483647 pt (but consider a much lower maximum). Accurate to 1/12700 of a point. Default value is 0 pt.</param>
            <param name="Direction">Direction of the alpha gradient relative to the picture, ranging from 0 degrees to 359.9 degrees. 0 degrees means to the right, 90 degrees is below, 180 degrees is to the right, and 270 degrees is above. Accurate to 1/60000 of a degree. Default value is 0 degrees.</param>
            <param name="FadeDirection">Direction to fade the reflection, ranging from 0 degrees to 359.9 degrees. 0 degrees means to the right, 90 degrees is below, 180 degrees is to the right, and 270 degrees is above. Accurate to 1/60000 of a degree. Default value is 90 degrees.</param>
            <param name="HorizontalRatio">Horizontal scaling ratio in percentage. A negative ratio flips the reflection horizontally. Accurate to 1/1000 of a percent. Default value is 100%.</param>
            <param name="VerticalRatio">Vertical scaling ratio in percentage. A negative ratio flips the reflection vertically. Accurate to 1/1000 of a percent. Default value is 100%.</param>
            <param name="HorizontalSkew">Horizontal skew angle, ranging from -90 degrees to 90 degrees. Accurate to 1/60000 of a degree. Default value is 0 degrees.</param>
            <param name="VerticalSkew">Vertical skew angle, ranging from -90 degrees to 90 degrees. Accurate to 1/60000 of a degree. Default value is 0 degrees.</param>
            <param name="Alignment">Sets the origin of the picture for the size scaling, angle skews and distance offsets. Default value is Bottom.</param>
            <param name="RotateWithShape">True if the reflection should rotate with the picture if the picture is rotated. False otherwise. Default value is true.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.InsertUrlHyperlink(System.String)">
            <summary>
            Inserts a hyperlink to a webpage.
            </summary>
            <param name="URL">The target webpage URL.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.InsertFileHyperlink(System.String)">
            <summary>
            Inserts a hyperlink to a document on the computer.
            </summary>
            <param name="FilePath">The relative path to the file based on the location of the spreadsheet.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.InsertEmailHyperlink(System.String)">
            <summary>
            Inserts a hyperlink to an email address.
            </summary>
            <param name="EmailAddress">The email address, such as johndoe@acme.com</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.InsertInternalHyperlink(System.String,System.Int32,System.Int32)">
            <summary>
            Inserts a hyperlink to a place in the spreadsheet document.
            </summary>
            <param name="SheetName">The name of the worksheet being referenced.</param>
            <param name="RowIndex">The row index of the referenced cell. If this is invalid, row 1 will be used.</param>
            <param name="ColumnIndex">The column index of the referenced cell. If this is invalid, column 1 will be used.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.InsertInternalHyperlink(System.String,System.String)">
            <summary>
            Inserts a hyperlink to a place in the spreadsheet document.
            </summary>
            <param name="SheetName">The name of the worksheet being referenced.</param>
            <param name="CellReference">The cell reference, such as "A1".</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLPicture.InsertInternalHyperlink(System.String)">
            <summary>
            Inserts a hyperlink to a place in the spreadsheet document.
            </summary>
            <param name="DefinedName">A defined name in the spreadsheet.</param>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLPicture.HorizontalResolution">
            <summary>
            The horizontal resolution (DPI) of the picture. This is read-only.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLPicture.VerticalResolution">
            <summary>
            The vertical resolution (DPI) of the picture. This is read-only.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLPicture.AlternativeText">
            <summary>
            The text used to assist users with disabilities. This is similar to the alt tag used in HTML.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLPicture.LockWithSheet">
            <summary>
            Indicates whether the picture can be selected (selection is disabled when this is true). Locking the picture only works when the sheet is also protected. Default value is true.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLPicture.PrintWithSheet">
            <summary>
            Indicates whether the picture is printed when the sheet is printed. Default value is true.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLPicture.CompressionState">
            <summary>
            Compression settings for the picture. Default value is Print.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLPicture.Brightness">
            <summary>
            Picture brightness modifier, ranging from -100% to 100%. Accurate to 1/1000 of a percent. Default value is 0%.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLPicture.Contrast">
            <summary>
            Picture contrast modifier, ranging from -100% to 100%. Accurate to 1/1000 of a percent. Default value is 0%.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLPicture.PictureShape">
            <summary>
            Set the shape of the picture. Default value is Rectangle.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLPicture.Fill">
            <summary>
            Fill properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLPicture.Line">
            <summary>
            Line properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLPicture.Shadow">
            <summary>
            Shadow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLPicture.Reflection">
            <summary>
            Reflection properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLPicture.Glow">
            <summary>
            Glow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLPicture.SoftEdge">
            <summary>
            Soft edge properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLPicture.Format3D">
            <summary>
            3D format properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLPicture.Rotation3D">
            <summary>
            3D rotation properties.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLValueAxis">
            <summary>
            Encapsulates properties and methods for setting value axes in charts.
            This simulates the DocumentFormat.OpenXml.Drawing.Charts.ValueAxis class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLValueAxis.ClearShapeProperties">
            <summary>
            Clear all styling shape properties. Use this if you want to start styling from a clean slate.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLValueAxis.SetDisplayUnits(DocumentFormat.OpenXml.Drawing.Charts.BuiltInUnitValues,System.Boolean)">
            <summary>
            Set the display units on the axis.
            </summary>
            <param name="BuiltInUnit">Built-in unit types.</param>
            <param name="ShowDisplayUnitsLabel">True to show the display units label on the chart. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLValueAxis.RemoveDisplayUnits">
            <summary>
            Remove the display units on the axis.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLValueAxis.SetAutomaticOtherAxisCrossing">
            <summary>
            Set the corresponding category/date/value axis to cross this axis at an automatic value.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLValueAxis.SetOtherAxisCrossing(System.Double)">
            <summary>
            Set the corresponding category/date/value axis to cross this axis at a given value.
            </summary>
            <param name="CrossingAxisValue">Axis value to cross at.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLValueAxis.SetMaximumOtherAxisCrossing">
            <summary>
            Set the corresponding category/date/value axis to cross this axis at the maximum value.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLValueAxis.MajorUnit">
            <summary>
            The major unit on the axis. A null value means it's automatically set.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLValueAxis.MinorUnit">
            <summary>
            The minor unit on the axis. A null value means it's automatically set.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLValueAxis.LogarithmicScale">
            <summary>
            Logarithmic scale of the axis, ranging from 2 to 1000 (both inclusive). A null value means it's not used.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLValueAxis.Maximum">
            <summary>
            The maximum value on the axis. A null value means it's automatically set.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLValueAxis.Minimum">
            <summary>
            The minimum value on the axis. A null value means it's automatically set.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLCellFormula">
            <summary>
            This is for information purposes only! This simulates the DocumentFormat.OpenXml.Spreadsheet.CellFormula class.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLCellFormula.FormulaText">
            <summary>
            The formula text.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLCellFormula.FormulaType">
            <summary>
            The type of formula.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLCellFormula.AlwaysCalculateArray">
            <summary>
            If true, then formula is an array formula and the entire array is calculated in full.
            If false, then individual cells are calculated as needed.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLCellFormula.Reference">
            <summary>
            Range of cells where the formula is applied.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLCellFormula.DataTable2D">
            <summary>
            True for 2-dimensional data table. False otherwise.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLCellFormula.DataTableRow">
            <summary>
            If true, then 1-dimensional data table is a row. Otherwise it's a column.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLCellFormula.Input1Deleted">
            <summary>
            Whether the first input cell for data table is deleted.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLCellFormula.Input2Deleted">
            <summary>
            Whether the second input cell for data table is deleted.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLCellFormula.R1">
            <summary>
            First input cell for data table.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLCellFormula.R2">
            <summary>
            Second input cell for data table.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLCellFormula.CalculateCell">
            <summary>
            Indicates whether this formula needs to be recalculated.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLCellFormula.SharedIndex">
            <summary>
            Shared formula index.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLCellFormula.Bx">
            <summary>
            Specifies that this formula assigns a value to a name.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLThemeSettings">
            <summary>
            Simple settings for themes.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLThemeSettings.#ctor">
            <summary>
            Initialize an instance of SLThemeSettings.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLThemeSettings.#ctor(SpreadsheetLight.SLThemeTypeValues)">
            <summary>
            Initialize an instance of SLThemeSettings with a given theme.
            </summary>
            <param name="ThemeType">A built-in theme.</param>
        </member>
        <member name="P:SpreadsheetLight.SLThemeSettings.ThemeName">
            <summary>
            The theme name.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLThemeSettings.MajorLatinFont">
            <summary>
            The major latin font.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLThemeSettings.MinorLatinFont">
            <summary>
            The minor latin font.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLThemeSettings.Dark1Color">
            <summary>
            Typically pure black.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLThemeSettings.Light1Color">
            <summary>
            Typically pure white.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLThemeSettings.Dark2Color">
            <summary>
            A dark color that still has visual contrast against light tints of the accent colors.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLThemeSettings.Light2Color">
            <summary>
            A light color that still has visual contrast against dark tints of the accent colors.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLThemeSettings.Accent1Color">
            <summary>
            Accent1 color.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLThemeSettings.Accent2Color">
            <summary>
            Accent2 color.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLThemeSettings.Accent3Color">
            <summary>
            Accent3 color.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLThemeSettings.Accent4Color">
            <summary>
            Accent4 color.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLThemeSettings.Accent5Color">
            <summary>
            Accent5 color.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLThemeSettings.Accent6Color">
            <summary>
            Accent6 color.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLThemeSettings.Hyperlink">
            <summary>
            Color of a hyperlink.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLThemeSettings.FollowedHyperlinkColor">
            <summary>
            Color of a followed hyperlink.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLThreeIconSetOptions">
            <summary>
            Conditional formatting options for three icon sets.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLThreeIconSetOptions.#ctor(SpreadsheetLight.SLThreeIconSetValues)">
            <summary>
            Initializes an instance of SLThreeIconSetOptions.
            </summary>
            <param name="IconSetType">The type of icon set.</param>
        </member>
        <member name="P:SpreadsheetLight.SLThreeIconSetOptions.ReverseIconOrder">
            <summary>
            Specifies if the icons in the set are reversed.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLThreeIconSetOptions.ShowIconOnly">
            <summary>
            Specifies if only the icon is shown. Set to false to show both icon and value.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLThreeIconSetOptions.Icon1">
            <summary>
            The 1st icon.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLThreeIconSetOptions.Icon2">
            <summary>
            The 2nd icon.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLThreeIconSetOptions.Icon3">
            <summary>
            The 3rd icon.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLThreeIconSetOptions.GreaterThanOrEqual2">
            <summary>
            Specifies if values are to be greater than or equal to the 2nd range value. Set to false if values are to be strictly greater than.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLThreeIconSetOptions.GreaterThanOrEqual3">
            <summary>
            Specifies if values are to be greater than or equal to the 3rd range value. Set to false if values are to be strictly greater than.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLThreeIconSetOptions.Value2">
            <summary>
            The 2nd range value.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLThreeIconSetOptions.Value3">
            <summary>
            The 3rd range value.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLThreeIconSetOptions.Type2">
            <summary>
            The conditional format type for the 2nd range value.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLThreeIconSetOptions.Type3">
            <summary>
            The conditional format type for the 3rd range value.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLFloor">
            <summary>
            Encapsulates properties and methods for setting the floor of 3D charts.
            This simulates the DocumentFormat.OpenXml.Drawing.Charts.Floor class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLFloor.ClearShapeProperties">
            <summary>
            Clear all styling shape properties. Use this if you want to start styling from a clean slate.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLFloor.Fill">
            <summary>
            Fill properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLFloor.Border">
            <summary>
            Border properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLFloor.Shadow">
            <summary>
            Shadow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLFloor.Glow">
            <summary>
            Glow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLFloor.SoftEdge">
            <summary>
            Soft edge properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLFloor.Format3D">
            <summary>
            3D format properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLFloor.Rotation3D">
            <summary>
            3D rotation properties.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLGroupDataLabelOptions">
            <summary>
            Encapsulates properties and methods for setting group data label options for charts.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLGroupDataLabelOptions.ShowLeaderLines">
            <summary>
            Specifies if leader lines are shown. This is for pie charts (I think...).
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLThemeTypeValues">
            <summary>
            Specifies the built-in theme type.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Office">
            <summary>
            Office theme with Cambria and Calibri as the major and minor fonts respectively.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Office2013">
            <summary>
            Office2013 theme with Calibri Light and Calibri as the major and minor fonts respectively.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Adjacency">
            <summary>
            Adjacency theme with Cambria and Calibri as the major and minor fonts respectively.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Angles">
            <summary>
            Angles theme with Franklin Gothic Medium and Franklin Gothic Book as the major and minor fonts respectively.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Apex">
            <summary>
            Apex theme with Lucida Sans and Book Antiqua as the major and minor fonts respectively.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Apothecary">
            <summary>
            Apothecary theme with Book Antiqua and Century Gothic as the major and minor fonts respectively.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Aspect">
            <summary>
            Aspect theme with Verdana as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Austin">
            <summary>
            Austin theme with Century Gothic as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.BlackTie">
            <summary>
            Black Tie theme with Garamond as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Civic">
            <summary>
            Civic theme with Georgia as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Clarity">
            <summary>
            Clarity theme with Arial as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Composite">
            <summary>
            Composite theme with Calibri as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Concourse">
            <summary>
            Concourse theme with Lucida Sans Unicode as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Couture">
            <summary>
            Couture theme with Garamond as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Elemental">
            <summary>
            Elemental theme with Palatino Linotype as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Equity">
            <summary>
            Equity theme with Franklin Gothic Book and Perpetua as the major and minor fonts respectively.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Essential">
            <summary>
            Essential theme with Arial Black and Arial as the major and minor fonts respectively.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Executive">
            <summary>
            Executive theme with Century Gothic and Palatino Linotype as the major and minor fonts respectively.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Facet">
            <summary>
            Facet theme with Trebuchet MS as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Flow">
            <summary>
            Flow theme with Calibri and Constantia as the major and minor fonts respectively.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Foundry">
            <summary>
            Foundry theme with Rockwell as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Grid">
            <summary>
            Grid theme with Franklin Gothic Medium as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Hardcover">
            <summary>
            Hardcover theme with Book Antiqua as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Horizon">
            <summary>
            Horizon theme with Arial Narrow as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Integral">
            <summary>
            Integral theme with Tw Cen MT Condensed and Tw Cen MT as the major and minor fonts respectively.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Ion">
            <summary>
            Ion theme with Century Gothic as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.IonBoardroom">
            <summary>
            Ion Boardroom theme with Century Gothic as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Median">
            <summary>
            Median theme with Tw Cen MT as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Metro">
            <summary>
            Metro theme with Consolas and Corbel as the major and minor fonts respectively.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Module">
            <summary>
            Module theme with Corbel as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Newsprint">
            <summary>
            Newsprint theme with Impact and Times New Roman as the major and minor fonts respectively.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Opulent">
            <summary>
            Opulent theme with Trebuchet MS as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Organic">
            <summary>
            Organic theme with Garamond as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Oriel">
            <summary>
            Oriel theme with Century Schoolbook as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Origin">
            <summary>
            Origin theme with Bookman Old Style and Gill Sans MT as the major and minor fonts respectively.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Paper">
            <summary>
            Paper theme with Constantia as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Perspective">
            <summary>
            Perspective theme with Arial as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Pushpin">
            <summary>
            Pushpin theme with Constantia and Franklin Gothic Book as the major and minor fonts respectively.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Retrospect">
            <summary>
            Retrospect theme with Calibri Light and Calibri as the major and minor fonts respectively.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Slice">
            <summary>
            Slice theme with Century Gothic as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Slipstream">
            <summary>
            Slipstream theme with Trebuchet MS as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Solstice">
            <summary>
            Solstice theme with Gill Sans MT as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Technic">
            <summary>
            Technic theme with Franklin Gothic Book and Arial as the major and minor fonts respectively.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Thatch">
            <summary>
            Thatch theme with Tw Cen MT as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Trek">
            <summary>
            Trek theme with Franklin Gothic Medium and Franklin Gothic Book as the major and minor fonts respectively.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Urban">
            <summary>
            Urban theme with Trebuchet MS and Georgia as the major and minor fonts respectively.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Verve">
            <summary>
            Verve theme with Century Gothic as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Waveform">
            <summary>
            Waveform theme with Candara as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Wisp">
            <summary>
            Wisp theme with Century Gothic as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Autumn">
            <summary>
            Autumn theme with Verdana as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Banded">
            <summary>
            Banded theme with Corbel as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Basis">
            <summary>
            Basis theme with Corbel as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Berlin">
            <summary>
            Berlin theme with Trebuchet MS as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Celestial">
            <summary>
            Celestial theme with Calibri Light and Calibri as the major and minor fonts respectively.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Circuit">
            <summary>
            Circuit theme with Tw Cen MT as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Damask">
            <summary>
            Damask theme Bookman Old Style and Rockwell as the major and minor fonts respectively.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Decatur">
            <summary>
            Decatur theme with Bodoni MT Condensed and Franklin Gothic Book as the major and minor fonts respectively.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Depth">
            <summary>
            Depth theme with Corbel as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Dividend">
            <summary>
            Dividend theme with Gill Sans MT as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Droplet">
            <summary>
            Droplet theme with Tw Cen MT as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Frame">
            <summary>
            Frame theme with Corbel as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Kilter">
            <summary>
            Kilter theme with Rockwell as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Macro">
            <summary>
            Macro theme with Calibri as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.MainEvent">
            <summary>
            Main Event theme with Impact as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Mesh">
            <summary>
            Mesh theme with Century Gothic as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Metropolitan">
            <summary>
            Metropolitan theme with Calibri Light as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Mylar">
            <summary>
            Mylar theme with Corbel as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Parallax">
            <summary>
            Parallax theme with Corbel as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Quotable">
            <summary>
            Quotable theme with Century Gothic as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Savon">
            <summary>
            Savon theme with Century Gothic as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Sketchbook">
            <summary>
            Sketchbook theme with Cambria as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Slate">
            <summary>
            Slate theme with Calisto MT as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Soho">
            <summary>
            Soho theme with Candara as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Spring">
            <summary>
            Spring theme with Verdana as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Summer">
            <summary>
            Summer theme with Verdana as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Thermal">
            <summary>
            Thermal theme with Calibri as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Tradeshow">
            <summary>
            Tradeshow theme with Arial Black and Candara as the major and minor fonts respectively.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.UrbanPop">
            <summary>
            Urban Pop theme with Gill Sans MT as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.VaporTrail">
            <summary>
            Vapor Trail theme with Century Gothic as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.View">
            <summary>
            View theme with Century Schoolbook as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.Winter">
            <summary>
            Winter theme with Verdana as both major and minor fonts.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeTypeValues.WoodType">
            <summary>
            Wood Type theme with Rockwell Condensed and Rockwell as the major and minor fonts respectively.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLThemeColorIndexValues">
            <summary>
            Specifies the theme color type.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeColorIndexValues.Light1Color">
            <summary>
            Typically pure white. For convenience, this also doubles as "Background 1".
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeColorIndexValues.Dark1Color">
            <summary>
            Typically pure black. For convenience, this also doubles as "Text 1".
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeColorIndexValues.Light2Color">
            <summary>
            A light color that still has visual contrast against dark tints of the accent colors. For convenience, this also doubles as "Background 2".
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeColorIndexValues.Dark2Color">
            <summary>
            A dark color that still has visual contrast against light tints of the accent colors. For convenience, this also doubles as "Text 2".
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeColorIndexValues.Accent1Color">
            <summary>
            Accent1 color
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeColorIndexValues.Accent2Color">
            <summary>
            Accent2 color
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeColorIndexValues.Accent3Color">
            <summary>
            Accent3 color
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeColorIndexValues.Accent4Color">
            <summary>
            Accent4 color
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeColorIndexValues.Accent5Color">
            <summary>
            Accent5 color
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeColorIndexValues.Accent6Color">
            <summary>
            Accent6 color
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeColorIndexValues.Hyperlink">
            <summary>
            Color of a hyperlink
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThemeColorIndexValues.FollowedHyperlinkColor">
            <summary>
            Color of a followed hyperlink
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLCell">
            <summary>
            This is for information purposes only! This simulates the DocumentFormat.OpenXml.Spreadsheet.Cell class.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLCell.fNumericValue">
            <summary>
            Access this at your own peril! Only when CellText and NumericValue have to be set together! Probably! You've been warned!
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLCell.IsEmpty">
            <summary>
            Indicates if the cell is truly empty. This is read-only.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLCell.CellFormula">
            <summary>
            Cell formula.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLCell.CellText">
            <summary>
            If this is null, the actual value is stored in NumericValue.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLCell.NumericValue">
            <summary>
            Use this value only when CellText is null.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLCell.StyleIndex">
            <summary>
            Style index.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLCell.DataType">
            <summary>
            Cell data type.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLCell.CellMetaIndex">
            <summary>
            Cell meta index.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLCell.ValueMetaIndex">
            <summary>
            Cell value meta index.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLCell.ShowPhonetic">
            <summary>
            Indicates if phonetic information should be shown.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLTableStyleTypeValues">
            <summary>
            Specifies the built-in table style type.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Light1">
            <summary>
            Table Style Light 1
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Light2">
            <summary>
            Table Style Light 2
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Light3">
            <summary>
            Table Style Light 3
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Light4">
            <summary>
            Table Style Light 4
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Light5">
            <summary>
            Table Style Light 5
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Light6">
            <summary>
            Table Style Light 6
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Light7">
            <summary>
            Table Style Light 7
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Light8">
            <summary>
            Table Style Light 8
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Light9">
            <summary>
            Table Style Light 9
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Light10">
            <summary>
            Table Style Light 10
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Light11">
            <summary>
            Table Style Light 11
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Light12">
            <summary>
            Table Style Light 12
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Light13">
            <summary>
            Table Style Light 13
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Light14">
            <summary>
            Table Style Light 14
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Light15">
            <summary>
            Table Style Light 15
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Light16">
            <summary>
            Table Style Light 16
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Light17">
            <summary>
            Table Style Light 17
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Light18">
            <summary>
            Table Style Light 18
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Light19">
            <summary>
            Table Style Light 19
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Light20">
            <summary>
            Table Style Light 20
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Light21">
            <summary>
            Table Style Light 21
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Medium1">
            <summary>
            Table Style Medium 1
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Medium2">
            <summary>
            Table Style Medium 2
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Medium3">
            <summary>
            Table Style Medium 3
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Medium4">
            <summary>
            Table Style Medium 4
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Medium5">
            <summary>
            Table Style Medium 5
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Medium6">
            <summary>
            Table Style Medium 6
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Medium7">
            <summary>
            Table Style Medium 7
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Medium8">
            <summary>
            Table Style Medium 8
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Medium9">
            <summary>
            Table Style Medium 9
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Medium10">
            <summary>
            Table Style Medium 10
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Medium11">
            <summary>
            Table Style Medium 11
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Medium12">
            <summary>
            Table Style Medium 12
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Medium13">
            <summary>
            Table Style Medium 13
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Medium14">
            <summary>
            Table Style Medium 14
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Medium15">
            <summary>
            Table Style Medium 15
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Medium16">
            <summary>
            Table Style Medium 16
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Medium17">
            <summary>
            Table Style Medium 17
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Medium18">
            <summary>
            Table Style Medium 18
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Medium19">
            <summary>
            Table Style Medium 19
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Medium20">
            <summary>
            Table Style Medium 20
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Medium21">
            <summary>
            Table Style Medium 21
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Medium22">
            <summary>
            Table Style Medium 22
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Medium23">
            <summary>
            Table Style Medium 23
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Medium24">
            <summary>
            Table Style Medium 24
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Medium25">
            <summary>
            Table Style Medium 25
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Medium26">
            <summary>
            Table Style Medium 26
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Medium27">
            <summary>
            Table Style Medium 27
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Medium28">
            <summary>
            Table Style Medium 28
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Dark1">
            <summary>
            Table Style Dark 1
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Dark2">
            <summary>
            Table Style Dark 2
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Dark3">
            <summary>
            Table Style Dark 3
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Dark4">
            <summary>
            Table Style Dark 4
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Dark5">
            <summary>
            Table Style Dark 5
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Dark6">
            <summary>
            Table Style Dark 6
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Dark7">
            <summary>
            Table Style Dark 7
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Dark8">
            <summary>
            Table Style Dark 8
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Dark9">
            <summary>
            Table Style Dark 9
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Dark10">
            <summary>
            Table Style Dark 10
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTableStyleTypeValues.Dark11">
            <summary>
            Table Style Dark 11
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLHorizontalTextAlignmentValues">
            <summary>
            Specifies how the text is aligned horizontally.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHorizontalTextAlignmentValues.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHorizontalTextAlignmentValues.Justify">
            <summary>
            Justify
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHorizontalTextAlignmentValues.Center">
            <summary>
            Center
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHorizontalTextAlignmentValues.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHorizontalTextAlignmentValues.Distributed">
            <summary>
            Distributed
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLVerticalTextAlignmentValues">
            <summary>
            Specifies how the text is aligned vertically.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLVerticalTextAlignmentValues.Top">
            <summary>
            Top
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLVerticalTextAlignmentValues.Justify">
            <summary>
            Justify
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLVerticalTextAlignmentValues.Center">
            <summary>
            Center
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLVerticalTextAlignmentValues.Bottom">
            <summary>
            Bottom
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLVerticalTextAlignmentValues.Distributed">
            <summary>
            Distributed
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLCommentOrientationValues">
            <summary>
            Specifies how the comment is oriented.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLCommentOrientationValues.Horizontal">
            <summary>
            Horizontal
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLCommentOrientationValues.TopDown">
            <summary>
            The text characters are arranged in a top-down direction
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLCommentOrientationValues.Rotated270Degrees">
            <summary>
            Rotated 270 degrees
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLCommentOrientationValues.Rotated90Degrees">
            <summary>
            Rotated 90 degrees
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLDashStyleValues">
            <summary>
            Specifies how line dashes are styled
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLDashStyleValues.Solid">
            <summary>
            Solid
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLDashStyleValues.ShortDash">
            <summary>
            Short dash
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLDashStyleValues.ShortDot">
            <summary>
            Short dot
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLDashStyleValues.ShortDashDot">
            <summary>
            Short dash dot
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLDashStyleValues.ShortDashDotDot">
            <summary>
            Short dash dot dot
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLDashStyleValues.Dot">
            <summary>
            Dot
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLDashStyleValues.Dash">
            <summary>
            Dash
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLDashStyleValues.LongDash">
            <summary>
            Long dash
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLDashStyleValues.DashDot">
            <summary>
            Dash dot
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLDashStyleValues.LongDashDot">
            <summary>
            Long dash dot
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLDashStyleValues.LongDashDotDot">
            <summary>
            Long dash dot dot
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLComment">
            <summary>
            Encapsulates properties and methods for cell comments.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLComment.SetText(System.String)">
            <summary>
            Set the comment text.
            </summary>
            <param name="Text">The comment text.</param>
        </member>
        <member name="M:SpreadsheetLight.SLComment.SetText(SpreadsheetLight.SLRstType)">
            <summary>
            Set the comment text given rich text content.
            </summary>
            <param name="RichText">The rich text content</param>
        </member>
        <member name="M:SpreadsheetLight.SLComment.SetPosition(System.Double,System.Double)">
            <summary>
            Set the position of the comment box. NOTE: This isn't an exact science. The positioning depends on the DPI of the computer's screen.
            </summary>
            <param name="Top">Top position of the comment box based on row index. For example, 0.5 means at the half-way point of the 1st row, 2.5 means at the half-way point of the 3rd row.</param>
            <param name="Left">Left position of the comment box based on column index. For example, 0.5 means at the half-way point of the 1st column, 2.5 means at the half-way point of the 3rd column.</param>
        </member>
        <member name="M:SpreadsheetLight.SLComment.SetPositionMargin(System.Double,System.Double)">
            <summary>
            Set the position of the comment box given the top and left margins measured in points. It is suggested to use SetPosition() instead. This method is provided as a means of convenience. NOTE: This isn't an exact science. The positioning depends on the DPI of the computer's screen.
            </summary>
            <param name="TopMargin">Top margin in points. This is measured from the top-left corner of the cell A1.</param>
            <param name="LeftMargin">Left margin in points. This is measured from the top-left corner of the cell A1.</param>
        </member>
        <member name="M:SpreadsheetLight.SLComment.SetDashStyle(SpreadsheetLight.SLDashStyleValues)">
            <summary>
            Set the dash style of the comment box.
            </summary>
            <param name="DashStyle">The dash style.</param>
        </member>
        <member name="M:SpreadsheetLight.SLComment.SetDashStyle(SpreadsheetLight.SLDashStyleValues,DocumentFormat.OpenXml.Vml.StrokeEndCapValues)">
            <summary>
            Set the dash style of the comment box.
            </summary>
            <param name="DashStyle">The dash style.</param>
            <param name="EndCap">The end cap of the lines.</param>
        </member>
        <member name="P:SpreadsheetLight.SLComment.Author">
            <summary>
            The author of the comment.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLComment.AutoSize">
            <summary>
            Set true to automatically size the comment box according to the comment's contents.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLComment.Width">
            <summary>
            Width of comment box in units of points. For practical purposes, the width is a minimum of 1 pt.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLComment.Height">
            <summary>
            Height of comment box in units of points. For practical purposes, the height is a minimum of 1 pt.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLComment.Fill">
            <summary>
            Fill properties. Note that this is repurposed, and some of the methods and properties can't be
            directly translated to a VML-equivalent (which is how comment styles are stored).
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLComment.GradientFromTransparency">
            <summary>
            The transparency value of the first gradient point measured in percentage, ranging from 0% to 100% (both inclusive).
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLComment.GradientToTransparency">
            <summary>
            The transparency value of the last gradient point measured in percentage, ranging from 0% to 100% (both inclusive).
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLComment.LineColor">
            <summary>
            Set null for automatic color.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLComment.LineWeight">
            <summary>
            Line weight in points.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLComment.LineStyle">
            <summary>
            Line style.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLComment.HorizontalTextAlignment">
            <summary>
            Horizontal text alignment.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLComment.VerticalTextAlignment">
            <summary>
            Vertical text alignment.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLComment.Orientation">
            <summary>
            Comment text orientation.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLComment.TextDirection">
            <summary>
            Comment text direction.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLComment.HasShadow">
            <summary>
            Specifies whether the comment box has a shadow.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLComment.ShadowColor">
            <summary>
            Specifies the color of the comment box's shadow.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLComment.Visible">
            <summary>
            Specifies whether the comment is visible.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLDataFieldFunctionValues">
            <summary>
            Data field function values.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLDataFieldFunctionValues.Average">
            <summary>
            Average
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLDataFieldFunctionValues.Count">
            <summary>
            Count non-empty cells
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLDataFieldFunctionValues.CountNumbers">
            <summary>
            Count numbers
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLDataFieldFunctionValues.Maximum">
            <summary>
            Maximum
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLDataFieldFunctionValues.Minimum">
            <summary>
            Minimum
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLDataFieldFunctionValues.Product">
            <summary>
            Product
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLDataFieldFunctionValues.StandardDeviation">
            <summary>
            Standard deviation
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLDataFieldFunctionValues.Sum">
            <summary>
            Sum
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLDataFieldFunctionValues.Variance">
            <summary>
            Variance
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTable.IsDataSourceTable">
            <summary>
            If true, then SheetTableName is a table name. Otherwise it's a worksheet name.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLDataBarOptions">
            <summary>
            Conditional formatting options for data bars.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLDataBarOptions.#ctor">
            <summary>
            Initializes an instance of SLDataBarOptions.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLDataBarOptions.#ctor(SpreadsheetLight.SLConditionalFormatDataBarValues)">
            <summary>
            Initializes an instance of SLDataBarOptions.
            </summary>
            <param name="DataBar">Built-in data bar type.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDataBarOptions.#ctor(System.Boolean)">
            <summary>
            Initializes an instance of SLDataBarOptions.
            </summary>
            <param name="Is2010Default">True if Excel 2010 specific data bar is to be used. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDataBarOptions.#ctor(SpreadsheetLight.SLConditionalFormatDataBarValues,System.Boolean)">
            <summary>
            Initializes an instance of SLDataBarOptions.
            </summary>
            <param name="DataBar">Built-in data bar type.</param>
            <param name="Is2010Default">True if Excel 2010 specific data bar is to be used. False otherwise.</param>
        </member>
        <member name="P:SpreadsheetLight.SLDataBarOptions.MinimumType">
            <summary>
            The conditional format type for the minimum value. If "Automatic" is used, Excel 2010 specific data bars will be used.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDataBarOptions.MinimumValue">
            <summary>
            The minimum value.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDataBarOptions.MaximumType">
            <summary>
            The conditional format type for the maximum value. If "Automatic" is used, Excel 2010 specific data bars will be used.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDataBarOptions.MaximumValue">
            <summary>
            The maximum value.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDataBarOptions.FillColor">
            <summary>
            The fill color.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDataBarOptions.BorderColor">
            <summary>
            The border color.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDataBarOptions.NegativeFillColor">
            <summary>
            The fill color for negative values.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDataBarOptions.NegativeBorderColor">
            <summary>
            The border color for negative values.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDataBarOptions.AxisColor">
            <summary>
            The axis color.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDataBarOptions.MinLength">
            <summary>
            The minimum length of the data bar as a percentage of the cell width. The default value is 10.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDataBarOptions.MaxLength">
            <summary>
            The maximum length of the data bar as a percentage of the cell width. The default value is 90. It is recommended to keep this to a maximum (haha) of 100.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDataBarOptions.ShowBarOnly">
            <summary>
            Specifies if only the data bar is shown. Set to false to show both data bar and value.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDataBarOptions.Border">
            <summary>
            Specifies if there's a border. This is an Excel 2010 specific feature.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDataBarOptions.Gradient">
            <summary>
            Specifies if the fill color has a gradient. This is an Excel 2010 specific feature.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDataBarOptions.Direction">
            <summary>
            The bar direction. This is an Excel 2010 specific feature.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDataBarOptions.NegativeBarColorSameAsPositive">
            <summary>
            Specifies if the fill color for negative values is the same as the positive one. This is an Excel 2010 specific feature.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDataBarOptions.NegativeBarBorderColorSameAsPositive">
            <summary>
            Specifies if the border color for negative values is the same as the positive one. This is an Excel 2010 specific feature.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDataBarOptions.AxisPosition">
            <summary>
            Specifies the axis position. This is an Excel 2010 specific feature.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLFiveIconSetOptions">
            <summary>
            Conditional formatting options for five icon sets.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLFiveIconSetOptions.#ctor(SpreadsheetLight.SLFiveIconSetValues)">
            <summary>
            Initializes an instance of SLFiveIconSetOptions.
            </summary>
            <param name="IconSetType">The type of icon set.</param>
        </member>
        <member name="P:SpreadsheetLight.SLFiveIconSetOptions.ReverseIconOrder">
            <summary>
            Specifies if the icons in the set are reversed.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFiveIconSetOptions.ShowIconOnly">
            <summary>
            Specifies if only the icon is shown. Set to false to show both icon and value.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFiveIconSetOptions.Icon1">
            <summary>
            The 1st icon.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFiveIconSetOptions.Icon2">
            <summary>
            The 2nd icon.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFiveIconSetOptions.Icon3">
            <summary>
            The 3rd icon.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFiveIconSetOptions.Icon4">
            <summary>
            The 4th icon.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFiveIconSetOptions.Icon5">
            <summary>
            The 5th icon.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFiveIconSetOptions.GreaterThanOrEqual2">
            <summary>
            Specifies if values are to be greater than or equal to the 2nd range value. Set to false if values are to be strictly greater than.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFiveIconSetOptions.GreaterThanOrEqual3">
            <summary>
            Specifies if values are to be greater than or equal to the 3rd range value. Set to false if values are to be strictly greater than.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFiveIconSetOptions.GreaterThanOrEqual4">
            <summary>
            Specifies if values are to be greater than or equal to the 4th range value. Set to false if values are to be strictly greater than.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFiveIconSetOptions.GreaterThanOrEqual5">
            <summary>
            Specifies if values are to be greater than or equal to the 5th range value. Set to false if values are to be strictly greater than.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFiveIconSetOptions.Value2">
            <summary>
            The 2nd range value.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFiveIconSetOptions.Value3">
            <summary>
            The 3rd range value.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFiveIconSetOptions.Value4">
            <summary>
            The 4th range value.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFiveIconSetOptions.Value5">
            <summary>
            The 5th range value.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFiveIconSetOptions.Type2">
            <summary>
            The conditional format type for the 2nd range value.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFiveIconSetOptions.Type3">
            <summary>
            The conditional format type for the 3rd range value.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFiveIconSetOptions.Type4">
            <summary>
            The conditional format type for the 4th range value.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFiveIconSetOptions.Type5">
            <summary>
            The conditional format type for the 5th range value.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Drawing.SLSoftEdge">
            <summary>
            Encapsulates properties and methods for specifying soft edges.
            This simulates the DocumentFormat.OpenXml.Drawing.SoftEdge class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLSoftEdge.SetNoSoftEdge">
            <summary>
            Set no soft edge.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLSoftEdge.Radius">
            <summary>
            Also known as "Size", and is measured in points. The suggested range is 0 pt to 100 pt (both inclusive).
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLMajorGridlines">
            <summary>
            Encapsulates properties and methods for setting major gridlines in charts.
            This simulates the DocumentFormat.OpenXml.Drawing.Charts.MajorGridlines class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLMajorGridlines.ClearShapeProperties">
            <summary>
            Clear all styling shape properties. Use this if you want to start styling from a clean slate.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLMajorGridlines.Line">
            <summary>
            Line properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLMajorGridlines.Shadow">
            <summary>
            Shadow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLMajorGridlines.Glow">
            <summary>
            Glow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLMajorGridlines.SoftEdge">
            <summary>
            Soft edge properties.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLDataLabelOptions">
            <summary>
            Encapsulates properties and methods for setting data label options for charts.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLDataLabelOptions.SetLabelText(System.String)">
            <summary>
            Set custom label text.
            </summary>
            <param name="Text">The custom text.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLDataLabelOptions.SetLabelText(SpreadsheetLight.SLRstType)">
            <summary>
            Set custom label text.
            </summary>
            <param name="RichText">The custom text in rich text format.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLDataLabelOptions.ResetLabelText">
            <summary>
            Reset the label text. This removes any custom label text.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLColor">
            <summary>
            Encapsulates properties and methods for setting a color. This includes using theme colors. This simulates the DocumentFormat.OpenXml.Spreadsheet.Color class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLColor.IsEmpty">
            <summary>
            Whether the color value is empty.
            </summary>
            <returns>True if the color value is empty. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLColor.SetThemeColor(SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set a color using a theme color.
            </summary>
            <param name="ThemeColorIndex">The theme color to be used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLColor.SetThemeColor(SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set a color using a theme color, modifying the theme color with a tint value.
            </summary>
            <param name="ThemeColorIndex">The theme color to be used.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="P:SpreadsheetLight.SLColor.Color">
            <summary>
            The color value.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLMergeCell">
            <summary>
            Encapsulates properties and methods for representing a merged cell range. This simulates the DocumentFormat.OpenXml.Spreadsheet.MergeCell class.
            The actual merging of cells is done by a SLDocument function. This class is for supporting purposes.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLMergeCell.#ctor">
            <summary>
            Initializes an instance of SLMergeCell.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLMergeCell.FromIndices(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Form a SLMergeCell given a corner cell of the to-be-merged rectangle of cells, and the opposite corner cell. For example, the top-left corner cell and the bottom-right corner cell. Or the bottom-left corner cell and the top-right corner cell.
            </summary>
            <param name="StartRowIndex">The row index of the corner cell.</param>
            <param name="StartColumnIndex">The column index of the corner cell.</param>
            <param name="EndRowIndex">The row index of the opposite corner cell.</param>
            <param name="EndColumnIndex">The column index of the opposite corner cell.</param>
        </member>
        <member name="M:SpreadsheetLight.SLMergeCell.FromMergeCell(DocumentFormat.OpenXml.Spreadsheet.MergeCell)">
            <summary>
            Form a SLMergeCell from a DocumentFormat.OpenXml.Spreadsheet.MergeCell class.
            </summary>
            <param name="mc">The source DocumentFormat.OpenXml.Spreadsheet.MergeCell class.</param>
        </member>
        <member name="M:SpreadsheetLight.SLMergeCell.ToMergeCell">
            <summary>
            Form a DocumentFormat.OpenXml.Spreadsheet.MergeCell class from this SLMergeCell class.
            </summary>
            <returns>A DocumentFormat.OpenXml.Spreadsheet.MergeCell class.</returns>
        </member>
        <member name="P:SpreadsheetLight.SLMergeCell.StartRowIndex">
            <summary>
            The row index of the top row in the merged cell range. This is read-only.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLMergeCell.StartColumnIndex">
            <summary>
            The column index of the left column in the merged cell range. This is read-only.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLMergeCell.EndRowIndex">
            <summary>
            The row index of the bottom row in the merged cell range. This is read-only.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLMergeCell.EndColumnIndex">
            <summary>
            The column index of the right column in the merged cell range. This is read-only.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLMergeCell.IsValid">
            <summary>
            Indicates if the merged cell range is valid. This is read-only.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLUpBars">
            <summary>
            Encapsulates properties and methods for up bars.
            This simulates the DocumentFormat.OpenXml.Drawing.Charts.UpBars class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLUpBars.ClearShapeProperties">
            <summary>
            Clear all styling shape properties. Use this if you want to start styling from a clean slate.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLUpBars.Fill">
            <summary>
            Fill properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLUpBars.Border">
            <summary>
            Border properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLUpBars.Shadow">
            <summary>
            Shadow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLUpBars.Glow">
            <summary>
            Glow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLUpBars.SoftEdge">
            <summary>
            Soft edge properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLUpBars.Format3D">
            <summary>
            3D format properties.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLStockChartOptions">
            <summary>
            Chart customization options for stock charts.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLStockChartOptions.#ctor">
            <summary>
            Initializes an instance of SLStockChartOptions. It is recommended to use SLChart.CreateStockChartOptions().
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLStockChartOptions.GapWidth">
            <summary>
            The gap width between columns as a percentage of column width, ranging between 0% and 500% (both inclusive). The default is 150%.
            This only applies when there's Volume data.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLStockChartOptions.Overlap">
            <summary>
            The amount of overlapping for columns, ranging from -100 to 100 (both inclusive). The default is 0.
            This only applies when there's Volume data.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLStockChartOptions.Fill">
            <summary>
            Fill properties for Volume data.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLStockChartOptions.Border">
            <summary>
            Border properties for Volume data.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLStockChartOptions.Shadow">
            <summary>
            Shadow properties for Volume data.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLStockChartOptions.Glow">
            <summary>
            Glow properties for Volume data.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLStockChartOptions.SoftEdge">
            <summary>
            Soft edge properties for Volume data.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLStockChartOptions.Format3D">
            <summary>
            3D format properties for Volume data.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLStockChartOptions.HasDropLines">
            <summary>
            Indicates if the stock chart has drop lines.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLStockChartOptions.DropLines">
            <summary>
            Drop lines properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLStockChartOptions.HasHighLowLines">
            <summary>
            Indicates if the stock chart has high-low lines.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLStockChartOptions.HighLowLines">
            <summary>
            High-low lines properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLStockChartOptions.HasUpDownBars">
            <summary>
            Indicates if the stock chart has up-down bars.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLStockChartOptions.UpDownBars">
            <summary>
            Up-down bars properties.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLCreateChartOptions">
            <summary>
            General chart customization options on chart creation.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLCreateChartOptions.#ctor">
            <summary>
            Initializes an instance of SLCreateChartOptions.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLCreateChartOptions.RowsAsDataSeries">
            <summary>
            True if rows contain the data series. False if columns contain the data series.
            Set to null if SpreadsheetLight is to determine data series orientation.
            If the number of columns in a given cell range is more than or equal to the
            number of rows, then it's decided that rows contain data series (else it's columns).
            The default value is null.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLCreateChartOptions.ShowHiddenData">
            <summary>
            True if hidden data is used in the chart. False otherwise.
            The default value is false.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLCreateChartOptions.IsStylish">
            <summary>
            True to use default chart styling from latest version of Excel
            (but no guarantees on conformity or Excel version). False otherwise.
            The default value is true.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLBackWall">
            <summary>
            Encapsulates properties and methods for setting the back wall of 3D charts.
            This simulates the DocumentFormat.OpenXml.Drawing.Charts.BackWall class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLBackWall.ClearShapeProperties">
            <summary>
            Clear all styling shape properties. Use this if you want to start styling from a clean slate.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLBackWall.Fill">
            <summary>
            Fill properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLBackWall.Border">
            <summary>
            Border properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLBackWall.Shadow">
            <summary>
            Shadow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLBackWall.Glow">
            <summary>
            Glow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLBackWall.SoftEdge">
            <summary>
            Soft edge properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLBackWall.Format3D">
            <summary>
            3D format properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLBackWall.Rotation3D">
            <summary>
            3D rotation properties.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLProtection">
            <summary>
            Encapsulates properties and methods for cell content protection. The properties don't take effect unless the worksheet is protected. This simulates the DocumentFormat.OpenXml.Spreadsheet.Protection class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLProtection.#ctor">
            <summary>
            Initializes an instance of SLProtection.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLProtection.Locked">
            <summary>
            Specifies if the cell is locked. If locked and the worksheet is protected, then the worksheet's protection options are ignored.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLProtection.Hidden">
            <summary>
            Specifies if the cell is hidden. If hidden and the worksheet is protected, then cell contents are hidden and only cell values are displayed. For example, the cell formula is hidden, but the value of the cell formula is still displayed.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLGradientShadingStyleValues">
            <summary>
            Specifies gradient shading style options.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLGradientShadingStyleValues.Horizontal1">
            <summary>
            Gradient with color 1 at the top to color 2 at the bottom.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLGradientShadingStyleValues.Horizontal2">
            <summary>
            Gradient with color 2 at the top to color 1 at the bottom.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLGradientShadingStyleValues.Horizontal3">
            <summary>
            Gradient with color 1 at the top to color 2 in the middle, to color 1 at the bottom.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLGradientShadingStyleValues.Vertical1">
            <summary>
            Gradient with color 1 on the left to color 2 on the right.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLGradientShadingStyleValues.Vertical2">
            <summary>
            Gradient with color 2 on the left to color 1 on the right.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLGradientShadingStyleValues.Vertical3">
            <summary>
            Gradient with color 1 on the left to color 2 in the middle, to color 1 on the right.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLGradientShadingStyleValues.DiagonalUp1">
            <summary>
            Gradient with color 1 at top-left corner to color 2 at bottom-right corner.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLGradientShadingStyleValues.DiagonalUp2">
            <summary>
            Gradient with color 2 at top-left corner to color 1 at the bottom-right corner.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLGradientShadingStyleValues.DiagonalUp3">
            <summary>
            Gradient with color 1 at top-left corner to color 2 in the middle, to color 1 at the bottom-right corner.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLGradientShadingStyleValues.DiagonalDown1">
            <summary>
            Gradient with color 1 at the top-right corner to color 2 at the bottom-left corner.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLGradientShadingStyleValues.DiagonalDown2">
            <summary>
            Gradient with color 2 at the top-right corner to color 1 at the bottom-left corner.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLGradientShadingStyleValues.DiagonalDown3">
            <summary>
            Gradient with color 1 at the top-right corner to color 2 in the middle, to color 1 at the bottom-left corner.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLGradientShadingStyleValues.Corner1">
            <summary>
            Gradient with color 1 at the top-left corner, and color 2 at the top-right, bottom-left and bottom-right corners.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLGradientShadingStyleValues.Corner2">
            <summary>
            Gradient with color 1 at the top-right corner, and color 2 at the top-left, bottom-left and bottom-right corners.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLGradientShadingStyleValues.Corner3">
            <summary>
            Gradient with color 1 at the bottom-left corner, and color 2 at the top-left, top-right and bottom-right corners.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLGradientShadingStyleValues.Corner4">
            <summary>
            Gradient with color 1 at the bottom-right corner, and color 2 at the top-left, top-right and bottom-left corners.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLGradientShadingStyleValues.FromCenter">
            <summary>
            Gradient with color 1 in the center, and color 2 at the four corners.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLFill">
            <summary>
            Encapsulates properties and methods for specifying fill options, such as foreground and background colors.
            This simulates the DocumentFormat.OpenXml.Spreadsheet.Fill class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLFill.#ctor">
            <summary>
            Initializes an instance of SLFill. It is recommended to use CreateFill() of the SLDocument class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLFill.SetPatternForegroundColor(System.Drawing.Color)">
            <summary>
            Set the foreground color.
            </summary>
            <param name="Color">The color to be used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLFill.SetPatternForegroundColor(SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set the foreground color with one of the theme colors.
            </summary>
            <param name="ColorTheme">The theme color to be used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLFill.SetPatternForegroundColor(SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set the foreground color with one of the theme colors, modifying the theme color with a tint value.
            </summary>
            <param name="ColorTheme">The theme color to be used.</param>
            <param name="ColorTint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLFill.SetPatternBackgroundColor(System.Drawing.Color)">
            <summary>
            Set the background color.
            </summary>
            <param name="Color">The color to be used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLFill.SetPatternBackgroundColor(SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set the background color with a theme color.
            </summary>
            <param name="ColorTheme">The theme color to be used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLFill.SetPatternBackgroundColor(SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set the background color with one of the theme colors, modifying the theme color with a tint value.
            </summary>
            <param name="ColorTheme">The theme color to be used.</param>
            <param name="ColorTint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLFill.SetPatternType(DocumentFormat.OpenXml.Spreadsheet.PatternValues)">
            <summary>
            Set the pattern type.
            </summary>
            <param name="PatternType">The pattern type. Default value is None.</param>
        </member>
        <member name="M:SpreadsheetLight.SLFill.SetPattern(DocumentFormat.OpenXml.Spreadsheet.PatternValues,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Set the pattern type, foreground color and background color of the fill pattern.
            </summary>
            <param name="PatternType">The pattern type. Default value is None.</param>
            <param name="ForegroundColor">The color to be used for the foreground.</param>
            <param name="BackgroundColor">The color to be used for the background.</param>
        </member>
        <member name="M:SpreadsheetLight.SLFill.SetPattern(DocumentFormat.OpenXml.Spreadsheet.PatternValues,System.Drawing.Color,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set the pattern type, foreground color and background color of the fill pattern.
            </summary>
            <param name="PatternType">The pattern type. Default value is None.</param>
            <param name="ForegroundColor">The color to be used for the foreground.</param>
            <param name="BackgroundColorTheme">The theme color to be used for the background.</param>
        </member>
        <member name="M:SpreadsheetLight.SLFill.SetPattern(DocumentFormat.OpenXml.Spreadsheet.PatternValues,System.Drawing.Color,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set the pattern type, foreground color and background color of the fill pattern.
            </summary>
            <param name="PatternType">The pattern type. Default value is None.</param>
            <param name="ForegroundColor">The color to be used for the foreground.</param>
            <param name="BackgroundColorTheme">The theme color to be used for the background.</param>
            <param name="BackgroundColorTint">The tint applied to the background theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLFill.SetPattern(DocumentFormat.OpenXml.Spreadsheet.PatternValues,SpreadsheetLight.SLThemeColorIndexValues,System.Drawing.Color)">
            <summary>
            Set the pattern type, foreground color and background color of the fill pattern.
            </summary>
            <param name="PatternType">The pattern type. Default value is None.</param>
            <param name="ForegroundColorTheme">The theme color to be used for the foreground.</param>
            <param name="BackgroundColor">The color to be used for the background.</param>
        </member>
        <member name="M:SpreadsheetLight.SLFill.SetPattern(DocumentFormat.OpenXml.Spreadsheet.PatternValues,SpreadsheetLight.SLThemeColorIndexValues,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set the pattern type, foreground color and background color of the fill pattern.
            </summary>
            <param name="PatternType">The pattern type. Default value is None.</param>
            <param name="ForegroundColorTheme">The theme color to be used for the foreground.</param>
            <param name="BackgroundColorTheme">The theme color to be used for the background.</param>
        </member>
        <member name="M:SpreadsheetLight.SLFill.SetPattern(DocumentFormat.OpenXml.Spreadsheet.PatternValues,SpreadsheetLight.SLThemeColorIndexValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set the pattern type, foreground color and background color of the fill pattern.
            </summary>
            <param name="PatternType">The pattern type. Default value is None.</param>
            <param name="ForegroundColorTheme">The theme color to be used for the foreground.</param>
            <param name="BackgroundColorTheme">The theme color to be used for the background.</param>
            <param name="BackgroundColorTint">The tint applied to the background theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLFill.SetPattern(DocumentFormat.OpenXml.Spreadsheet.PatternValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double,System.Drawing.Color)">
            <summary>
            Set the pattern type, foreground color and background color of the fill pattern.
            </summary>
            <param name="PatternType">The pattern type. Default value is None.</param>
            <param name="ForegroundColorTheme">The theme color to be used for the foreground.</param>
            <param name="ForegroundColorTint">The tint applied to the foreground theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="BackgroundColor">The color to be used for the background.</param>
        </member>
        <member name="M:SpreadsheetLight.SLFill.SetPattern(DocumentFormat.OpenXml.Spreadsheet.PatternValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set the pattern type, foreground color and background color of the fill pattern.
            </summary>
            <param name="PatternType">The pattern type. Default value is None.</param>
            <param name="ForegroundColorTheme">The theme color to be used for the foreground.</param>
            <param name="ForegroundColorTint">The tint applied to the foreground theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="BackgroundColorTheme">The theme color to be used for the background.</param>
        </member>
        <member name="M:SpreadsheetLight.SLFill.SetPattern(DocumentFormat.OpenXml.Spreadsheet.PatternValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set the pattern type, foreground color and background color of the fill pattern.
            </summary>
            <param name="PatternType">The pattern type. Default value is None.</param>
            <param name="ForegroundColorTheme">The theme color to be used for the foreground.</param>
            <param name="ForegroundColorTint">The tint applied to the foreground theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="BackgroundColorTheme">The theme color to be used for the background.</param>
            <param name="BackgroundColorTint">The tint applied to the background theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLFill.SetGradient(SpreadsheetLight.SLGradientShadingStyleValues,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Set a gradient fill given the shading style and 2 colors.
            </summary>
            <param name="ShadingStyle">The gradient shading style.</param>
            <param name="Color1">The first color.</param>
            <param name="Color2">The second color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLFill.SetGradient(SpreadsheetLight.SLGradientShadingStyleValues,System.Drawing.Color,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set a gradient fill given the shading style and 2 colors.
            </summary>
            <param name="ShadingStyle">The gradient shading style.</param>
            <param name="Color1">The first color.</param>
            <param name="Color2Theme">The second color as one of the theme colors.</param>
        </member>
        <member name="M:SpreadsheetLight.SLFill.SetGradient(SpreadsheetLight.SLGradientShadingStyleValues,System.Drawing.Color,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set a gradient fill given the shading style and 2 colors.
            </summary>
            <param name="ShadingStyle">The gradient shading style.</param>
            <param name="Color1">The first color.</param>
            <param name="Color2Theme">The second color as one of the theme colors.</param>
            <param name="Color2Tint">The tint applied to the second theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLFill.SetGradient(SpreadsheetLight.SLGradientShadingStyleValues,SpreadsheetLight.SLThemeColorIndexValues,System.Drawing.Color)">
            <summary>
            Set a gradient fill given the shading style and 2 colors.
            </summary>
            <param name="ShadingStyle">The gradient shading style.</param>
            <param name="Color1Theme">The first color as one of the theme colors.</param>
            <param name="Color2">The second color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLFill.SetGradient(SpreadsheetLight.SLGradientShadingStyleValues,SpreadsheetLight.SLThemeColorIndexValues,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set a gradient fill given the shading style and 2 colors.
            </summary>
            <param name="ShadingStyle">The gradient shading style.</param>
            <param name="Color1Theme">The first color as one of the theme colors.</param>
            <param name="Color2Theme">The second color as one of the theme colors.</param>
        </member>
        <member name="M:SpreadsheetLight.SLFill.SetGradient(SpreadsheetLight.SLGradientShadingStyleValues,SpreadsheetLight.SLThemeColorIndexValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set a gradient fill given the shading style and 2 colors.
            </summary>
            <param name="ShadingStyle">The gradient shading style.</param>
            <param name="Color1Theme">The first color as one of the theme colors.</param>
            <param name="Color2Theme">The second color as one of the theme colors.</param>
            <param name="Color2Tint">The tint applied to the second theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLFill.SetGradient(SpreadsheetLight.SLGradientShadingStyleValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double,System.Drawing.Color)">
            <summary>
            Set a gradient fill given the shading style and 2 colors.
            </summary>
            <param name="ShadingStyle">The gradient shading style.</param>
            <param name="Color1Theme">The first color as one of the theme colors.</param>
            <param name="Color1Tint">The tint applied to the first theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="Color2">The second color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLFill.SetGradient(SpreadsheetLight.SLGradientShadingStyleValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set a gradient fill given the shading style and 2 colors.
            </summary>
            <param name="ShadingStyle">The gradient shading style.</param>
            <param name="Color1Theme">The first color as one of the theme colors.</param>
            <param name="Color1Tint">The tint applied to the first theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="Color2Theme">The second color as one of the theme colors.</param>
        </member>
        <member name="M:SpreadsheetLight.SLFill.SetGradient(SpreadsheetLight.SLGradientShadingStyleValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set a gradient fill given the shading style and 2 colors.
            </summary>
            <param name="ShadingStyle">The gradient shading style.</param>
            <param name="Color1Theme">The first color as one of the theme colors.</param>
            <param name="Color1Tint">The tint applied to the first theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="Color2Theme">The second color as one of the theme colors.</param>
            <param name="Color2Tint">The tint applied to the second theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLFill.SetCustomGradient(DocumentFormat.OpenXml.Spreadsheet.GradientValues,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Set a custom gradient fill. Used in conjunction with AppendGradientStop().
            </summary>
            <param name="GradientType">The gradient fill type. Default value is Linear.</param>
            <param name="Degree">The angle in the direction from which the first color starts. The end color is at 180 degrees from this angle. 0 degrees means start from left, 90 degrees from the top, 180 degrees from the right and 270 degrees from below.</param>
            <param name="Left">Specifies position of the first color at the left edge, ranging from 0.0 to 1.0. A 0.0 means the position is on the left edge of the cell, and 1.0 means it's on the right edge.</param>
            <param name="Right">Specifies position of the first color at the right edge, ranging from 0.0 to 1.0. A 0.0 means the position is on the left edge of the cell, and 1.0 means it's on the right edge.</param>
            <param name="Top">Specifies position of the first color at the top edge, ranging from 0.0 to 1.0. A 0.0 means the position is on the top edge of the cell, and 1.0 means it's on the bottom edge.</param>
            <param name="Bottom">Specifies position of the first color at the bottom edge, ranging 0.0 to 1.0. A 0.0 means the position is on the top edge of the cell, and 1.0 means it's on the bottom edge.</param>
        </member>
        <member name="M:SpreadsheetLight.SLFill.AppendGradientStop(System.Double,System.Drawing.Color)">
            <summary>
            Set a gradient stop given a position and a color. Used in conjunction with SetCustomGradient().
            </summary>
            <param name="Position">Specifies position of the color, ranging from 0.0 to 1.0.</param>
            <param name="Color">The color to be used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLFill.AppendGradientStop(System.Double,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set a gradient stop given a position and a color. Used in conjunction with SetCustomGradient().
            </summary>
            <param name="Position">Specifies position of the color, ranging from 0.0 to 1.0.</param>
            <param name="ColorTheme">The theme color to be used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLFill.AppendGradientStop(System.Double,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set a gradient stop given a position and a color. Used in conjunction with SetCustomGradient().
            </summary>
            <param name="Position">Specifies position of the color, ranging from 0.0 to 1.0.</param>
            <param name="ColorTheme">The theme color to be used.</param>
            <param name="ColorTint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLFill.ClearGradientStops">
            <summary>
            Clear all existing gradient stops.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFill.PatternForegroundColor">
            <summary>
            Color of the foreground. This is read-only. Use one of the methods to set the color.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFill.PatternBackgroundColor">
            <summary>
            Color of the background. This is read-only. Use one of the methods to set the color.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFill.PatternType">
            <summary>
            Pattern type of the fill. This is read-only. Use one of the methods to set the pattern type.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFill.GradientType">
            <summary>
            Gradient type of the fill. This is read-only. Use one of the methods to set the gradient type.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFill.GradientDegree">
            <summary>
            The angle in the direction from which the first color starts. The end color is at 180 degrees from this angle. 0 degrees means start from left, 90 degrees from the top, 180 degrees from the right and 270 degrees from below.
            This is read-only. Use one of the methods to set the angle.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFill.GradientLeft">
            <summary>
            Specifies position of the first color at the left edge, ranging from 0.0 to 1.0. A 0.0 means the position is on the left edge of the cell, and 1.0 means it's on the right edge.
            This is read-only. Use one of the methods to set the position.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFill.GradientRight">
            <summary>
            Specifies position of the first color at the right edge, ranging from 0.0 to 1.0. A 0.0 means the position is on the left edge of the cell, and 1.0 means it's on the right edge.
            This is read-only. Use one of the methods to set the position.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFill.GradientTop">
            <summary>
            Specifies position of the first color at the top edge, ranging from 0.0 to 1.0. A 0.0 means the position is on the top edge of the cell, and 1.0 means it's on the bottom edge.
            This is read-only. Use one of the methods to set the position.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFill.GradientBottom">
            <summary>
            Specifies position of the first color at the bottom edge, ranging 0.0 to 1.0. A 0.0 means the position is on the top edge of the cell, and 1.0 means it's on the bottom edge.
            This is read-only. Use one of the methods to set the position.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLPatternFill">
            <summary>
            Encapsulates properties and methods for a pattern fill. This simulates the DocumentFormat.OpenXml.Spreadsheet.PatternFill class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLPatternFill.#ctor">
            <summary>
            Initializes an instance of SLPatternFill. It is recommended to use CreatePatternFill() of the SLDocument class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLPatternFill.SetForegroundThemeColor(SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set the foreground color with a theme color.
            </summary>
            <param name="ThemeColorIndex">The theme color to be used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPatternFill.SetForegroundThemeColor(SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set the foreground color with a theme color.
            </summary>
            <param name="ThemeColorIndex">The theme color to be used.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPatternFill.SetBackgroundThemeColor(SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set the background color with a theme color.
            </summary>
            <param name="ThemeColorIndex">The theme color to be used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPatternFill.SetBackgroundThemeColor(SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set the background color with a theme color.
            </summary>
            <param name="ThemeColorIndex">The theme color to be used.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPatternFill.FromPatternFill(DocumentFormat.OpenXml.Spreadsheet.PatternFill)">
            <summary>
            Form SLPatternFill from DocumentFormat.OpenXml.Spreadsheet.PatternFill class.
            </summary>
            <param name="patternFill">The source PatternFill class.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPatternFill.ToPatternFill">
            <summary>
            Form a DocumentFormat.OpenXml.Spreadsheet.PatternFill class from SLPatternFill.
            </summary>
            <returns>A DocumentFormat.OpenXml.Spreadsheet.PatternFill class with the properties of this SLPatternFill class.</returns>
        </member>
        <member name="P:SpreadsheetLight.SLPatternFill.ForegroundColor">
            <summary>
            The foreground color.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPatternFill.BackgroundColor">
            <summary>
            The background color.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPatternFill.PatternType">
            <summary>
            The pattern type. Default value is None.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLGradientFill">
            <summary>
            Encapsulates properties and methods for gradient fills. This simulates the DocumentFormat.OpenXml.Spreadsheet.GradientFill class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLGradientFill.#ctor">
            <summary>
            Initializes an instance of SLGradientFill. It is recommended to use CreateGradientFill() of the SLDocument class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLGradientFill.SetGradientFill(SpreadsheetLight.SLGradientShadingStyleValues,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Set a gradient fill given the shading style and 2 colors.
            </summary>
            <param name="ShadingStyle">The gradient shading style.</param>
            <param name="Color1">The first color.</param>
            <param name="Color2">The second color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLGradientFill.SetGradientFill(SpreadsheetLight.SLGradientShadingStyleValues,System.Drawing.Color,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set a gradient fill given the shading style and 2 colors.
            </summary>
            <param name="ShadingStyle">The gradient shading style.</param>
            <param name="Color1">The first color.</param>
            <param name="Color2Theme">The second color as one of the theme colors.</param>
        </member>
        <member name="M:SpreadsheetLight.SLGradientFill.SetGradientFill(SpreadsheetLight.SLGradientShadingStyleValues,System.Drawing.Color,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set a gradient fill given the shading style and 2 colors.
            </summary>
            <param name="ShadingStyle">The gradient shading style.</param>
            <param name="Color1">The first color.</param>
            <param name="Color2Theme">The second color as one of the theme colors.</param>
            <param name="Color2Tint">The tint applied to the second theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLGradientFill.SetGradientFill(SpreadsheetLight.SLGradientShadingStyleValues,SpreadsheetLight.SLThemeColorIndexValues,System.Drawing.Color)">
            <summary>
            Set a gradient fill given the shading style and 2 colors.
            </summary>
            <param name="ShadingStyle">The gradient shading style.</param>
            <param name="Color1Theme">The first color as one of the theme colors.</param>
            <param name="Color2">The second color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLGradientFill.SetGradientFill(SpreadsheetLight.SLGradientShadingStyleValues,SpreadsheetLight.SLThemeColorIndexValues,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set a gradient fill given the shading style and 2 colors.
            </summary>
            <param name="ShadingStyle">The gradient shading style.</param>
            <param name="Color1Theme">The first color as one of the theme colors.</param>
            <param name="Color2Theme">The second color as one of the theme colors.</param>
        </member>
        <member name="M:SpreadsheetLight.SLGradientFill.SetGradientFill(SpreadsheetLight.SLGradientShadingStyleValues,SpreadsheetLight.SLThemeColorIndexValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set a gradient fill given the shading style and 2 colors.
            </summary>
            <param name="ShadingStyle">The gradient shading style.</param>
            <param name="Color1Theme">The first color as one of the theme colors.</param>
            <param name="Color2Theme">The second color as one of the theme colors.</param>
            <param name="Color2Tint">The tint applied to the second theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLGradientFill.SetGradientFill(SpreadsheetLight.SLGradientShadingStyleValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double,System.Drawing.Color)">
            <summary>
            Set a gradient fill given the shading style and 2 colors.
            </summary>
            <param name="ShadingStyle">The gradient shading style.</param>
            <param name="Color1Theme">The first color as one of the theme colors.</param>
            <param name="Color1Tint">The tint applied to the first theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="Color2">The second color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLGradientFill.SetGradientFill(SpreadsheetLight.SLGradientShadingStyleValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set a gradient fill given the shading style and 2 colors.
            </summary>
            <param name="ShadingStyle">The gradient shading style.</param>
            <param name="Color1Theme">The first color as one of the theme colors.</param>
            <param name="Color1Tint">The tint applied to the first theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="Color2Theme">The second color as one of the theme colors.</param>
        </member>
        <member name="M:SpreadsheetLight.SLGradientFill.SetGradientFill(SpreadsheetLight.SLGradientShadingStyleValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set a gradient fill given the shading style and 2 colors.
            </summary>
            <param name="ShadingStyle">The gradient shading style.</param>
            <param name="Color1Theme">The first color as one of the theme colors.</param>
            <param name="Color1Tint">The tint applied to the first theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="Color2Theme">The second color as one of the theme colors.</param>
            <param name="Color2Tint">The tint applied to the second theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLGradientFill.ClearGradientStops">
            <summary>
            Clear all existing gradient stops.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLGradientFill.SetCustomGradient(DocumentFormat.OpenXml.Spreadsheet.GradientValues,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Set a custom gradient fill. Used in conjunction with AppendGradientStop().
            </summary>
            <param name="GradientType">The gradient fill type. Default value is Linear.</param>
            <param name="Degree">The angle in the direction from which the first color starts. The end color is at 180 degrees from this angle. 0 degrees means start from left, 90 degrees from the top, 180 degrees from the right and 270 degrees from below.</param>
            <param name="Left">Specifies position of the first color at the left edge, ranging from 0.0 to 1.0. A 0.0 means the position is on the left edge of the cell, and 1.0 means it's on the right edge.</param>
            <param name="Right">Specifies position of the first color at the right edge, ranging from 0.0 to 1.0. A 0.0 means the position is on the left edge of the cell, and 1.0 means it's on the right edge.</param>
            <param name="Top">Specifies position of the first color at the top edge, ranging from 0.0 to 1.0. A 0.0 means the position is on the top edge of the cell, and 1.0 means it's on the bottom edge.</param>
            <param name="Bottom">Specifies position of the first color at the bottom edge, ranging 0.0 to 1.0. A 0.0 means the position is on the top edge of the cell, and 1.0 means it's on the bottom edge.</param>
        </member>
        <member name="M:SpreadsheetLight.SLGradientFill.AppendGradientStop(System.Double,System.Drawing.Color)">
            <summary>
            Set a gradient stop given a position and a color. Used in conjunction with SetCustomGradient().
            </summary>
            <param name="Position">Specifies position of the color, ranging from 0.0 to 1.0.</param>
            <param name="Color">The color to be used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLGradientFill.AppendGradientStop(System.Double,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set a gradient stop given a position and a color. Used in conjunction with SetCustomGradient().
            </summary>
            <param name="Position">Specifies position of the color, ranging from 0.0 to 1.0.</param>
            <param name="ColorTheme">The theme color to be used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLGradientFill.AppendGradientStop(System.Double,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set a gradient stop given a position and a color. Used in conjunction with SetCustomGradient().
            </summary>
            <param name="Position">Specifies position of the color, ranging from 0.0 to 1.0.</param>
            <param name="ColorTheme">The theme color to be used.</param>
            <param name="ColorTint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLGradientFill.FromGradientFill(DocumentFormat.OpenXml.Spreadsheet.GradientFill)">
            <summary>
            Form SLGradientFill from DocumentFormat.OpenXml.Spreadsheet.GradientFill class.
            </summary>
            <param name="gradientFill">The source DocumentFormat.OpenXml.Spreadsheet.GradientFill class.</param>
        </member>
        <member name="M:SpreadsheetLight.SLGradientFill.ToGradientFill">
            <summary>
            Form a DocumentFormat.OpenXml.Spreadsheet.GradientFill class from SLGradientFill.
            </summary>
            <returns>A DocumentFormat.OpenXml.Spreadsheet.GradientFill with the properties of this SLGradientFill.</returns>
        </member>
        <member name="P:SpreadsheetLight.SLGradientFill.Type">
            <summary>
            The gradient type. Default value is Linear.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLGradientFill.Degree">
            <summary>
            The angle in the direction from which the first color starts. The end color is at 180 degrees from this angle. 0 degrees means start from left, 90 degrees from the top, 180 degrees from the right and 270 degrees from below.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLGradientFill.Left">
            <summary>
            Specifies position of the first color at the left edge, ranging from 0.0 to 1.0. A 0.0 means the position is on the left edge of the cell, and 1.0 means it's on the right edge.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLGradientFill.Right">
            <summary>
            Specifies position of the first color at the right edge, ranging from 0.0 to 1.0. A 0.0 means the position is on the left edge of the cell, and 1.0 means it's on the right edge.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLGradientFill.Top">
            <summary>
            Specifies position of the first color at the top edge, ranging from 0.0 to 1.0. A 0.0 means the position is on the top edge of the cell, and 1.0 means it's on the bottom edge.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLGradientFill.Bottom">
            <summary>
            Specifies position of the first color at the bottom edge, ranging 0.0 to 1.0. A 0.0 means the position is on the top edge of the cell, and 1.0 means it's on the bottom edge.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLColumnProperties">
            <summary>
            Encapsulates properties and methods for columns. This simulates the DocumentFormat.OpenXml.Spreadsheet.Column class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLColumnProperties.#ctor(System.Double,System.Int64,System.Int32,System.Collections.Generic.List{System.Double})">
            <summary>
            Initializes an instance of SLColumnProperties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLWorksheet.ActiveCell">
            <summary>
            The default is A1. Not going to get the active cell from the worksheet.
            This is purely for setting (not getting). If not A1, then we'll do stuff.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLWorksheet.BackgroundPictureDataIsInFile">
            <summary>
            if null, then don't have to do anything
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLTitle">
            <summary>
            Encapsulates properties and methods for setting titles for charts.
            This simulates the DocumentFormat.OpenXml.Drawing.Charts.Title class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLTitle.ClearShapeProperties">
            <summary>
            Clear all styling shape properties. Use this if you want to start styling from a clean slate.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLTitle.SetTitle(System.String)">
            <summary>
            Set the title text.
            </summary>
            <param name="Text">The title text.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLTitle.SetTitle(SpreadsheetLight.SLRstType)">
            <summary>
            Set the title with a rich text string.
            </summary>
            <param name="RichText">The rich text.</param>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLTitle.Text">
            <summary>
            Title text. This returns the plain text version if rich text is applied.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLTitle.Overlay">
            <summary>
            Specifies if the title overlaps.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLTitle.Fill">
            <summary>
            Fill properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLTitle.Border">
            <summary>
            Border properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLTitle.Shadow">
            <summary>
            Shadow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLTitle.Glow">
            <summary>
            Glow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLTitle.SoftEdge">
            <summary>
            Soft edge properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLTitle.Format3D">
            <summary>
            3D format properties.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLTuplesType">
            <summary>
            This doubles for SortByTuple and Tuples
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLCacheSource.IsWorksheetSource">
            <summary>
            If true, use worksheet. If false, use consolidation. If null, use extension list.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLHyperlinkTypeValues">
            <summary>
            The type of hyperlink.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHyperlinkTypeValues.Url">
            <summary>
            Hyperlink to an existing web page.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHyperlinkTypeValues.FilePath">
            <summary>
            Hyperlink to an existing file.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHyperlinkTypeValues.InternalDocumentLink">
            <summary>
            Hyperlink to a place within the spreadsheet (cell references or defined names).
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHyperlinkTypeValues.EmailAddress">
            <summary>
            Hyperlink to an email address.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLMeasureUnitTypeValues">
            <summary>
            The type of measurement unit.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLMeasureUnitTypeValues.Emu">
            <summary>
            English Metric Unit. No, not the bird...
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLMeasureUnitTypeValues.Inch">
            <summary>
            Inch.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLMeasureUnitTypeValues.Centimeter">
            <summary>
            Centimeter.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLMeasureUnitTypeValues.Point">
            <summary>
            Point.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLPasteTypeValues">
            <summary>
            The type of paste options.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPasteTypeValues.Paste">
            <summary>
            Just plain pasting. Fanfare and choral singing each sold separately. *smile*
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPasteTypeValues.Values">
            <summary>
            Paste only values (no formulas).
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPasteTypeValues.Formulas">
            <summary>
            Paste values and formulas. NOTE: Formulas are copied as is (no recalculating cell references).
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPasteTypeValues.Transpose">
            <summary>
            Transpose.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPasteTypeValues.Formatting">
            <summary>
            Paste only formatting (styles).
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLColorTransform.SetColor(System.Drawing.Color,System.Decimal)">
            <summary>
            
            </summary>
            <param name="Color"></param>
            <param name="Transparency">Transparency of the color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLColorTransform.SetColor(SpreadsheetLight.SLThemeColorIndexValues,System.Double,System.Decimal)">
            <summary>
            
            </summary>
            <param name="Color">The theme color used.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="Transparency"></param>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLColorTransform.DisplayColor">
            <summary>
            This is read-only
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Drawing.SLGlow">
            <summary>
            Encapsulates properties and methods for specifying glow effects.
            This simulates the DocumentFormat.OpenXml.Drawing.Glow class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLGlow.SetNoGlow">
            <summary>
            Set no glow.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLGlow.SetGlow(System.Drawing.Color,System.Decimal,System.Decimal)">
            <summary>
            Set the glow color.
            </summary>
            <param name="GlowColor">The color used.</param>
            <param name="Transparency">Transparency of the color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
            <param name="Size">The size in points. The suggested range is 0 pt to 150 pt (both inclusive).</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLGlow.SetGlow(SpreadsheetLight.SLThemeColorIndexValues,System.Double,System.Decimal,System.Decimal)">
            <summary>
            Set the glow color.
            </summary>
            <param name="GlowColor">The theme color used.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="Transparency">Transparency of the color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
            <param name="Size">The size in points. The suggested range is 0 pt to 150 pt (both inclusive).</param>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLDataSeriesOptions">
            <summary>
            Data series customization options. Note that all supported chart data series properties are available, but only the relevant properties (to chart type) will be used.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLDataSeriesOptions.#ctor">
            <summary>
            Initializes an instance of SLDataSeriesOptions. It is recommended to use SLChart.GetDataSeriesOptions().
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDataSeriesOptions.Fill">
            <summary>
            Fill properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDataSeriesOptions.Line">
            <summary>
            Border/Line properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDataSeriesOptions.Shadow">
            <summary>
            Shadow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDataSeriesOptions.Glow">
            <summary>
            Glow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDataSeriesOptions.SoftEdge">
            <summary>
            Soft edge properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDataSeriesOptions.Format3D">
            <summary>
            3D format properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDataSeriesOptions.InvertIfNegative">
            <summary>
            Invert colors if negative. If null, the effective default is used (false). This is for bar charts, column charts and bubble charts.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDataSeriesOptions.Marker">
            <summary>
            Marker properties. This is for line charts, radar charts and scatter charts.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDataSeriesOptions.Explosion">
            <summary>
            The explosion distance from the center of the pie in percentage. It is suggested to keep the range between 0% and 400%.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDataSeriesOptions.Smooth">
            <summary>
            Whether the line connecting data points use C splines (instead of straight lines). This is for line charts and scatter charts.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDataSeriesOptions.Shape">
            <summary>
            The shape of data series for 3D bar and column charts.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Drawing.SLFormat3D">
            <summary>
            Encapsulates 3D shape properties. Works together with SLRotation3D class.
            This simulates some properties of DocumentFormat.OpenXml.Drawing.Scene3DType
            and DocumentFormat.OpenXml.Drawing.Shape3DType classes. The reason for this mixing
            is because Excel separates different properties from both classes into 2 separate sections
            on the user interface (3-D Format and 3-D Rotation). Hence SLRotation3D and SLFormat3D
            classes instead of straightforward mapping of the SDK Scene3DType and Shape3DType classes.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFormat3D.SetBevelTop(DocumentFormat.OpenXml.Drawing.BevelPresetValues,System.Decimal,System.Decimal)">
            <summary>
            Set the top bevel.
            </summary>
            <param name="BevelPreset">The bevel type.</param>
            <param name="Width">Bevel width ranging from 0 pt to 2147483647 pt. However, a suggested maximum is 1584 pt. Accurate to 1/12700 of a point.</param>
            <param name="Height">Bevel height ranging from 0 pt to 2147483647 pt. However, a suggested maximum is 1584 pt. Accurate to 1/12700 of a point.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFormat3D.SetNoBevelTop">
            <summary>
            Remove the top bevel.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFormat3D.SetBevelBottom(DocumentFormat.OpenXml.Drawing.BevelPresetValues,System.Decimal,System.Decimal)">
            <summary>
            Set the bottom bevel.
            </summary>
            <param name="BevelPreset">The bevel type.</param>
            <param name="Width">Bevel width ranging from 0 pt to 2147483647 pt. However, a suggested maximum is 1584 pt. Accurate to 1/12700 of a point.</param>
            <param name="Height">Bevel height ranging from 0 pt to 2147483647 pt. However, a suggested maximum is 1584 pt. Accurate to 1/12700 of a point.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFormat3D.SetNoBevelBottom">
            <summary>
            Remove the bottom bevel.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFormat3D.SetNoExtrusion">
            <summary>
            Remove any extrusion (or depth) settings.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFormat3D.SetExtrusionColor(System.Drawing.Color)">
            <summary>
            Set the extrusion (or depth) color.
            </summary>
            <param name="Color">The color to be used.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFormat3D.SetExtrusionColor(SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set the extrusion (or depth) color.
            </summary>
            <param name="Color">The theme color to be used.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFormat3D.SetExtrusion(System.Drawing.Color,System.Decimal)">
            <summary>
            Set the extrusion.
            </summary>
            <param name="Color">The color to be used.</param>
            <param name="Height">Extrusion height, ranging from 0 pt to 2147483647 pt. However, a suggested maximum is 1584 pt. Accurate to 1/12700 of a point.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFormat3D.SetExtrusion(SpreadsheetLight.SLThemeColorIndexValues,System.Double,System.Decimal)">
            <summary>
            Set the extrusion.
            </summary>
            <param name="Color">The theme color to be used.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="Height">Extrusion height, ranging from 0 pt to 2147483647 pt. However, a suggested maximum is 1584 pt. Accurate to 1/12700 of a point.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFormat3D.SetNoContour">
            <summary>
            Remove any contour settings.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFormat3D.SetContourColor(System.Drawing.Color)">
            <summary>
            Set the contour color.
            </summary>
            <param name="Color">The color to be used.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFormat3D.SetContourColor(SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set the contour color.
            </summary>
            <param name="Color">The theme color to be used.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFormat3D.SetContour(System.Drawing.Color,System.Decimal)">
            <summary>
            Set the contour.
            </summary>
            <param name="Color">The color to be used.</param>
            <param name="Width">Contour width, ranging from 0 pt to 2147483647 pt. However, a suggested maximum is 1584 pt. Accurate to 1/12700 of a point.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFormat3D.SetContour(SpreadsheetLight.SLThemeColorIndexValues,System.Double,System.Decimal)">
            <summary>
            Set the contour.
            </summary>
            <param name="Color">The theme color to be used.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="Width">Contour width, ranging from 0 pt to 2147483647 pt. However, a suggested maximum is 1584 pt. Accurate to 1/12700 of a point.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLFormat3D.SetNoLighting">
            <summary>
            Remove any lighting settings.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLFormat3D.HasBevelTop">
            <summary>
            Specifies if there's a top bevel. This is read-only.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLFormat3D.BevelTopPreset">
            <summary>
            The bevel type of the top bevel. Default is circle.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLFormat3D.BevelTopWidth">
            <summary>
            Width of the top bevel, ranging from 0 pt to 2147483647 pt. However, a suggested maximum is 1584 pt. Accurate to 1/12700 of a point.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLFormat3D.BevelTopHeight">
            <summary>
            Height of the top bevel, ranging from 0 pt to 2147483647 pt. However, a suggested maximum is 1584 pt. Accurate to 1/12700 of a point.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLFormat3D.HasBevelBottom">
            <summary>
            Specifies if there's a bottom bevel. This is read-only.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLFormat3D.BevelBottomPreset">
            <summary>
            The bevel type of the bottom bevel. Default is circle.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLFormat3D.BevelBottomWidth">
            <summary>
            Width of the bottom bevel, ranging from 0 pt to 2147483647 pt. However, a suggested maximum is 1584 pt. Accurate to 1/12700 of a point.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLFormat3D.BevelBottomHeight">
            <summary>
            Height of the bottom bevel, ranging from 0 pt to 2147483647 pt. However, a suggested maximum is 1584 pt. Accurate to 1/12700 of a point.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLFormat3D.ExtrusionColor">
            <summary>
            The extrusion color, also known as the depth color. This is read-only.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLFormat3D.ExtrusionHeight">
            <summary>
            Extrusion height, ranging from 0 pt to 2147483647 pt. However, a suggested maximum is 1584 pt. Accurate to 1/12700 of a point.
            The Microsoft Excel user interface uses the term "Depth".
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLFormat3D.ContourColor">
            <summary>
            The contour color. This is read-only.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLFormat3D.ContourWidth">
            <summary>
            Contour width, ranging from 0 pt to 2147483647 pt. However, a suggested maximum is 1584 pt. Accurate to 1/12700 of a point.
            The Microsoft Excel user interface uses the term "Size".
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLFormat3D.Material">
            <summary>
            The preset material used. Default is WarmMatte.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLFormat3D.HasLighting">
            <summary>
            Specifies if there's lighting.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLFormat3D.Lighting">
            <summary>
            The type of lighting used.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLFormat3D.Angle">
            <summary>
            Angle of the lighting, ranging from 0 degrees to 359.9 degrees. This is set only when <see cref="P:SpreadsheetLight.Drawing.SLFormat3D.Lighting"/> is also set.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLBubbleChartOptions">
            <summary>
            Chart customization options for bubble charts.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLBubbleChartOptions.#ctor">
            <summary>
            Initializes an instance of SLBubbleChartOptions.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLBubbleChartOptions.Bubble3D">
            <summary>
            Specifies if the bubbles have a 3D effect.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLBubbleChartOptions.BubbleScale">
            <summary>
            Scale factor in percentage of the default size, ranging from 0% to 300% (both inclusive). The default is 100%.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLBubbleChartOptions.ShowNegativeBubbles">
            <summary>
            Specifies if negatively sized bubbles are shown.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLBubbleChartOptions.SizeRepresents">
            <summary>
            Specifies how bubble sizes relate to the presentation of the bubbles.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLCellPoint">
            <summary>
            This represents a cell reference in numeric index form.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLCellPoint.RowIndex">
            <summary>
            Row index.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLCellPoint.ColumnIndex">
            <summary>
            Column index.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLCellPoint.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes an instance of SLCellPoint.
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
        </member>
        <member name="M:SpreadsheetLight.SLCellPoint.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:SpreadsheetLight.SLPageSettings">
            <summary>
            Encapsulates page and print settings for a sheet (worksheets, chartsheets and dialogsheets).
            This simulates DocumentFormat.OpenXml.Spreadsheet.SheetProperties, DocumentFormat.OpenXml.Spreadsheet.PrintOptions, DocumentFormat.OpenXml.Spreadsheet.PageMargins,
            DocumentFormat.OpenXml.Spreadsheet.PageSetup, DocumentFormat.OpenXml.Spreadsheet.HeaderFooter and DocumentFormat.OpenXml.Spreadsheet.SheetView classes.
            For chartsheets, the DocumentFormat.OpenXml.Spreadsheet.ChartSheetProperties (instead of SheetProperties) and
            DocumentFormat.OpenXml.Spreadsheet.ChartSheetPageSetup (instead of PageSetup) classes are involved.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.#ctor">
            <summary>
            Initializes an instance of SLPageSettings. It is recommended to use GetPageSettings() of the SLDocument class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.SetTabColor(SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Sets the tab color of the sheet.
            </summary>
            <param name="TabColor">The theme color to be used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.SetTabColor(SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Sets the tab color of the sheet.
            </summary>
            <param name="TabColor">The theme color to be used.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.SetNormalMargins">
            <summary>
            Set normal margins.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.SetWideMargins">
            <summary>
            Set wide margins.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.SetNarrowMargins">
            <summary>
            Set narrow margins.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.ScalePage(System.UInt32)">
            <summary>
            Adjust the page a given percentage of the normal size.
            </summary>
            <param name="ScalePercentage">The scale percentage between 10% and 400%.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.ScalePage(System.UInt32,System.UInt32)">
            <summary>
            Fit to a given number of pages wide, and a given number of pages high.
            </summary>
            <param name="FitToWidth">Number of pages wide. Minimum is 1 page (default).</param>
            <param name="FitToHeight">Number of pages high. Minimum is 1 page (default).</param>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.AppendOddHeader(System.String)">
            <summary>
            Append text to the odd-numbered page header.
            </summary>
            <param name="Text">The text to be appended.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.AppendOddHeader(SpreadsheetLight.SLFont,System.String)">
            <summary>
            Append text to the odd-numbered page header.
            </summary>
            <param name="FontStyle">The font style of the text.</param>
            <param name="Text">The text to be appended.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.AppendOddHeader(SpreadsheetLight.SLHeaderFooterFormatCodeValues)">
            <summary>
            Append a format code to the odd-numbered page header.
            </summary>
            <param name="Code">The format code.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.AppendOddFooter(System.String)">
            <summary>
            Append text to the odd-numbered page footer.
            </summary>
            <param name="Text">The text to be appended.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.AppendOddFooter(SpreadsheetLight.SLFont,System.String)">
            <summary>
            Append text to the odd-numbered page footer.
            </summary>
            <param name="FontStyle">The font style of the text.</param>
            <param name="Text">The text to be appended.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.AppendOddFooter(SpreadsheetLight.SLHeaderFooterFormatCodeValues)">
            <summary>
            Append a format code to the odd-numbered page footer.
            </summary>
            <param name="Code">The format code.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.AppendEvenHeader(System.String)">
            <summary>
            Append text to the even-numbered page header.
            </summary>
            <param name="Text">The text to be appended.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.AppendEvenHeader(SpreadsheetLight.SLFont,System.String)">
            <summary>
            Append text to the even-numbered page header.
            </summary>
            <param name="FontStyle">The font style of the text.</param>
            <param name="Text">The text to be appended.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.AppendEvenHeader(SpreadsheetLight.SLHeaderFooterFormatCodeValues)">
            <summary>
            Append a format code to the even-numbered page header.
            </summary>
            <param name="Code">The format code.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.AppendEvenFooter(System.String)">
            <summary>
            Append text to the even-numbered page footer.
            </summary>
            <param name="Text">The text to be appended.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.AppendEvenFooter(SpreadsheetLight.SLFont,System.String)">
            <summary>
            Append text to the even-numbered page footer.
            </summary>
            <param name="FontStyle">The font style of the text.</param>
            <param name="Text">The text to be appended.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.AppendEvenFooter(SpreadsheetLight.SLHeaderFooterFormatCodeValues)">
            <summary>
            Append a format code to the even-numbered page footer.
            </summary>
            <param name="Code">The format code.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.AppendFirstHeader(System.String)">
            <summary>
            Append text to the first page header.
            </summary>
            <param name="Text">The text to be appended.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.AppendFirstHeader(SpreadsheetLight.SLFont,System.String)">
            <summary>
            Append text to the first page header.
            </summary>
            <param name="FontStyle">The font style of the text.</param>
            <param name="Text">The text to be appended.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.AppendFirstHeader(SpreadsheetLight.SLHeaderFooterFormatCodeValues)">
            <summary>
            Append a format code to the first page header.
            </summary>
            <param name="Code">The format code.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.AppendFirstFooter(System.String)">
            <summary>
            Append text to the first page footer.
            </summary>
            <param name="Text">The text to be appended.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.AppendFirstFooter(SpreadsheetLight.SLFont,System.String)">
            <summary>
            Append text to the first page footer.
            </summary>
            <param name="FontStyle">The font style of the text.</param>
            <param name="Text">The text to be appended.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.AppendFirstFooter(SpreadsheetLight.SLHeaderFooterFormatCodeValues)">
            <summary>
            Append a format code to the first page footer.
            </summary>
            <param name="Code">The format code.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.GetLeftHeaderText">
            <summary>
            Get the text from the left section of the header.
            </summary>
            <returns>The text.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.GetLeftHeaderText(SpreadsheetLight.SLHeaderFooterTypeValues)">
            <summary>
            Get the text from the left section of the header.
            </summary>
            <param name="HeaderType">The header type.</param>
            <returns>The text.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.GetCenterHeaderText">
            <summary>
            Get the text from the center section of the header.
            </summary>
            <returns>The text.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.GetCenterHeaderText(SpreadsheetLight.SLHeaderFooterTypeValues)">
            <summary>
            Get the text from the center section of the header.
            </summary>
            <param name="HeaderType">The header type.</param>
            <returns>The text.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.GetRightHeaderText">
            <summary>
            Get the text from the right section of the header.
            </summary>
            <returns>The text.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.GetRightHeaderText(SpreadsheetLight.SLHeaderFooterTypeValues)">
            <summary>
            Get the text from the right section of the header.
            </summary>
            <param name="HeaderType">The header type.</param>
            <returns>The text.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.GetLeftFooterText">
            <summary>
            Get the text from the left section of the footer.
            </summary>
            <returns>The text.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.GetLeftFooterText(SpreadsheetLight.SLHeaderFooterTypeValues)">
            <summary>
            Get the text from the left section of the footer.
            </summary>
            <param name="FooterType">The footer type.</param>
            <returns>The text.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.GetCenterFooterText">
            <summary>
            Get the text from the center section of the footer.
            </summary>
            <returns>The text.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.GetCenterFooterText(SpreadsheetLight.SLHeaderFooterTypeValues)">
            <summary>
            Get the text from the center section of the footer.
            </summary>
            <param name="FooterType">The footer type.</param>
            <returns>The text.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.GetRightFooterText">
            <summary>
            Get the text from the right section of the footer.
            </summary>
            <returns>The text.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.GetRightFooterText(SpreadsheetLight.SLHeaderFooterTypeValues)">
            <summary>
            Get the text from the right section of the footer.
            </summary>
            <param name="FooterType">The footer type.</param>
            <returns>The text.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.SetLeftHeaderText(System.String)">
            <summary>
            Set the text of the left section of the header.
            </summary>
            <param name="Text">The text.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.SetLeftHeaderText(SpreadsheetLight.SLHeaderFooterTypeValues,System.String)">
            <summary>
            Set the text of the left section of the header.
            </summary>
            <param name="HeaderType">The header type.</param>
            <param name="Text">The text.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.SetCenterHeaderText(System.String)">
            <summary>
            Set the text of the center section of the header.
            </summary>
            <param name="Text">The text.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.SetCenterHeaderText(SpreadsheetLight.SLHeaderFooterTypeValues,System.String)">
            <summary>
            Set the text of the center section of the header.
            </summary>
            <param name="HeaderType">The header type.</param>
            <param name="Text">The text.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.SetRightHeaderText(System.String)">
            <summary>
            Set the text of the right section of the header.
            </summary>
            <param name="Text">The text.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.SetRightHeaderText(SpreadsheetLight.SLHeaderFooterTypeValues,System.String)">
            <summary>
            Set the text of the right section of the header.
            </summary>
            <param name="HeaderType">The header type.</param>
            <param name="Text">The text.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.SetLeftFooterText(System.String)">
            <summary>
            Set the text of the left section of the footer.
            </summary>
            <param name="Text">The text.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.SetLeftFooterText(SpreadsheetLight.SLHeaderFooterTypeValues,System.String)">
            <summary>
            Set the text of the left section of the footer.
            </summary>
            <param name="FooterType">The footer type.</param>
            <param name="Text">The text.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.SetCenterFooterText(System.String)">
            <summary>
            Set the text of the center section of the footer.
            </summary>
            <param name="Text">The text.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.SetCenterFooterText(SpreadsheetLight.SLHeaderFooterTypeValues,System.String)">
            <summary>
            Set the text of the center section of the footer.
            </summary>
            <param name="FooterType">The footer type.</param>
            <param name="Text">The text.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.SetRightFooterText(System.String)">
            <summary>
            Set the text of the right section of the footer.
            </summary>
            <param name="Text">The text.</param>
        </member>
        <member name="M:SpreadsheetLight.SLPageSettings.SetRightFooterText(SpreadsheetLight.SLHeaderFooterTypeValues,System.String)">
            <summary>
            Set the text of the right section of the footer.
            </summary>
            <param name="FooterType">The footer type.</param>
            <param name="Text">The text.</param>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.HasTabColor">
            <summary>
            Specifies if there's a tab color. This is read-only.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.TabColor">
            <summary>
            The tab color.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.ShowFormulas">
            <summary>
            Show or hide the cell formulas. NOTE: This has nothing to do with the formula bar, but whether the sheet shows cell formulas instead of calculated results.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.ShowGridLines">
            <summary>
            Show or hide the grid lines between rows and columns.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.ShowRowColumnHeaders">
            <summary>
            Show or hide the row and column headers.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.ShowRuler">
            <summary>
            Show or hide the ruler on the worksheet. The ruler is only seen when the worksheet view is in "page layout" mode.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.View">
            <summary>
            Worksheet view type.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.ZoomScale">
            <summary>
            Zoom magnification for current view, ranging from 10% to 400%. If you want to set a zoom value for the page break view, make sure to set the View property to PageBreakPreview.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.ZoomScaleNormal">
            <summary>
            Zoom magnification for the normal view, ranging from 10% to 400%. A return value of 0% means the automatic setting is used.
            If the view is set to normal, this value is ignored if ZoomScale is also set.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.ZoomScalePageLayoutView">
            <summary>
            Zoom magnification for the page layout view, ranging from 10% to 400%. A return value of 0% means the automatic setting is used.
            If the view is set to page layout, this value is ignored if ZoomScale is also set.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.PrintHorizontalCentered">
            <summary>
            Center horizontally on page when printing. This doesn't apply to chart sheets.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.PrintVerticalCentered">
            <summary>
            Center vertically on page when printing. This doesn't apply to chart sheets.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.PrintHeadings">
            <summary>
            Print row and column headings. This doesn't apply to chart sheets.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.PrintGridLines">
            <summary>
            Print grid lines. This doesn't apply to chart sheets.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.LeftMargin">
            <summary>
            The left margin in inches.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.RightMargin">
            <summary>
            The right margin in inches.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.TopMargin">
            <summary>
            The top margin in inches.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.BottomMargin">
            <summary>
            The bottom margin in inches.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.HeaderMargin">
            <summary>
            The header margin in inches.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.FooterMargin">
            <summary>
            The footer margin in inches.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.PaperSize">
            <summary>
            The paper size. The default is Letter.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.FirstPageNumber">
            <summary>
            The page number set for the first printed page.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.Scale">
            <summary>
            The printing scale. This is read-only. This doesn't apply to chart sheets.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.FitToWidth">
            <summary>
            The number of horizontal pages to fit into a printed page. This is read-only. Use the ScalePage() function to set. This doesn't apply to chart sheets.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.FitToHeight">
            <summary>
            The number of vertical pages to fit into a printed page. This is read-only. Use the ScalePage() function to set. This doesn't apply to chart sheets.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.PageOrder">
            <summary>
            Page order when printed. This doesn't apply to chart sheets.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.Orientation">
            <summary>
            Page orientation.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.BlackAndWhite">
            <summary>
            Specifies if the page is printed in black and white.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.Draft">
            <summary>
            Specifies if the page is printed in draft mode (without graphics).
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.CellComments">
            <summary>
            Specifies how to print cell comments. This doesn't apply to chart sheets.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.Errors">
            <summary>
            Specifies how to print for cells with errors. This doesn't apply to chart sheets.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.HorizontalDpi">
            <summary>
            Horizontal print resolution.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.VerticalDpi">
            <summary>
            Vertical print resolution.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.Copies">
            <summary>
            The number of copies to print. The minimum number is 1 copy. There are no maximum number of copies, however Excel uses 9999 copies as a maximum.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.OddHeaderText">
            <summary>
            The text in the odd-numbered page header. Note that this is the default used.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.OddFooterText">
            <summary>
            The text in the odd-numbered page footer. Note that this is the default used.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.EvenHeaderText">
            <summary>
            The text in the even-numbered page header. Note that this only activates when <see cref="P:SpreadsheetLight.SLPageSettings.DifferentOddEvenPages"/> is true.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.EvenFooterText">
            <summary>
            The text in the even-numbered page footer. Note that this only activates when <see cref="P:SpreadsheetLight.SLPageSettings.DifferentOddEvenPages"/> is true.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.FirstHeaderText">
            <summary>
            The text in the first page's header. Note that this only activates when <see cref="P:SpreadsheetLight.SLPageSettings.DifferentFirstPage"/> is true.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.FirstFooterText">
            <summary>
            The text in the first page's footer. Note that this only activates when <see cref="P:SpreadsheetLight.SLPageSettings.DifferentFirstPage"/> is true.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.DifferentOddEvenPages">
            <summary>
            Specifies if different headers and footers are set for odd- and even-numbered pages.
            If false, then the text in odd-numbered page header and footer is used, even if there's text
            set in even-numbered page header and footer.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.DifferentFirstPage">
            <summary>
            Specifies if a different header and footer is set for the first page.
            If false, any text set in the first page header and footer is ignored.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.ScaleWithDocument">
            <summary>
            Scale with the document.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLPageSettings.AlignWithMargins">
            <summary>
            Align header and footer margins with page margins.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLNumberDataType">
            <summary>
            For NumberingCache and NumberLiteral
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLFourIconSetOptions">
            <summary>
            Conditional formatting options for four icon sets.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLFourIconSetOptions.#ctor(SpreadsheetLight.SLFourIconSetValues)">
            <summary>
            Initializes an instance of SLFourIconSetOptions.
            </summary>
            <param name="IconSetType">The type of icon set.</param>
        </member>
        <member name="P:SpreadsheetLight.SLFourIconSetOptions.ReverseIconOrder">
            <summary>
            Specifies if the icons in the set are reversed.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFourIconSetOptions.ShowIconOnly">
            <summary>
            Specifies if only the icon is shown. Set to false to show both icon and value.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFourIconSetOptions.Icon1">
            <summary>
            The 1st icon.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFourIconSetOptions.Icon2">
            <summary>
            The 2nd icon.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFourIconSetOptions.Icon3">
            <summary>
            The 3rd icon.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFourIconSetOptions.Icon4">
            <summary>
            The 4th icon.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFourIconSetOptions.GreaterThanOrEqual2">
            <summary>
            Specifies if values are to be greater than or equal to the 2nd range value. Set to false if values are to be strictly greater than.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFourIconSetOptions.GreaterThanOrEqual3">
            <summary>
            Specifies if values are to be greater than or equal to the 3rd range value. Set to false if values are to be strictly greater than.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFourIconSetOptions.GreaterThanOrEqual4">
            <summary>
            Specifies if values are to be greater than or equal to the 4th range value. Set to false if values are to be strictly greater than.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFourIconSetOptions.Value2">
            <summary>
            The 2nd range value.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFourIconSetOptions.Value3">
            <summary>
            The 3rd range value.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFourIconSetOptions.Value4">
            <summary>
            The 4th range value.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFourIconSetOptions.Type2">
            <summary>
            The conditional format type for the 2nd range value.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFourIconSetOptions.Type3">
            <summary>
            The conditional format type for the 3rd range value.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFourIconSetOptions.Type4">
            <summary>
            The conditional format type for the 4th range value.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLWorksheetStatistics">
            <summary>
            Statistical information about a worksheet.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLWorksheetStatistics.#ctor">
            <summary>
            Initializes an instance of SLWorksheetStatistics. But it's quite useless on its own. Use GetWorksheetStatistics() of the SLDocument class.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLWorksheetStatistics.StartRowIndex">
            <summary>
            Index of the first row used. This includes empty rows but might be styled. This returns -1 if the worksheet is empty (but check for negative values instead of -1 just in case). This is read-only.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLWorksheetStatistics.StartColumnIndex">
            <summary>
            Index of the first column used. This includes empty columns but might be styled. This returns -1 if the worksheet is empty (but check for negative values instead of -1 just in case). This is read-only.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLWorksheetStatistics.EndRowIndex">
            <summary>
            Index of the last row used. This includes empty rows but might be styled. This returns -1 if the worksheet is empty (but check for negative values instead of -1 just in case). This is read-only.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLWorksheetStatistics.EndColumnIndex">
            <summary>
            Index of the last column used. This includes empty columns but might be styled. This returns -1 if the worksheet is empty (but check for negative values instead of -1 just in case). This is read-only.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLWorksheetStatistics.NumberOfCells">
            <summary>
            Number of cells set in the worksheet. This is read-only.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLWorksheetStatistics.NumberOfEmptyCells">
            <summary>
            Number of cells set in the worksheet that is empty. This could be that a style was set but no cell value given. This is read-only.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLWorksheetStatistics.NumberOfRows">
            <summary>
            Number of rows in the worksheet. This includes empty rows (no cells in that row but a row style was applied, or that row only has empty cells). This is read-only.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLWorksheetStatistics.NumberOfColumns">
            <summary>
            Number of columns in the worksheet. This includes empty columns (no cells in that column but a column style was applied, or that column only has empty cells). This is read-only.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLUpDownBars">
            <summary>
            Encapsulates properties and methods for up-down bars.
            This simulates the DocumentFormat.OpenXml.Drawing.Charts.UpDownBars class.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLUpDownBars.GapWidth">
            <summary>
            The gap width between consecutive up-down bars as a percentage of the width of the bar, ranging from 0 to 500 (both inclusive).
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLUpDownBars.UpBars">
            <summary>
            The up bars.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLUpDownBars.DownBars">
            <summary>
            The down bars.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLDefinedName">
            <summary>
            This simulates the DocumentFormat.OpenXml.Spreadsheet.DefinedName class.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDefinedName.Text">
            <summary>
            The text of the defined name.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDefinedName.Name">
            <summary>
            The name of the defined name. Names starting with "_xlnm" are reserved.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDefinedName.Comment">
            <summary>
            User comment.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDefinedName.CustomMenu">
            <summary>
            Custom menu text.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDefinedName.Description">
            <summary>
            Description text.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDefinedName.Help">
            <summary>
            Help topic for display.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDefinedName.StatusBar">
            <summary>
            Status bar text.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDefinedName.LocalSheetId">
            <summary>
            The sheet index (0-based indexing) that's the scope of the defined name. If null, the defined name applies to the entire spreadsheet.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDefinedName.Hidden">
            <summary>
            Specifies if the defined name is hidden in the user interface. The default value is false.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDefinedName.Function">
            <summary>
            Specifies if the defined name refers to a user-defined function. The default value is false.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDefinedName.VbProcedure">
            <summary>
            Specifies if the defined name is related to an external function, command or executable code. The default value is false.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDefinedName.Xlm">
            <summary>
            Specifies if the defined name is related to an external function, command or executable code. The default value is false.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDefinedName.FunctionGroupId">
            <summary>
            Specifies the function group index if the defined name refers to a function. Refer to Open XML specifications for the meaning of the values. For example, 1 is for "Financial" and 2 is for "Date and Time".
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDefinedName.ShortcutKey">
            <summary>
            Specifies the keyboard shortcut for the defined name.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDefinedName.PublishToServer">
            <summary>
            Specifies if the defined name is included in a spreadsheet that's published or rendered on a web or application server. The default value is false.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDefinedName.WorkbookParameter">
            <summary>
            Specifies that the defined name is used as a parameter of a spreadsheet that's published or rendered on a web or application server. The default value is false.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLConditionalFormatDataBarValues">
            <summary>
            Built-in data bar types.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatDataBarValues.Blue">
            <summary>
            Blue data bar
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatDataBarValues.Green">
            <summary>
            Green data bar
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatDataBarValues.Red">
            <summary>
            Red data bar
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatDataBarValues.Orange">
            <summary>
            Orange data bar
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatDataBarValues.LightBlue">
            <summary>
            Light blue data bar
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatDataBarValues.Purple">
            <summary>
            Purple data bar
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLConditionalFormatColorScaleValues">
            <summary>
            Built-in color scale types.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatColorScaleValues.GreenYellowRed">
            <summary>
            Green - Yellow - Red color scale
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatColorScaleValues.RedYellowGreen">
            <summary>
            Red - Yellow - Green color scale
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatColorScaleValues.BlueYellowRed">
            <summary>
            Blue - Yellow - Red color scale
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatColorScaleValues.RedYellowBlue">
            <summary>
            Red - Yellow - Blue color scale
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatColorScaleValues.GreenWhiteRed">
            <summary>
            Green - White - Red color scale
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatColorScaleValues.RedWhiteGreen">
            <summary>
            Red - White - Green color scale
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatColorScaleValues.BlueWhiteRed">
            <summary>
            Blue - White - Red color scale
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatColorScaleValues.RedWhiteBlue">
            <summary>
            Red - White - Blue color scale
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatColorScaleValues.WhiteRed">
            <summary>
            White - Red color scale
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatColorScaleValues.RedWhite">
            <summary>
            Red - White color scale
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatColorScaleValues.GreenWhite">
            <summary>
            Green - White color scale
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatColorScaleValues.WhiteGreen">
            <summary>
            White - Green color scale
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatColorScaleValues.YellowRed">
            <summary>
            Yellow - Red color scale
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatColorScaleValues.RedYellow">
            <summary>
            Red - Yellow color scale
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatColorScaleValues.GreenYellow">
            <summary>
            Green - Yellow color scale
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatColorScaleValues.YellowGreen">
            <summary>
            Yellow - Green color scale
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLConditionalFormatMinMaxValues">
            <summary>
            Conditional format type including minimum and maximum types.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatMinMaxValues.Value">
            <summary>
            The underlying engine will assign a minimum or maximum depending on the parameter this value is used on.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatMinMaxValues.Number">
            <summary>
            Number
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatMinMaxValues.Percent">
            <summary>
            Percent
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatMinMaxValues.Formula">
            <summary>
            Formula
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatMinMaxValues.Percentile">
            <summary>
            Percentile
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLConditionalFormatAutoMinMaxValues">
            <summary>
            Conditional format type including minimum and maximum and automatic types.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatAutoMinMaxValues.Value">
            <summary>
            The underlying engine will assign a minimum or maximum depending on the parameter this value is used on.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatAutoMinMaxValues.Number">
            <summary>
            Number
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatAutoMinMaxValues.Percent">
            <summary>
            Percent
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatAutoMinMaxValues.Formula">
            <summary>
            Formula
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatAutoMinMaxValues.Percentile">
            <summary>
            Percentile
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatAutoMinMaxValues.Automatic">
            <summary>
            Automatic. The underlying engine will assign a minimum or maximum depending on the parameter this value is used on. This is an Excel 2010 specific feature.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLConditionalFormatRangeValues">
            <summary>
            Conditional format type excluding minimum and maximum and automatic types.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatRangeValues.Number">
            <summary>
            Number
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatRangeValues.Percent">
            <summary>
            Percent
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatRangeValues.Formula">
            <summary>
            Formula
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLConditionalFormatRangeValues.Percentile">
            <summary>
            Percentile
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconSetValues.FiveArrows">
            <summary>
            5 arrows
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconSetValues.FiveArrowsGray">
            <summary>
            5 arrows (gray)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconSetValues.FiveBoxes">
            <summary>
            5 boxes
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconSetValues.FiveQuarters">
            <summary>
            5 quarters
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconSetValues.FiveRating">
            <summary>
            5 ratings
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconSetValues.FourArrows">
            <summary>
            4 arrows
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconSetValues.FourArrowsGray">
            <summary>
            4 arrows (gray)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconSetValues.FourRating">
            <summary>
            4 ratings
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconSetValues.FourRedToBlack">
            <summary>
            4 red To black
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconSetValues.FourTrafficLights">
            <summary>
            4 traffic lights
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconSetValues.ThreeArrows">
            <summary>
            3 arrows
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconSetValues.ThreeArrowsGray">
            <summary>
            3 arrows (gray)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconSetValues.ThreeFlags">
            <summary>
            3 flags
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconSetValues.ThreeSigns">
            <summary>
            3 signs
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconSetValues.ThreeStars">
            <summary>
            3 stars
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconSetValues.ThreeSymbols">
            <summary>
            3 symbols circled
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconSetValues.ThreeSymbols2">
            <summary>
            3 symbols
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconSetValues.ThreeTrafficLights1">
            <summary>
            3 traffic lights
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconSetValues.ThreeTrafficLights2">
            <summary>
            3 traffic lights black
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconSetValues.ThreeTriangles">
            <summary>
            3 triangles
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLFiveIconSetValues">
            <summary>
            Icon set type for five icons.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLFiveIconSetValues.FiveArrows">
            <summary>
            5 arrows
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLFiveIconSetValues.FiveArrowsGray">
            <summary>
            5 arrows (gray)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLFiveIconSetValues.FiveBoxes">
            <summary>
            5 boxes. This is an Excel 2010 specific feature.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLFiveIconSetValues.FiveQuarters">
            <summary>
            5 quarters
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLFiveIconSetValues.FiveRating">
            <summary>
            5 ratings
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLFourIconSetValues">
            <summary>
            Icon set type for four icons.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLFourIconSetValues.FourArrows">
            <summary>
            4 arrows
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLFourIconSetValues.FourArrowsGray">
            <summary>
            4 arrows (gray)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLFourIconSetValues.FourRating">
            <summary>
            4 ratings
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLFourIconSetValues.FourRedToBlack">
            <summary>
            4 red To black
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLFourIconSetValues.FourTrafficLights">
            <summary>
            4 traffic lights
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLThreeIconSetValues">
            <summary>
            Icon set type for three icons.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThreeIconSetValues.ThreeArrows">
            <summary>
            3 arrows
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThreeIconSetValues.ThreeArrowsGray">
            <summary>
            3 arrows (gray)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThreeIconSetValues.ThreeFlags">
            <summary>
            3 flags
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThreeIconSetValues.ThreeSigns">
            <summary>
            3 signs
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThreeIconSetValues.ThreeStars">
            <summary>
            3 stars. This is an Excel 2010 specific feature.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThreeIconSetValues.ThreeSymbols">
            <summary>
            3 symbols circled
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThreeIconSetValues.ThreeSymbols2">
            <summary>
            3 symbols
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThreeIconSetValues.ThreeTrafficLights1">
            <summary>
            3 traffic lights
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThreeIconSetValues.ThreeTrafficLights2">
            <summary>
            3 traffic lights black
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLThreeIconSetValues.ThreeTriangles">
            <summary>
            3 triangles. This is an Excel 2010 specific feature.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLIconValues">
            <summary>
            Icon types.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.NoIcon">
            <summary>
            No icon.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.GreenUpArrow">
            <summary>
            Green up arrow.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.YellowSideArrow">
            <summary>
            Yellow side arrow.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.RedDownArrow">
            <summary>
            Red down arrow.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.GrayUpArrow">
            <summary>
            Gray up arrow.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.GraySideArrow">
            <summary>
            Gray side arrow.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.GrayDownArrow">
            <summary>
            Gray down arrow.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.GreenFlag">
            <summary>
            Green flag.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.YellowFlag">
            <summary>
            Yellow flag.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.RedFlag">
            <summary>
            Red flag.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.GreenCircle">
            <summary>
            Green circle.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.YellowCircle">
            <summary>
            Yellow circle.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.RedCircleWithBorder">
            <summary>
            Red circle with border.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.BlackCircleWithBorder">
            <summary>
            Black circle with border.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.GreenTrafficLight">
            <summary>
            Green traffic light.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.YellowTrafficLight">
            <summary>
            Yellow traffic light.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.RedTrafficLight">
            <summary>
            Red traffic light.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.YellowTriangle">
            <summary>
            Yellow triangle.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.RedDiamond">
            <summary>
            Red diamond.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.GreenCheckSymbol">
            <summary>
            Green check symbol.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.YellowExclamationSymbol">
            <summary>
            Yellow exclamation symbol.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.RedCrossSymbol">
            <summary>
            Red cross symbol.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.GreenCheck">
            <summary>
            Green check.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.YellowExclamation">
            <summary>
            Yellow exclamation.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.RedCross">
            <summary>
            Red cross.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.YellowUpInclineArrow">
            <summary>
            Yellow up incline arrow.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.YellowDownInclineArrow">
            <summary>
            Yellow down incline arrow.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.GrayUpInclineArrow">
            <summary>
            Gray up incline arrow.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.GrayDownInclineArrow">
            <summary>
            Gray down incline arrow.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.RedCircle">
            <summary>
            Red circle.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.PinkCircle">
            <summary>
            Pink circle.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.GrayCircle">
            <summary>
            Gray circle.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.BlackCircle">
            <summary>
            Black circle.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.CircleWithOneWhiteQuarter">
            <summary>
            Circle with one white quarter.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.CircleWithTwoWhiteQuarters">
            <summary>
            Circle with two white quarters.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.CircleWithThreeWhiteQuarters">
            <summary>
            Circle with three white quarters.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.WhiteCircleAllWhiteQuarters">
            <summary>
            White circle (all white quarters).
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.SignalMeterWithNoFilledBars">
            <summary>
            Signal meter with no filled bars.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.SignalMeterWithOneFilledBar">
            <summary>
            Signal meter with one filled bar.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.SignalMeterWithTwoFilledBars">
            <summary>
            Signal meter with two filled bars.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.SignalMeterWithThreeFilledBars">
            <summary>
            Signal meter with three filled bars.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.SignalMeterWithFourFilledBars">
            <summary>
            Signal meter with four filled bars.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.GoldStar">
            <summary>
            Gold star.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.HalfGoldStar">
            <summary>
            Half gold star.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.SilverStar">
            <summary>
            Silver star.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.GreenUpTriangle">
            <summary>
            Green up triangle.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.YellowDash">
            <summary>
            Yellow dash.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.RedDownTriangle">
            <summary>
            Red down triangle.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.FourFilledBoxes">
            <summary>
            Four filled boxes.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.ThreeFilledBoxes">
            <summary>
            Three filled boxes.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.TwoFilledBoxes">
            <summary>
            Two filled boxes.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.OneFilledBox">
            <summary>
            One filled box.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLIconValues.ZeroFilledBoxes">
            <summary>
            Zero filled boxes.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLHighlightCellsStyleValues">
            <summary>
            Built-in cell highlighting styles
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHighlightCellsStyleValues.LightRedFillWithDarkRedText">
            <summary>
            Light red background fill with dark red text
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHighlightCellsStyleValues.YellowFillWithDarkYellowText">
            <summary>
            Yellow background fill with dark yellow text
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHighlightCellsStyleValues.GreenFillWithDarkGreenText">
            <summary>
            Green background fill with dark green text
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHighlightCellsStyleValues.LightRedFill">
            <summary>
            Light red background fill
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHighlightCellsStyleValues.RedText">
            <summary>
            Red text
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHighlightCellsStyleValues.RedBorder">
            <summary>
            Red borders
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLHighlightCellsAboveAverageValues">
            <summary>
            Options on the average value for the selected range.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHighlightCellsAboveAverageValues.Above">
            <summary>
            Above the average
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHighlightCellsAboveAverageValues.Below">
            <summary>
            Below the average
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHighlightCellsAboveAverageValues.EqualOrAbove">
            <summary>
            Equal to or above the average
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHighlightCellsAboveAverageValues.EqualOrBelow">
            <summary>
            Equal to or below the average
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHighlightCellsAboveAverageValues.OneStdDevAbove">
            <summary>
            1 standard deviation above the average
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHighlightCellsAboveAverageValues.OneStdDevBelow">
            <summary>
            1 standard deviation below the average
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHighlightCellsAboveAverageValues.TwoStdDevAbove">
            <summary>
            2 standard deviations above the average
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHighlightCellsAboveAverageValues.TwoStdDevBelow">
            <summary>
            2 standard deviations below the average
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHighlightCellsAboveAverageValues.ThreeStdDevAbove">
            <summary>
            3 standard deviations above the average
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHighlightCellsAboveAverageValues.ThreeStdDevBelow">
            <summary>
            3 standard deviations below the average
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLConditionalFormatting">
            <summary>
            Encapsulates properties and methods for conditional formatting. This simulates the DocumentFormat.OpenXml.Spreadsheet.ConditionalFormatting class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.#ctor(System.String,System.String)">
            <summary>
            Initializes an instance of SLConditionalFormatting, given cell references of opposite cells in a cell range.
            </summary>
            <param name="StartCellReference">The cell reference of the start cell of the cell range to be conditionally formatted, such as "A1". This is typically the top-left cell.</param>
            <param name="EndCellReference">The cell reference of the end cell of the cell range to be conditionally formatted, such as "A1". This is typically the bottom-right cell.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes an instance of SLConditionalFormatting, given row and column indices of opposite cells in a cell range.
            </summary>
            <param name="StartRowIndex">The row index of the start row. This is typically the top row.</param>
            <param name="StartColumnIndex">The column index of the start column. This is typically the left-most column.</param>
            <param name="EndRowIndex">The row index of the end row. This is typically the bottom row.</param>
            <param name="EndColumnIndex">The column index of the end column. This is typically the right-most column.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.SetDataBar(SpreadsheetLight.SLConditionalFormatDataBarValues)">
            <summary>
            Set a data bar formatting with built-in types.
            </summary>
            <param name="DataBar">A built-in data bar type.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.SetCustomDataBar(System.Boolean,System.UInt32,System.UInt32,SpreadsheetLight.SLConditionalFormatMinMaxValues,System.String,SpreadsheetLight.SLConditionalFormatMinMaxValues,System.String,System.Drawing.Color)">
            <summary>
            Set a custom data bar formatting.
            </summary>
            <param name="ShowBarOnly">True to show only the data bar. False to show both data bar and value.</param>
            <param name="MinLength">The minimum length of the data bar as a percentage of the cell width. The default value is 10.</param>
            <param name="MaxLength">The maximum length of the data bar as a percentage of the cell width. The default value is 90.</param>
            <param name="ShortestBarType">The conditional format type for the shortest bar.</param>
            <param name="ShortestBarValue">The value for the shortest bar. If <paramref name="ShortestBarType"/> is Value, you can just set this to "0".</param>
            <param name="LongestBarType">The conditional format type for the longest bar.</param>
            <param name="LongestBarValue">The value for the longest bar. If <paramref name="LongestBarType"/> is Value, you can just set this to "0".</param>
            <param name="BarColor">The color of the data bar.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.SetCustomDataBar(System.Boolean,System.UInt32,System.UInt32,SpreadsheetLight.SLConditionalFormatMinMaxValues,System.String,SpreadsheetLight.SLConditionalFormatMinMaxValues,System.String,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set a custom data bar formatting.
            </summary>
            <param name="ShowBarOnly">True to show only the data bar. False to show both data bar and value.</param>
            <param name="MinLength">The minimum length of the data bar as a percentage of the cell width. The default value is 10.</param>
            <param name="MaxLength">The maximum length of the data bar as a percentage of the cell width. The default value is 90.</param>
            <param name="ShortestBarType">The conditional format type for the shortest bar.</param>
            <param name="ShortestBarValue">The value for the shortest bar. If <paramref name="ShortestBarType"/> is Value, you can just set this to "0".</param>
            <param name="LongestBarType">The conditional format type for the longest bar.</param>
            <param name="LongestBarValue">The value for the longest bar. If <paramref name="LongestBarType"/> is Value, you can just set this to "0".</param>
            <param name="BarColor">The theme color to be used for the data bar.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.SetCustomDataBar(System.Boolean,System.UInt32,System.UInt32,SpreadsheetLight.SLConditionalFormatMinMaxValues,System.String,SpreadsheetLight.SLConditionalFormatMinMaxValues,System.String,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set a custom data bar formatting.
            </summary>
            <param name="ShowBarOnly">True to show only the data bar. False to show both data bar and value.</param>
            <param name="MinLength">The minimum length of the data bar as a percentage of the cell width. The default value is 10.</param>
            <param name="MaxLength">The maximum length of the data bar as a percentage of the cell width. The default value is 90.</param>
            <param name="ShortestBarType">The conditional format type for the shortest bar.</param>
            <param name="ShortestBarValue">The value for the shortest bar. If <paramref name="ShortestBarType"/> is Value, you can just set this to "0".</param>
            <param name="LongestBarType">The conditional format type for the longest bar.</param>
            <param name="LongestBarValue">The value for the longest bar. If <paramref name="LongestBarType"/> is Value, you can just set this to "0".</param>
            <param name="BarColor">The theme color to be used for the data bar.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.SetCustomDataBar(SpreadsheetLight.SLDataBarOptions)">
            <summary>
            Set a custom data bar formatting.
            </summary>
            <param name="Options">Data bar options.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.SetColorScale(SpreadsheetLight.SLConditionalFormatColorScaleValues)">
            <summary>
            Set a color scale formatting with built-in types.
            </summary>
            <param name="ColorScale">A built-in color scale type.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.SetCustom2ColorScale(SpreadsheetLight.SLConditionalFormatMinMaxValues,System.String,System.Drawing.Color,SpreadsheetLight.SLConditionalFormatMinMaxValues,System.String,System.Drawing.Color)">
            <summary>
            Set a custom 2-color scale.
            </summary>
            <param name="MinType">The conditional format type for the minimum.</param>
            <param name="MinValue">The value for the minimum. If <paramref name="MinType"/> is Value, you can just set this to "0".</param>
            <param name="MinColor">The color for the minimum.</param>
            <param name="MaxType">The conditional format type for the maximum.</param>
            <param name="MaxValue">The value for the maximum. If <paramref name="MaxType"/> is Value, you can just set this to "0".</param>
            <param name="MaxColor">The color for the maximum.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.SetCustom2ColorScale(SpreadsheetLight.SLConditionalFormatMinMaxValues,System.String,System.Drawing.Color,SpreadsheetLight.SLConditionalFormatMinMaxValues,System.String,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set a custom 2-color scale.
            </summary>
            <param name="MinType">The conditional format type for the minimum.</param>
            <param name="MinValue">The value for the minimum. If <paramref name="MinType"/> is Value, you can just set this to "0".</param>
            <param name="MinColor">The color for the minimum.</param>
            <param name="MaxType">The conditional format type for the maximum.</param>
            <param name="MaxValue">The value for the maximum. If <paramref name="MaxType"/> is Value, you can just set this to "0".</param>
            <param name="MaxColor">The theme color for the maximum.</param>
            <param name="MaxColorTint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.SetCustom2ColorScale(SpreadsheetLight.SLConditionalFormatMinMaxValues,System.String,SpreadsheetLight.SLThemeColorIndexValues,System.Double,SpreadsheetLight.SLConditionalFormatMinMaxValues,System.String,System.Drawing.Color)">
            <summary>
            Set a custom 2-color scale.
            </summary>
            <param name="MinType">The conditional format type for the minimum.</param>
            <param name="MinValue">The value for the minimum. If <paramref name="MinType"/> is Value, you can just set this to "0".</param>
            <param name="MinColor">The theme color for the minimum.</param>
            <param name="MinColorTint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="MaxType">The conditional format type for the maximum.</param>
            <param name="MaxValue">The value for the maximum. If <paramref name="MaxType"/> is Value, you can just set this to "0".</param>
            <param name="MaxColor">The color for the maximum.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.SetCustom2ColorScale(SpreadsheetLight.SLConditionalFormatMinMaxValues,System.String,SpreadsheetLight.SLThemeColorIndexValues,System.Double,SpreadsheetLight.SLConditionalFormatMinMaxValues,System.String,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set a custom 2-color scale.
            </summary>
            <param name="MinType">The conditional format type for the minimum.</param>
            <param name="MinValue">The value for the minimum. If <paramref name="MinType"/> is Value, you can just set this to "0".</param>
            <param name="MinColor">The theme color for the minimum.</param>
            <param name="MinColorTint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="MaxType">The conditional format type for the maximum.</param>
            <param name="MaxValue">The value for the maximum. If <paramref name="MaxType"/> is Value, you can just set this to "0".</param>
            <param name="MaxColor">The theme color for the maximum.</param>
            <param name="MaxColorTint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.SetCustom3ColorScale(SpreadsheetLight.SLConditionalFormatMinMaxValues,System.String,System.Drawing.Color,SpreadsheetLight.SLConditionalFormatRangeValues,System.String,System.Drawing.Color,SpreadsheetLight.SLConditionalFormatMinMaxValues,System.String,System.Drawing.Color)">
            <summary>
            Set a custom 3-color scale.
            </summary>
            <param name="MinType">The conditional format type for the minimum.</param>
            <param name="MinValue">The value for the minimum. If <paramref name="MinType"/> is Value, you can just set this to "0".</param>
            <param name="MinColor">The color for the minimum.</param>
            <param name="MidPointType">The conditional format type for the midpoint.</param>
            <param name="MidPointValue">The value for the midpoint.</param>
            <param name="MidPointColor">The color for the midpoint.</param>
            <param name="MaxType">The conditional format type for the maximum.</param>
            <param name="MaxValue">The value for the maximum. If <paramref name="MaxType"/> is Value, you can just set this to "0".</param>
            <param name="MaxColor">The color for the maximum.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.SetCustom3ColorScale(SpreadsheetLight.SLConditionalFormatMinMaxValues,System.String,System.Drawing.Color,SpreadsheetLight.SLConditionalFormatRangeValues,System.String,System.Drawing.Color,SpreadsheetLight.SLConditionalFormatMinMaxValues,System.String,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set a custom 3-color scale.
            </summary>
            <param name="MinType">The conditional format type for the minimum.</param>
            <param name="MinValue">The value for the minimum. If <paramref name="MinType"/> is Value, you can just set this to "0".</param>
            <param name="MinColor">The color for the minimum.</param>
            <param name="MidPointType">The conditional format type for the midpoint.</param>
            <param name="MidPointValue">The value for the midpoint.</param>
            <param name="MidPointColor">The color for the midpoint.</param>
            <param name="MaxType">The conditional format type for the maximum.</param>
            <param name="MaxValue">The value for the maximum. If <paramref name="MaxType"/> is Value, you can just set this to "0".</param>
            <param name="MaxColor">The theme color for the maximum.</param>
            <param name="MaxColorTint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.SetCustom3ColorScale(SpreadsheetLight.SLConditionalFormatMinMaxValues,System.String,System.Drawing.Color,SpreadsheetLight.SLConditionalFormatRangeValues,System.String,SpreadsheetLight.SLThemeColorIndexValues,System.Double,SpreadsheetLight.SLConditionalFormatMinMaxValues,System.String,System.Drawing.Color)">
            <summary>
            Set a custom 3-color scale.
            </summary>
            <param name="MinType">The conditional format type for the minimum.</param>
            <param name="MinValue">The value for the minimum. If <paramref name="MinType"/> is Value, you can just set this to "0".</param>
            <param name="MinColor">The color for the minimum.</param>
            <param name="MidPointType">The conditional format type for the midpoint.</param>
            <param name="MidPointValue">The value for the midpoint.</param>
            <param name="MidPointColor">The theme color for the midpoint.</param>
            <param name="MidPointColorTint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="MaxType">The conditional format type for the maximum.</param>
            <param name="MaxValue">The value for the maximum. If <paramref name="MaxType"/> is Value, you can just set this to "0".</param>
            <param name="MaxColor">The color for the maximum.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.SetCustom3ColorScale(SpreadsheetLight.SLConditionalFormatMinMaxValues,System.String,System.Drawing.Color,SpreadsheetLight.SLConditionalFormatRangeValues,System.String,SpreadsheetLight.SLThemeColorIndexValues,System.Double,SpreadsheetLight.SLConditionalFormatMinMaxValues,System.String,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set a custom 3-color scale.
            </summary>
            <param name="MinType">The conditional format type for the minimum.</param>
            <param name="MinValue">The value for the minimum. If <paramref name="MinType"/> is Value, you can just set this to "0".</param>
            <param name="MinColor">The color for the minimum.</param>
            <param name="MidPointType">The conditional format type for the midpoint.</param>
            <param name="MidPointValue">The value for the midpoint.</param>
            <param name="MidPointColor">The theme color for the midpoint.</param>
            <param name="MidPointColorTint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="MaxType">The conditional format type for the maximum.</param>
            <param name="MaxValue">The value for the maximum. If <paramref name="MaxType"/> is Value, you can just set this to "0".</param>
            <param name="MaxColor">The theme color for the maximum.</param>
            <param name="MaxColorTint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.SetCustom3ColorScale(SpreadsheetLight.SLConditionalFormatMinMaxValues,System.String,SpreadsheetLight.SLThemeColorIndexValues,System.Double,SpreadsheetLight.SLConditionalFormatRangeValues,System.String,System.Drawing.Color,SpreadsheetLight.SLConditionalFormatMinMaxValues,System.String,System.Drawing.Color)">
            <summary>
            Set a custom 3-color scale.
            </summary>
            <param name="MinType">The conditional format type for the minimum.</param>
            <param name="MinValue">The value for the minimum. If <paramref name="MinType"/> is Value, you can just set this to "0".</param>
            <param name="MinColor">The theme color for the minimum.</param>
            <param name="MinColorTint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="MidPointType">The conditional format type for the midpoint.</param>
            <param name="MidPointValue">The value for the midpoint.</param>
            <param name="MidPointColor">The color for the midpoint.</param>
            <param name="MaxType">The conditional format type for the maximum.</param>
            <param name="MaxValue">The value for the maximum. If <paramref name="MaxType"/> is Value, you can just set this to "0".</param>
            <param name="MaxColor">The color for the maximum.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.SetCustom3ColorScale(SpreadsheetLight.SLConditionalFormatMinMaxValues,System.String,SpreadsheetLight.SLThemeColorIndexValues,System.Double,SpreadsheetLight.SLConditionalFormatRangeValues,System.String,System.Drawing.Color,SpreadsheetLight.SLConditionalFormatMinMaxValues,System.String,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set a custom 3-color scale.
            </summary>
            <param name="MinType">The conditional format type for the minimum.</param>
            <param name="MinValue">The value for the minimum. If <paramref name="MinType"/> is Value, you can just set this to "0".</param>
            <param name="MinColor">The theme color for the minimum.</param>
            <param name="MinColorTint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="MidPointType">The conditional format type for the midpoint.</param>
            <param name="MidPointValue">The value for the midpoint.</param>
            <param name="MidPointColor">The color for the midpoint.</param>
            <param name="MaxType">The conditional format type for the maximum.</param>
            <param name="MaxValue">The value for the maximum. If <paramref name="MaxType"/> is Value, you can just set this to "0".</param>
            <param name="MaxColor">The theme color for the maximum.</param>
            <param name="MaxColorTint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.SetCustom3ColorScale(SpreadsheetLight.SLConditionalFormatMinMaxValues,System.String,SpreadsheetLight.SLThemeColorIndexValues,System.Double,SpreadsheetLight.SLConditionalFormatRangeValues,System.String,SpreadsheetLight.SLThemeColorIndexValues,System.Double,SpreadsheetLight.SLConditionalFormatMinMaxValues,System.String,System.Drawing.Color)">
            <summary>
            Set a custom 3-color scale.
            </summary>
            <param name="MinType">The conditional format type for the minimum.</param>
            <param name="MinValue">The value for the minimum. If <paramref name="MinType"/> is Value, you can just set this to "0".</param>
            <param name="MinColor">The theme color for the minimum.</param>
            <param name="MinColorTint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="MidPointType">The conditional format type for the midpoint.</param>
            <param name="MidPointValue">The value for the midpoint.</param>
            <param name="MidPointColor">The theme color for the midpoint.</param>
            <param name="MidPointColorTint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="MaxType">The conditional format type for the maximum.</param>
            <param name="MaxValue">The value for the maximum. If <paramref name="MaxType"/> is Value, you can just set this to "0".</param>
            <param name="MaxColor">The color for the maximum.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.SetCustom3ColorScale(SpreadsheetLight.SLConditionalFormatMinMaxValues,System.String,SpreadsheetLight.SLThemeColorIndexValues,System.Double,SpreadsheetLight.SLConditionalFormatRangeValues,System.String,SpreadsheetLight.SLThemeColorIndexValues,System.Double,SpreadsheetLight.SLConditionalFormatMinMaxValues,System.String,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set a custom 3-color scale.
            </summary>
            <param name="MinType">The conditional format type for the minimum.</param>
            <param name="MinValue">The value for the minimum. If <paramref name="MinType"/> is Value, you can just set this to "0".</param>
            <param name="MinColor">The theme color for the minimum.</param>
            <param name="MinColorTint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="MidPointType">The conditional format type for the midpoint.</param>
            <param name="MidPointValue">The value for the midpoint.</param>
            <param name="MidPointColor">The theme color for the midpoint.</param>
            <param name="MidPointColorTint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="MaxType">The conditional format type for the maximum.</param>
            <param name="MaxValue">The value for the maximum. If <paramref name="MaxType"/> is Value, you can just set this to "0".</param>
            <param name="MaxColor">The theme color for the maximum.</param>
            <param name="MaxColorTint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.SetIconSet(DocumentFormat.OpenXml.Spreadsheet.IconSetValues)">
            <summary>
            Set an icon set formatting with built-in types.
            </summary>
            <param name="IconSetType">A built-in icon set type.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.SetCustomIconSet(SpreadsheetLight.SLThreeIconSetValues,System.Boolean,System.Boolean,System.Boolean,System.String,SpreadsheetLight.SLConditionalFormatRangeValues,System.Boolean,System.String,SpreadsheetLight.SLConditionalFormatRangeValues)">
            <summary>
            Set a custom 3-icon set.
            </summary>
            <param name="IconSetType">The type of 3-icon set.</param>
            <param name="ReverseIconOrder">True to reverse the order of the icons. False to use the default order.</param>
            <param name="ShowIconOnly">True to show only icons. False to show both icon and value.</param>
            <param name="GreaterThanOrEqual2">True if values are to be greater than or equal to the 2nd range value. False if values are to be strictly greater than.</param>
            <param name="Value2">The 2nd range value.</param>
            <param name="Type2">The conditional format type for the 2nd range value.</param>
            <param name="GreaterThanOrEqual3">True if values are to be greater than or equal to the 3rd range value. False if values are to be strictly greater than.</param>
            <param name="Value3">The 3rd range value.</param>
            <param name="Type3">The conditional format type for the 3rd range value.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.SetCustomIconSet(SpreadsheetLight.SLFourIconSetValues,System.Boolean,System.Boolean,System.Boolean,System.String,SpreadsheetLight.SLConditionalFormatRangeValues,System.Boolean,System.String,SpreadsheetLight.SLConditionalFormatRangeValues,System.Boolean,System.String,SpreadsheetLight.SLConditionalFormatRangeValues)">
            <summary>
            Set a custom 4-icon set.
            </summary>
            <param name="IconSetType">The type of 4-icon set.</param>
            <param name="ReverseIconOrder">True to reverse the order of the icons. False to use the default order.</param>
            <param name="ShowIconOnly">True to show only icons. False to show both icon and value.</param>
            <param name="GreaterThanOrEqual2">True if values are to be greater than or equal to the 2nd range value. False if values are to be strictly greater than.</param>
            <param name="Value2">The 2nd range value.</param>
            <param name="Type2">The conditional format type for the 2nd range value.</param>
            <param name="GreaterThanOrEqual3">True if values are to be greater than or equal to the 3rd range value. False if values are to be strictly greater than.</param>
            <param name="Value3">The 3rd range value.</param>
            <param name="Type3">The conditional format type for the 3rd range value.</param>
            <param name="GreaterThanOrEqual4">True if values are to be greater than or equal to the 4th range value. False if values are to be strictly greater than.</param>
            <param name="Value4">The 4th range value.</param>
            <param name="Type4">The conditional format type for the 4th range value.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.SetCustomIconSet(SpreadsheetLight.SLFiveIconSetValues,System.Boolean,System.Boolean,System.Boolean,System.String,SpreadsheetLight.SLConditionalFormatRangeValues,System.Boolean,System.String,SpreadsheetLight.SLConditionalFormatRangeValues,System.Boolean,System.String,SpreadsheetLight.SLConditionalFormatRangeValues,System.Boolean,System.String,SpreadsheetLight.SLConditionalFormatRangeValues)">
            <summary>
            Set a custom 5-icon set.
            </summary>
            <param name="IconSetType">The type of 5-icon set.</param>
            <param name="ReverseIconOrder">True to reverse the order of the icons. False to use the default order.</param>
            <param name="ShowIconOnly">True to show only icons. False to show both icon and value.</param>
            <param name="GreaterThanOrEqual2">True if values are to be greater than or equal to the 2nd range value. False if values are to be strictly greater than.</param>
            <param name="Value2">The 2nd range value.</param>
            <param name="Type2">The conditional format type for the 2nd range value.</param>
            <param name="GreaterThanOrEqual3">True if values are to be greater than or equal to the 3rd range value. False if values are to be strictly greater than.</param>
            <param name="Value3">The 3rd range value.</param>
            <param name="Type3">The conditional format type for the 3rd range value.</param>
            <param name="GreaterThanOrEqual4">True if values are to be greater than or equal to the 4th range value. False if values are to be strictly greater than.</param>
            <param name="Value4">The 4th range value.</param>
            <param name="Type4">The conditional format type for the 4th range value.</param>
            <param name="GreaterThanOrEqual5">True if values are to be greater than or equal to the 5th range value. False if values are to be strictly greater than.</param>
            <param name="Value5">The 5th range value.</param>
            <param name="Type5">The conditional format type for the 5th range value.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.SetCustomIconSet(SpreadsheetLight.SLThreeIconSetOptions)">
            <summary>
            Set a custom 3-icon set.
            </summary>
            <param name="Options">3-icon set options.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.SetCustomIconSet(SpreadsheetLight.SLFourIconSetOptions)">
            <summary>
            Set a custom 4-icon set.
            </summary>
            <param name="Options">4-icon set options.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.SetCustomIconSet(SpreadsheetLight.SLFiveIconSetOptions)">
            <summary>
            Set a custom 5-icon set.
            </summary>
            <param name="Options">5-icon set options.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.HighlightCellsGreaterThan(System.Boolean,System.String,SpreadsheetLight.SLHighlightCellsStyleValues)">
            <summary>
            Highlight cells with values greater than a given value.
            </summary>
            <param name="IncludeEquality">True for greater than or equal to. False for strictly greater than.</param>
            <param name="Value">The value to be compared with.</param>
            <param name="HighlightStyle">A built-in highlight style.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.HighlightCellsGreaterThan(System.Boolean,System.String,SpreadsheetLight.SLStyle)">
            <summary>
            Highlight cells with values greater than a given value.
            </summary>
            <param name="IncludeEquality">True for greater than or equal to. False for strictly greater than.</param>
            <param name="Value">The value to be compared with.</param>
            <param name="HighlightStyle">A custom formatted style. Note that only number formats, fonts, borders and fills are used. Note further that for fonts, only italic/bold, underline, color and strikethrough settings are used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.HighlightCellsLessThan(System.Boolean,System.String,SpreadsheetLight.SLHighlightCellsStyleValues)">
            <summary>
            Highlight cells with values less than a given value.
            </summary>
            <param name="IncludeEquality">True for less than or equal to. False for strictly less than.</param>
            <param name="Value">The value to be compared with.</param>
            <param name="HighlightStyle">A built-in highlight style.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.HighlightCellsLessThan(System.Boolean,System.String,SpreadsheetLight.SLStyle)">
            <summary>
            Highlight cells with values less than a given value.
            </summary>
            <param name="IncludeEquality">True for less than or equal to. False for strictly less than.</param>
            <param name="Value">The value to be compared with.</param>
            <param name="HighlightStyle">A custom formatted style. Note that only number formats, fonts, borders and fills are used. Note further that for fonts, only italic/bold, underline, color and strikethrough settings are used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.HighlightCellsBetween(System.Boolean,System.String,System.String,SpreadsheetLight.SLHighlightCellsStyleValues)">
            <summary>
            Highlight cells with values between 2 given values.
            </summary>
            <param name="IsBetween">True for between the 2 given values. False for not between the 2 given values.</param>
            <param name="Value1">The 1st value to be compared with.</param>
            <param name="Value2">The 2nd value to be compared with.</param>
            <param name="HighlightStyle">A built-in highlight style.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.HighlightCellsBetween(System.Boolean,System.String,System.String,SpreadsheetLight.SLStyle)">
            <summary>
            Highlight cells with values between 2 given values.
            </summary>
            <param name="IsBetween">True for between the 2 given values. False for not between the 2 given values.</param>
            <param name="Value1">The 1st value to be compared with.</param>
            <param name="Value2">The 2nd value to be compared with.</param>
            <param name="HighlightStyle">A custom formatted style. Note that only number formats, fonts, borders and fills are used. Note further that for fonts, only italic/bold, underline, color and strikethrough settings are used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.HighlightCellsEqual(System.Boolean,System.String,SpreadsheetLight.SLHighlightCellsStyleValues)">
            <summary>
            Highlight cells with values equal to a given value.
            </summary>
            <param name="IsEqual">True for equal to given value. False for not equal to given value.</param>
            <param name="Value">The value to be compared with.</param>
            <param name="HighlightStyle">A built-in highlight style.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.HighlightCellsEqual(System.Boolean,System.String,SpreadsheetLight.SLStyle)">
            <summary>
            Highlight cells with values equal to a given value.
            </summary>
            <param name="IsEqual">True for equal to given value. False for not equal to given value.</param>
            <param name="Value">The value to be compared with.</param>
            <param name="HighlightStyle">A custom formatted style. Note that only number formats, fonts, borders and fills are used. Note further that for fonts, only italic/bold, underline, color and strikethrough settings are used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.HighlightCellsContainingText(System.Boolean,System.String,SpreadsheetLight.SLHighlightCellsStyleValues)">
            <summary>
            Highlight cells with values containing a given value.
            </summary>
            <param name="IsContaining">True for containing given value. False for not containing given value.</param>
            <param name="Value">The value to be compared with.</param>
            <param name="HighlightStyle">A built-in highlight style.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.HighlightCellsContainingText(System.Boolean,System.String,SpreadsheetLight.SLStyle)">
            <summary>
            Highlight cells with values containing a given value.
            </summary>
            <param name="IsContaining">True for containing given value. False for not containing given value.</param>
            <param name="Value">The value to be compared with.</param>
            <param name="HighlightStyle">A custom formatted style. Note that only number formats, fonts, borders and fills are used. Note further that for fonts, only italic/bold, underline, color and strikethrough settings are used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.HighlightCellsBeginningWith(System.String,SpreadsheetLight.SLHighlightCellsStyleValues)">
            <summary>
            Highlight cells with values beginning with a given value.
            </summary>
            <param name="Value">The value to be compared with.</param>
            <param name="HighlightStyle">A built-in highlight style.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.HighlightCellsBeginningWith(System.String,SpreadsheetLight.SLStyle)">
            <summary>
            Highlight cells with values beginning with a given value.
            </summary>
            <param name="Value">The value to be compared with.</param>
            <param name="HighlightStyle">A custom formatted style. Note that only number formats, fonts, borders and fills are used. Note further that for fonts, only italic/bold, underline, color and strikethrough settings are used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.HighlightCellsEndingWith(System.String,SpreadsheetLight.SLHighlightCellsStyleValues)">
            <summary>
            Highlight cells with values ending with a given value.
            </summary>
            <param name="Value">The value to be compared with.</param>
            <param name="HighlightStyle">A built-in highlight style.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.HighlightCellsEndingWith(System.String,SpreadsheetLight.SLStyle)">
            <summary>
            Highlight cells with values ending with a given value.
            </summary>
            <param name="Value">The value to be compared with.</param>
            <param name="HighlightStyle">A custom formatted style. Note that only number formats, fonts, borders and fills are used. Note further that for fonts, only italic/bold, underline, color and strikethrough settings are used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.HighlightCellsContainingBlanks(System.Boolean,SpreadsheetLight.SLHighlightCellsStyleValues)">
            <summary>
            Highlight cells that are blank.
            </summary>
            <param name="ContainsBlanks">True for containing blanks. False for not containing blanks.</param>
            <param name="HighlightStyle">A built-in highlight style.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.HighlightCellsContainingBlanks(System.Boolean,SpreadsheetLight.SLStyle)">
            <summary>
            Highlight cells that are blank.
            </summary>
            <param name="ContainsBlanks">True for containing blanks. False for not containing blanks.</param>
            <param name="HighlightStyle">A custom formatted style. Note that only number formats, fonts, borders and fills are used. Note further that for fonts, only italic/bold, underline, color and strikethrough settings are used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.HighlightCellsContainingErrors(System.Boolean,SpreadsheetLight.SLHighlightCellsStyleValues)">
            <summary>
            Highlight cells containing errors.
            </summary>
            <param name="ContainsErrors">True for containing errors. False for not containing errors.</param>
            <param name="HighlightStyle">A built-in highlight style.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.HighlightCellsContainingErrors(System.Boolean,SpreadsheetLight.SLStyle)">
            <summary>
            Highlight cells containing errors.
            </summary>
            <param name="ContainsErrors">True for containing errors. False for not containing errors.</param>
            <param name="HighlightStyle">A custom formatted style. Note that only number formats, fonts, borders and fills are used. Note further that for fonts, only italic/bold, underline, color and strikethrough settings are used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.HighlightCellsWithDatesOccurring(DocumentFormat.OpenXml.Spreadsheet.TimePeriodValues,SpreadsheetLight.SLHighlightCellsStyleValues)">
            <summary>
            Highlight cells with date values occurring according to a given time period.
            </summary>
            <param name="DatePeriod">A given time period.</param>
            <param name="HighlightStyle">A built-in highlight style.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.HighlightCellsWithDatesOccurring(DocumentFormat.OpenXml.Spreadsheet.TimePeriodValues,SpreadsheetLight.SLStyle)">
            <summary>
            Highlight cells with date values occurring according to a given time period.
            </summary>
            <param name="DatePeriod">A given time period.</param>
            <param name="HighlightStyle">A custom formatted style. Note that only number formats, fonts, borders and fills are used. Note further that for fonts, only italic/bold, underline, color and strikethrough settings are used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.HighlightCellsWithDuplicates(SpreadsheetLight.SLHighlightCellsStyleValues)">
            <summary>
            Highlight cells with duplicate values.
            </summary>
            <param name="HighlightStyle">A built-in highlight style.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.HighlightCellsWithDuplicates(SpreadsheetLight.SLStyle)">
            <summary>
            Highlight cells with duplicate values.
            </summary>
            <param name="HighlightStyle">A custom formatted style. Note that only number formats, fonts, borders and fills are used. Note further that for fonts, only italic/bold, underline, color and strikethrough settings are used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.HighlightCellsWithUniques(SpreadsheetLight.SLHighlightCellsStyleValues)">
            <summary>
            Highlight cells with unique values.
            </summary>
            <param name="HighlightStyle">A built-in highlight style.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.HighlightCellsWithUniques(SpreadsheetLight.SLStyle)">
            <summary>
            Highlight cells with unique values.
            </summary>
            <param name="HighlightStyle">A custom formatted style. Note that only number formats, fonts, borders and fills are used. Note further that for fonts, only italic/bold, underline, color and strikethrough settings are used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.HighlightCellsInTopRange(System.Boolean,System.UInt32,System.Boolean,SpreadsheetLight.SLHighlightCellsStyleValues)">
            <summary>
            Highlight cells with values in the top/bottom range.
            </summary>
            <param name="IsTopRange">True if in the top range. False if in the bottom range.</param>
            <param name="Rank">The value of X in "Top/Bottom X". If <paramref name="IsPercent"/> is true, then X refers to X%, otherwise it's X number of items.</param>
            <param name="IsPercent">True if referring to percentage. False if referring to number of items.</param>
            <param name="HighlightStyle">A built-in highlight style.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.HighlightCellsInTopRange(System.Boolean,System.UInt32,System.Boolean,SpreadsheetLight.SLStyle)">
            <summary>
            Highlight cells with values in the top/bottom range.
            </summary>
            <param name="IsTopRange">True if in the top range. False if in the bottom range.</param>
            <param name="Rank">The value of X in "Top/Bottom X". If <paramref name="IsPercent"/> is true, then X refers to X%, otherwise it's X number of items.</param>
            <param name="IsPercent">True if referring to percentage. False if referring to number of items.</param>
            <param name="HighlightStyle">A custom formatted style. Note that only number formats, fonts, borders and fills are used. Note further that for fonts, only italic/bold, underline, color and strikethrough settings are used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.HighlightCellsAboveAverage(SpreadsheetLight.SLHighlightCellsAboveAverageValues,SpreadsheetLight.SLHighlightCellsStyleValues)">
            <summary>
            Highlight cells with values compared to the average.
            </summary>
            <param name="AverageType">The type of comparison to the average.</param>
            <param name="HighlightStyle">A built-in highlight style.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.HighlightCellsAboveAverage(SpreadsheetLight.SLHighlightCellsAboveAverageValues,SpreadsheetLight.SLStyle)">
            <summary>
            Highlight cells with values compared to the average.
            </summary>
            <param name="AverageType">The type of comparison to the average.</param>
            <param name="HighlightStyle">A custom formatted style. Note that only number formats, fonts, borders and fills are used. Note further that for fonts, only italic/bold, underline, color and strikethrough settings are used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.HighlightCellsWithFormula(System.String,SpreadsheetLight.SLHighlightCellsStyleValues)">
            <summary>
            Highlight cells with values according to a formula.
            </summary>
            <param name="Formula">The formula to apply.</param>
            <param name="HighlightStyle">A built-in highlight style.</param>
        </member>
        <member name="M:SpreadsheetLight.SLConditionalFormatting.HighlightCellsWithFormula(System.String,SpreadsheetLight.SLStyle)">
            <summary>
            Highlight cells with values according to a formula.
            </summary>
            <param name="Formula">The formula to apply.</param>
            <param name="HighlightStyle">A custom formatted style. Note that only number formats, fonts, borders and fills are used. Note further that for fonts, only italic/bold, underline, color and strikethrough settings are used.</param>
        </member>
        <member name="T:SpreadsheetLight.SLSheetProtection">
            <summary>
            Encapsulates properties and methods for specifying worksheet protection. This simulates the DocumentFormat.OpenXml.Spreadsheet.SheetProtection class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLSheetProtection.#ctor">
            <summary>
            Initializes an instance of SLSheetProtection.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSheetProtection.AllowEditObjects">
            <summary>
            Allow editing of objects even if sheet is protected.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSheetProtection.AllowEditScenarios">
            <summary>
            Allow editing of scenarios even if sheet is protected.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSheetProtection.AllowFormatCells">
            <summary>
            Allow formatting of cells even if sheet is protected.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSheetProtection.AllowFormatColumns">
            <summary>
            Allow formatting of columns even if sheet is protected.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSheetProtection.AllowFormatRows">
            <summary>
            Allow formatting of rows even if sheet is protected.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSheetProtection.AllowInsertColumns">
            <summary>
            Allow insertion of columns even if sheet is protected.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSheetProtection.AllowInsertRows">
            <summary>
            Allow insertion of rows even if sheet is protected.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSheetProtection.AllowInsertHyperlinks">
            <summary>
            Allow insertion of hyperlinks even if sheet is protected.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSheetProtection.AllowDeleteColumns">
            <summary>
            Allow deletion of columns even if sheet is protected.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSheetProtection.AllowDeleteRows">
            <summary>
            Allow deletion of rows even if sheet is protected.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSheetProtection.AllowSelectLockedCells">
            <summary>
            Allow selection of locked cells even if sheet is protected.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSheetProtection.AllowSort">
            <summary>
            Allow sorting even if sheet is protected.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSheetProtection.AllowAutoFilter">
            <summary>
            Allow use of autofilters even if sheet is protected.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSheetProtection.AllowPivotTables">
            <summary>
            Allow use of pivot tables even if sheet is protected.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLSheetProtection.AllowSelectUnlockedCells">
            <summary>
            Allow selection of unlocked cells even if sheet is protected.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Drawing.SLShadowEffect">
            <summary>
            Encapsulates properties and methods for specifying shadow effects.
            This simulates the DocumentFormat.OpenXml.Drawing.InnerShadow and DocumentFormat.OpenXml.Drawing.OuterShadow classes.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLShadowEffect.SetShadowColor(System.Drawing.Color,System.Decimal)">
            <summary>
            Set the shadow color.
            </summary>
            <param name="Color">The color to be used.</param>
            <param name="Transparency">Transparency of the color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLShadowEffect.SetShadowColor(SpreadsheetLight.SLThemeColorIndexValues,System.Double,System.Decimal)">
            <summary>
            Set the shadow color.
            </summary>
            <param name="Color">The theme color used.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="Transparency">Transparency of the color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLShadowEffect.SetPreset(SpreadsheetLight.Drawing.SLShadowPresetValues)">
            <summary>
            Set a shadow using a preset.
            </summary>
            <param name="Preset">The preset to be used.</param>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLShadowEffect.IsInnerShadow">
            <summary>
            doubles as HasShadow variable
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLShadowEffect.Color">
            <summary>
            The shadow color.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLShadowEffect.Transparency">
            <summary>
            Transparency of the shadow color ranging from 0% to 100%. Accurate to 1/1000 of a percent.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLShadowEffect.Size">
            <summary>
            Specifies the size of the shadow in percentage. While there's no restriction in range, consider a range of 1% to 200%. Accurate to 1/1000th of a percent.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLShadowEffect.Blur">
            <summary>
            Shadow blur, ranging from 0 pt to 2147483647 pt (but consider a maximum of 100 pt). Accurate to 1/12700 of a point.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLShadowEffect.Angle">
            <summary>
            Angle of shadow projection, ranging from 0 degrees to 359.9 degrees. 0 degrees means the shadow is to the right of the picture, 90 degrees means it's below, 180 degrees means it's to the left and 270 degrees means it's above. Accurate to 1/60000 of a degree. Default value is 0 degrees.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLShadowEffect.Distance">
            <summary>
            Distance of shadow away from source object, ranging from 0 pt to 2147483647 pt (but consider a maximum of 200 pt). Accurate to 1/12700 of a point. Default value is 0 pt.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLGradientStop.Position">
            <summary>
            The position in percentage ranging from 0% to 100%. Accurate to 1/1000 of a percent.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLFont">
            <summary>
            Encapsulates properties and methods for fonts. This simulates the DocumentFormat.OpenXml.Spreadsheet.Font class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLFont.#ctor">
            <summary>
            Initializes an instance of SLFont. It is recommended to use CreateFont() of the SLDocument class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLFont.SetFont(System.String,System.Double)">
            <summary>
            Set the font, given a font name and font size.
            </summary>
            <param name="FontName">The name of the font to be used.</param>
            <param name="FontSize">The size of the font in points.</param>
        </member>
        <member name="M:SpreadsheetLight.SLFont.SetFont(DocumentFormat.OpenXml.Spreadsheet.FontSchemeValues,System.Double)">
            <summary>
            Set the font, given a font scheme and font size.
            </summary>
            <param name="FontScheme">The font scheme. If None is given, the current theme's minor font will be used (but if the theme is changed, the text remains as of the old theme's minor font instead of the new theme's minor font).</param>
            <param name="FontSize">The size of the font in points.</param>
        </member>
        <member name="M:SpreadsheetLight.SLFont.SetFontThemeColor(SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set the font color with one of the theme colors.
            </summary>
            <param name="ThemeColorIndex">The theme color to be used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLFont.SetFontThemeColor(SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set the font color with one of the theme colors, modifying the theme color with a tint value.
            </summary>
            <param name="ThemeColorIndex">The theme color to be used.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLFont.Clone">
            <summary>
            Clone a new instance of SLFont with identical font settings.
            </summary>
            <returns>An SLFont object with identical font settings.</returns>
        </member>
        <member name="P:SpreadsheetLight.SLFont.FontName">
            <summary>
            Name of the font.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFont.CharacterSet">
            <summary>
            The font character set of the font text. It is recommended not to explicitly set this property. This is used when the given font name is not available on the computer, and a suitable alternative font is used. The character set value is operating system dependent. Possible value (not exhaustive): 0 - ANSI_CHARSET, 1 - DEFAULT_CHARSET, 2 - SYMBOL_CHARSET.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFont.FontFamily">
            <summary>
            The font family of the font text. It is recommended not to explicitly set this property. Values as follows (might not be exhaustive): 0 - Not applicable, 1 - Roman, 2 - Swiss, 3 - Modern, 4 - Script, 5 - Decorative.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFont.Bold">
            <summary>
            Specifies if the font text should be in bold.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFont.Italic">
            <summary>
            Specifies if the font text should be in italic.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFont.Strike">
            <summary>
            Specifies if the font text should have a strikethrough.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFont.Outline">
            <summary>
            Specifies if the inner and outer borders of each character of the font text should be displayed. This makes the font text appear as if in bold.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFont.Shadow">
            <summary>
            Specifies if there's a shadow behind and at the bottom-right of the font text. It is a Macintosh compatibility setting.
            It is recommended not to use this property because SpreadsheetML applications are not required to use this property.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFont.Condense">
            <summary>
            Specifies if the font text should be squeezed together. It is a Macintosh compatibility setting.
            It is recommended not to use this property because SpreadsheetML applications are not required to use this property.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFont.Extend">
            <summary>
            Specifies if the font text should be stretched out. It is a legacy spreadsheet compatibility setting.
            It is recommended not to use this property because SpreadsheetML applications are not required to use this property.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFont.FontColor">
            <summary>
            The color of the font text.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFont.FontSize">
            <summary>
            The size of the font text in points (1 point is 1/72 of an inch).
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFont.Underline">
            <summary>
            Specifies the underline formatting style of the font text.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFont.VerticalAlignment">
            <summary>
            Specifies the vertical position of the font text.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLFont.FontScheme">
            <summary>
            Specifies the font scheme. Used particularly as part of a theme definition. A major font scheme is usually used for heading text. A minor font scheme is used for body text.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLDifferentialFormat">
            <summary>
            Encapsulates properties and methods for specifying incremental formatting. This simulates the DocumentFormat.OpenXml.Spreadsheet.DifferentialFormat and DocumentFormat.OpenXml.Office2010.Excel.DifferentialType classes.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLDifferentialFormat.#ctor">
            <summary>
            Initializes an instance of SLDifferentialFormat.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDifferentialFormat.Alignment">
            <summary>
            The alignment for incremental formatting.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDifferentialFormat.Protection">
            <summary>
            The protection settings for incremental formatting.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDifferentialFormat.FormatCode">
            <summary>
            The numbering format for incremental formatting.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDifferentialFormat.Font">
            <summary>
            The font for incremental formatting.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDifferentialFormat.Fill">
            <summary>
            The fill for incremental formatting.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDifferentialFormat.Border">
            <summary>
            The border for incremental formatting.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Light1">
            <summary>
            Pivot Style Light 1
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Light2">
            <summary>
            Pivot Style Light 2
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Light3">
            <summary>
            Pivot Style Light 3
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Light4">
            <summary>
            Pivot Style Light 4
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Light5">
            <summary>
            Pivot Style Light 5
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Light6">
            <summary>
            Pivot Style Light 6
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Light7">
            <summary>
            Pivot Style Light 7
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Light8">
            <summary>
            Pivot Style Light 8
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Light9">
            <summary>
            Pivot Style Light 9
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Light10">
            <summary>
            Pivot Style Light 10
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Light11">
            <summary>
            Pivot Style Light 11
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Light12">
            <summary>
            Pivot Style Light 12
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Light13">
            <summary>
            Pivot Style Light 13
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Light14">
            <summary>
            Pivot Style Light 14
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Light15">
            <summary>
            Pivot Style Light 15
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Light16">
            <summary>
            Pivot Style Light 16
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Light17">
            <summary>
            Pivot Style Light 17
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Light18">
            <summary>
            Pivot Style Light 18
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Light19">
            <summary>
            Pivot Style Light 19
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Light20">
            <summary>
            Pivot Style Light 20
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Light21">
            <summary>
            Pivot Style Light 21
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Light22">
            <summary>
            Pivot Style Light 22
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Light23">
            <summary>
            Pivot Style Light 23
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Light24">
            <summary>
            Pivot Style Light 24
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Light25">
            <summary>
            Pivot Style Light 25
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Light26">
            <summary>
            Pivot Style Light 26
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Light27">
            <summary>
            Pivot Style Light 27
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Light28">
            <summary>
            Pivot Style Light 28
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Medium1">
            <summary>
            Pivot Style Medium 1
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Medium2">
            <summary>
            Pivot Style Medium 2
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Medium3">
            <summary>
            Pivot Style Medium 3
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Medium4">
            <summary>
            Pivot Style Medium 4
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Medium5">
            <summary>
            Pivot Style Medium 5
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Medium6">
            <summary>
            Pivot Style Medium 6
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Medium7">
            <summary>
            Pivot Style Medium 7
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Medium8">
            <summary>
            Pivot Style Medium 8
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Medium9">
            <summary>
            Pivot Style Medium 9
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Medium10">
            <summary>
            Pivot Style Medium 10
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Medium11">
            <summary>
            Pivot Style Medium 11
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Medium12">
            <summary>
            Pivot Style Medium 12
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Medium13">
            <summary>
            Pivot Style Medium 13
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Medium14">
            <summary>
            Pivot Style Medium 14
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Medium15">
            <summary>
            Pivot Style Medium 15
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Medium16">
            <summary>
            Pivot Style Medium 16
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Medium17">
            <summary>
            Pivot Style Medium 17
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Medium18">
            <summary>
            Pivot Style Medium 18
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Medium19">
            <summary>
            Pivot Style Medium 19
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Medium20">
            <summary>
            Pivot Style Medium 20
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Medium21">
            <summary>
            Pivot Style Medium 21
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Medium22">
            <summary>
            Pivot Style Medium 22
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Medium23">
            <summary>
            Pivot Style Medium 23
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Medium24">
            <summary>
            Pivot Style Medium 24
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Medium25">
            <summary>
            Pivot Style Medium 25
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Medium26">
            <summary>
            Pivot Style Medium 26
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Medium27">
            <summary>
            Pivot Style Medium 27
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Medium28">
            <summary>
            Pivot Style Medium 28
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Dark1">
            <summary>
            Pivot Style Dark 1
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Dark2">
            <summary>
            Pivot Style Dark 2
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Dark3">
            <summary>
            Pivot Style Dark 3
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Dark4">
            <summary>
            Pivot Style Dark 4
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Dark5">
            <summary>
            Pivot Style Dark 5
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Dark6">
            <summary>
            Pivot Style Dark 6
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Dark7">
            <summary>
            Pivot Style Dark 7
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Dark8">
            <summary>
            Pivot Style Dark 8
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Dark9">
            <summary>
            Pivot Style Dark 9
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Dark10">
            <summary>
            Pivot Style Dark 10
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Dark11">
            <summary>
            Pivot Style Dark 11
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Dark12">
            <summary>
            Pivot Style Dark 12
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Dark13">
            <summary>
            Pivot Style Dark 13
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Dark14">
            <summary>
            Pivot Style Dark 14
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Dark15">
            <summary>
            Pivot Style Dark 15
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Dark16">
            <summary>
            Pivot Style Dark 16
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Dark17">
            <summary>
            Pivot Style Dark 17
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Dark18">
            <summary>
            Pivot Style Dark 18
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Dark19">
            <summary>
            Pivot Style Dark 19
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Dark20">
            <summary>
            Pivot Style Dark 20
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Dark21">
            <summary>
            Pivot Style Dark 21
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Dark22">
            <summary>
            Pivot Style Dark 22
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Dark23">
            <summary>
            Pivot Style Dark 23
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Dark24">
            <summary>
            Pivot Style Dark 24
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Dark25">
            <summary>
            Pivot Style Dark 25
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Dark26">
            <summary>
            Pivot Style Dark 26
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Dark27">
            <summary>
            Pivot Style Dark 27
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPivotTableStyleTypeValues.Dark28">
            <summary>
            Pivot Style Dark 28
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Drawing.SLCameraPresetValues">
            <summary>
            Specifies camera preset settings.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLCameraPresetValues.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLCameraPresetValues.IsometricLeftDown">
            <summary>
            Isometric Left Down
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLCameraPresetValues.IsometricRightUp">
            <summary>
            Isometric Right Up
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLCameraPresetValues.IsometricTopUp">
            <summary>
            Isometric Top Up
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLCameraPresetValues.IsometricBottomDown">
            <summary>
            Isometric Bottom Down
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLCameraPresetValues.OffAxis1Left">
            <summary>
            Off Axis 1 Left
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLCameraPresetValues.OffAxis1Right">
            <summary>
            Off Axis 1 Right
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLCameraPresetValues.OffAxis1Top">
            <summary>
            Off Axis 1 Top
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLCameraPresetValues.OffAxis2Left">
            <summary>
            Off Axis 2 Left
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLCameraPresetValues.OffAxis2Right">
            <summary>
            Off Axis 2 Right
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLCameraPresetValues.OffAxis2Top">
            <summary>
            Off Axis 2 Top
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLCameraPresetValues.PerspectiveFront">
            <summary>
            Perspective Front
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLCameraPresetValues.PerspectiveLeft">
            <summary>
            Perspective Left
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLCameraPresetValues.PerspectiveRight">
            <summary>
            Perspective Right
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLCameraPresetValues.PerspectiveBelow">
            <summary>
            Perspective Below
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLCameraPresetValues.PerspectiveAbove">
            <summary>
            Perspective Above
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLCameraPresetValues.PerspectiveRelaxedModerately">
            <summary>
            Perspective Relaxed Moderately
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLCameraPresetValues.PerspectiveRelaxed">
            <summary>
            Perspective Relaxed
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLCameraPresetValues.PerspectiveContrastingLeft">
            <summary>
            Perspective Contrasting Left
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLCameraPresetValues.PerspectiveContrastingRight">
            <summary>
            Perspective Contrasting Right
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLCameraPresetValues.PerspectiveHeroicExtremeLeft">
            <summary>
            Perspective Heroic Extreme Left
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLCameraPresetValues.PerspectiveHeroicExtremeRight">
            <summary>
            Perspective Heroic Extreme Right
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLCameraPresetValues.ObliqueTopLeft">
            <summary>
            Oblique Top Left
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLCameraPresetValues.ObliqueTopRight">
            <summary>
            Oblique Top Right
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLCameraPresetValues.ObliqueBottomLeft">
            <summary>
            Oblique Bottom Left
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLCameraPresetValues.ObliqueBottomRight">
            <summary>
            Oblique Bottom Right
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Drawing.SLRotation3D">
            <summary>
            Encapsulates 3D rotation properties. Works together with SLFormat3D class.
            This simulates some properties of DocumentFormat.OpenXml.Drawing.Scene3DType
            and DocumentFormat.OpenXml.Drawing.Shape3DType classes. The reason for this mixing
            is because Excel separates different properties from both classes into 2 separate sections
            on the user interface (3-D Format and 3-D Rotation). Hence SLRotation3D and SLFormat3D
            classes instead of straightforward mapping of the SDK Scene3DType and Shape3DType classes.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLRotation3D.#ctor">
            <summary>
            Initializes an instance of SLRotation3D.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLRotation3D.SetCameraPreset(SpreadsheetLight.Drawing.SLCameraPresetValues)">
            <summary>
            Set camera settings using a preset.
            </summary>
            <param name="Preset">The preset to be used.</param>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLRotation3D.X">
            <summary>
            Longitude angle ranging from 0 degrees to 359.9 degrees. Accurate to 1/60000 of a degree.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLRotation3D.Y">
            <summary>
            Latitude angle ranging from 0 degrees to 359.9 degrees. Accurate to 1/60000 of a degree.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLRotation3D.Z">
            <summary>
            Revolution angle ranging from 0 degrees to 359.9 degrees. Accurate to 1/60000 of a degree.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLRotation3D.Perspective">
            <summary>
            Perspective angle ranging from 0 degrees to 180 degrees. However, a suggested maximum is 120 degrees.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLRotation3D.DistanceZ">
            <summary>
            Distance from the ground, ranging from -2147483648 pt to 2147483647 pt. However, a suggested range is -4000 pt to 4000 pt.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLDropLines">
            <summary>
            Encapsulates properties and methods for drop lines.
            This simulates the DocumentFormat.OpenXml.Drawing.Charts.DropLines class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLDropLines.ClearShapeProperties">
            <summary>
            Clear all styling shape properties. Use this if you want to start styling from a clean slate.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDropLines.Line">
            <summary>
            Line properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDropLines.Shadow">
            <summary>
            Shadow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDropLines.Glow">
            <summary>
            Glow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDropLines.SoftEdge">
            <summary>
            Soft edge properties.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLPaperSizeValues">
            <summary>
            Paper size
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.LetterPaper">
            <summary>
            Letter paper (8.5 in by 11 in)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.LetterSmallPaper">
            <summary>
            Letter small paper (8.5 in by 11 in)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.TabloidPaper">
            <summary>
            Tabloid paper (11 in by 17 in)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.LedgerPaper">
            <summary>
            Ledger paper (17 in by 11 in)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.LegalPaper">
            <summary>
            Legal paper (8.5 in by 14 in)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.StatementPaper">
            <summary>
            Statement paper (5.5 in by 8.5 in)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.ExecutivePaper">
            <summary>
            Executive paper (7.25 in by 10.5 in)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.A3Paper">
            <summary>
            A3 paper (297 mm by 420 mm)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.A4Paper">
            <summary>
            A4 paper (210 mm by 297 mm)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.A4SmallPaper">
            <summary>
            A4 small paper (210 mm by 297 mm)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.A5Paper">
            <summary>
            A5 paper (148 mm by 210 mm)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.B4Paper">
            <summary>
            B4 paper (250 mm by 353 mm)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.B5Paper">
            <summary>
            B5 paper (176 mm by 250 mm)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.FolioPaper">
            <summary>
            Folio paper (8.5 in by 13 in)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.QuartoPaper">
            <summary>
            Quarto paper (215 mm by 275 mm)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.StandardPaper10by14">
            <summary>
            Standard paper (10 in by 14 in)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.StandardPaper11by17">
            <summary>
            Standard paper (11 in by 17 in)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.NotePaper">
            <summary>
            Note paper (8.5 in by 11 in)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.Number9Envelope">
            <summary>
            #9 envelope (3.875 in by 8.875 in)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.Number10Envelope">
            <summary>
            #10 envelope (4.125 in by 9.5 in)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.Number11Envelope">
            <summary>
            #11 envelope (4.5 in by 10.375 in)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.Number12Envelope">
            <summary>
            #12 envelope (4.75 in by 11 in)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.Number14Envelope">
            <summary>
            #14 envelope (5 in by 11.5 in)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.CPaper">
            <summary>
            C paper (17 in by 22 in)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.DPaper">
            <summary>
            D paper (22 in by 34 in)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.EPaper">
            <summary>
            E paper (34 in by 44 in)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.DLEnvelope">
            <summary>
            DL envelope (110 mm by 220 mm)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.C5Envelope">
            <summary>
            C5 envelope (162 mm by 229 mm)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.C3Envelope">
            <summary>
            C3 envelope (324 mm by 458 mm)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.C4Envelope">
            <summary>
            C4 envelope (229 mm by 324 mm)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.C6Envelope">
            <summary>
            C6 envelope (114 mm by 162 mm)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.C65Envelope">
            <summary>
            C65 envelope (114 mm by 229 mm)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.B4Envelope">
            <summary>
            B4 envelope (250 mm by 353 mm)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.B5Envelope">
            <summary>
            B5 envelope (176 mm by 250 mm)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.B6Envelope">
            <summary>
            B6 envelope (176 mm by 125 mm)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.ItalyEnvelope">
            <summary>
            Italy envelope (110 mm by 230 mm)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.MonarchEnvelope">
            <summary>
            Monarch envelope (3.875 in by 7.5 in)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.SixThreeQuarterEnvelope">
            <summary>
            6 3/4 envelope (3.625 in by 6.5 in)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.USStandardFanfold">
            <summary>
            US standard fanfold (14.875 in by 11 in)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.GermanStandardFanfold">
            <summary>
            German standard fanfold (8.5 in by 12 in)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.GermanLegalFanfold">
            <summary>
            German legal fanfold (8.5 in by 13 in)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.IsoB4">
            <summary>
            ISO B4 (250 mm by 353 mm)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.JapaneseDoublePostcard">
            <summary>
            Japanese double postcard (200 mm by 148 mm)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.StandardPaper9by11">
            <summary>
            Standard paper (9 in by 11 in)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.StandardPaper10by11">
            <summary>
            Standard paper (10 in by 11 in)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.StandardPaper15by11">
            <summary>
            Standard paper (15 in by 11 in)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.InviteEnvelope">
            <summary>
            Invite envelope (220 mm by 220 mm)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.LetterExtraPaper">
            <summary>
            Letter extra paper (9.275 in by 12 in)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.LegalExtraPaper">
            <summary>
            Legal extra paper (9.275 in by 15 in)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.TabloidExtraPaper">
            <summary>
            Tabloid extra paper (11.69 in by 18 in)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.A4ExtraPaper">
            <summary>
            A4 extra paper (236 mm by 322 mm)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.LetterTransversePaper">
            <summary>
            Letter transverse paper (8.275 in by 11 in)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.A4TransversePaper">
            <summary>
            A4 transverse paper (210 mm by 297 mm)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.LetterExtraTransversePaper">
            <summary>
            Letter extra transverse paper (9.275 in by 12 in)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.SuperASuperAA4Paper">
            <summary>
            SuperA/SuperA/A4 paper (227 mm by 356 mm)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.SuperBSuperBA3Paper">
            <summary>
            SuperB/SuperB/A3 paper (305 mm by 487 mm)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.LetterPlusPaper">
            <summary>
            Letter plus paper (8.5 in by 12.69 in)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.A4PlusPaper">
            <summary>
            A4 plus paper (210 mm by 330 mm)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.A5TransversePaper">
            <summary>
            A5 transverse paper (148 mm by 210 mm)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.JisB5TransversePaper">
            <summary>
            JIS B5 transverse paper (182 mm by 257 mm)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.A3ExtraPaper">
            <summary>
            A3 extra paper (322 mm by 445 mm)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.A5ExtraPaper">
            <summary>
            A5 extra paper (174 mm by 235 mm)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.IsoB5ExtraPaper">
            <summary>
            ISO B5 extra paper (201 mm by 276 mm)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.A2Paper">
            <summary>
            A2 paper (420 mm by 594 mm)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.A3TransversePaper">
            <summary>
            A3 transverse paper (297 mm by 420 mm)
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLPaperSizeValues.A3ExtraTransversePaper">
            <summary>
            A3 extra transverse paper (322 mm by 445 mm)
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLHeaderFooterTypeValues">
            <summary>
            The type of header or footer.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHeaderFooterTypeValues.First">
            <summary>
            First page.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHeaderFooterTypeValues.Odd">
            <summary>
            Odd-numbered pages.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHeaderFooterTypeValues.Even">
            <summary>
            Even-numbered pages.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLHeaderFooterFormatCodeValues">
            <summary>
            Header and footer format codes.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHeaderFooterFormatCodeValues.Left">
            <summary>
            This is a positional code. Internally, it's "&amp;L" (without quotes).
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHeaderFooterFormatCodeValues.Center">
            <summary>
            This is a positional code. Internally, it's "&amp;C" (without quotes).
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHeaderFooterFormatCodeValues.Right">
            <summary>
            This is a positional code. Internally, it's "&amp;R" (without quotes).
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHeaderFooterFormatCodeValues.PageNumber">
            <summary>
            Page number. Excel interface displays "&amp;[Page]" but internally it's "&amp;P" (without quotes).
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHeaderFooterFormatCodeValues.NumberOfPages">
            <summary>
            Number of pages. Excel interface displays "&amp;[Pages]" but internally it's "&amp;N" (without quotes).
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHeaderFooterFormatCodeValues.Date">
            <summary>
            Current date. Excel interface displays "&amp;[Date]" but internally it's "&amp;D" (without quotes).
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHeaderFooterFormatCodeValues.Time">
            <summary>
            Current time. Excel interface displays "&amp;[Time]" but internally it's "&amp;T" (without quotes).
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHeaderFooterFormatCodeValues.FilePath">
            <summary>
            File path. Excel interface displays "&amp;[Path]" but internally it's "&amp;Z" (without quotes).
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHeaderFooterFormatCodeValues.FileName">
            <summary>
            File name. Excel interface displays "&amp;[File]" but internally it's "&amp;F" (without quotes).
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHeaderFooterFormatCodeValues.SheetName">
            <summary>
            Sheet name. Excel interface displays "&amp;[Tab]" but internally it's "&amp;A" (without quotes).
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLHeaderFooterFormatCodeValues.ResetFont">
            <summary>
            This resets the font styles. Use this when the previous section of text has formatting and the next section of text should have normal font styles.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLTextImportDataFieldTypeValues">
            <summary>
            The type of data fields to be imported, whether by delimiters/separators or in fixed width.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTextImportDataFieldTypeValues.Delimited">
            <summary>
            Data is separated by character delimiters.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTextImportDataFieldTypeValues.FixedWidth">
            <summary>
            Data is separated by fixed width columns.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLTextImportColumnFormatValues">
            <summary>
            The type of column data format.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTextImportColumnFormatValues.General">
            <summary>
            Numeric values will be converted to numbers, date values to dates and remaining values to text.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTextImportColumnFormatValues.Text">
            <summary>
            Text format.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTextImportColumnFormatValues.DateMDY">
            <summary>
            The value will be parsed as a date in the order of month, day, year.
            Failing that, any given custom date formats will be used to parse the value.
            Failing that, the value is parse generically as a date.
            And failing that, the value is set as text.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTextImportColumnFormatValues.DateDMY">
            <summary>
            The value will be parsed as a date in the order of day, month, year.
            Failing that, any given custom date formats will be used to parse the value.
            Failing that, the value is parse generically as a date.
            And failing that, the value is set as text.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTextImportColumnFormatValues.DateYMD">
            <summary>
            The value will be parsed as a date in the order of year, month, day.
            Failing that, any given custom date formats will be used to parse the value.
            Failing that, the value is parse generically as a date.
            And failing that, the value is set as text.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTextImportColumnFormatValues.DateMYD">
            <summary>
            The value will be parsed as a date in the order of month, year, day.
            Failing that, any given custom date formats will be used to parse the value.
            Failing that, the value is parse generically as a date.
            And failing that, the value is set as text.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTextImportColumnFormatValues.DateDYM">
            <summary>
            The value will be parsed as a date in the order of day, year, month.
            Failing that, any given custom date formats will be used to parse the value.
            Failing that, the value is parse generically as a date.
            And failing that, the value is set as text.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTextImportColumnFormatValues.DateYDM">
            <summary>
            The value will be parsed as a date in the order of year, day, month.
            Failing that, any given custom date formats will be used to parse the value.
            Failing that, the value is parse generically as a date.
            And failing that, the value is set as text.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTextImportColumnFormatValues.Skip">
            <summary>
            This column will be skipped.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLTextImportOptions">
            <summary>
            Text import options for importing text data.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLTextImportOptions.#ctor">
            <summary>
            Initializes an instance of SLTextImportOptions, and assuming that the data source is character delimited.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLTextImportOptions.#ctor(SpreadsheetLight.SLTextImportDataFieldTypeValues)">
            <summary>
            Initializes an instance of SLTextImportOptions.
            </summary>
            <param name="DataFieldType">Whether the data source is character delimited or of fixed width.</param>
        </member>
        <member name="M:SpreadsheetLight.SLTextImportOptions.SetColumnFormat(System.Int32,SpreadsheetLight.SLTextImportColumnFormatValues)">
            <summary>
            Set the column data format type.
            </summary>
            <param name="ColumnIndex">The column index in the data source. This is 1-based indexing, so it's 1 for the 1st data source column, 2 for the 2nd data source column and so on.</param>
            <param name="ColumnFormat">The column data format type.</param>
        </member>
        <member name="M:SpreadsheetLight.SLTextImportOptions.SkipColumn(System.Int32)">
            <summary>
            Skip a particular data source column. This is equivalent to using the SetColumnFormat() function with a Skip data format type.
            </summary>
            <param name="ColumnIndex">The data source column to skip. This is 1-based indexing, so it's 1 for the 1st data source column, 2 for the 2nd data source column and so on.</param>
        </member>
        <member name="M:SpreadsheetLight.SLTextImportOptions.ClearColumnFormats">
            <summary>
            Clear all column data formats. This is effectively making all columns to be of General type.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLTextImportOptions.AddCustomDateFormat(System.String)">
            <summary>
            Add custom date formats (this is the .NET date format code, not Excel's format code).
            This is used to parse any date data into a date, and is done first before trying other
            generic date parsing operations.
            </summary>
            <param name="Format"></param>
        </member>
        <member name="M:SpreadsheetLight.SLTextImportOptions.ClearCustomDateFormats">
            <summary>
            Clear all custom date formats.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLTextImportOptions.SetFixedWidth(System.Int32,System.Int32)">
            <summary>
            Set the width of a column in number of characters for separating data columns.
            This is used when the data source is specified as of fixed width.
            If no width is specified, the DefaultFixedWidth is used.
            </summary>
            <param name="ColumnIndex">The column index of the data source. This is 1-based indexing, so it's 1 for the 1st data source column, 2 for the 2nd data source column and so on.</param>
            <param name="ColumnWidth">The column width in number of characters.</param>
        </member>
        <member name="M:SpreadsheetLight.SLTextImportOptions.Clone">
            <summary>
            Clone an instance of SLTextImportOptions.
            </summary>
            <returns>An SLTextImportOptions object.</returns>
        </member>
        <member name="P:SpreadsheetLight.SLTextImportOptions.DataFieldType">
            <summary>
            Indicates if fields are separated by character delimiters or are of fixed width.
            The default is Delimited.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLTextImportOptions.DefaultFixedWidth">
            <summary>
            The default number of characters when columns are of fixed width.
            If no width is set for a column, this will be used. By default, this is 8 characters.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLTextImportOptions.UseTabDelimiter">
            <summary>
            Indicates if a tab character is a delimiter. By default, this is true.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLTextImportOptions.UseSemicolonDelimiter">
            <summary>
            Indicates if a semicolon is a delimiter. By default, this is false.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLTextImportOptions.UseCommaDelimiter">
            <summary>
            Indicates if a comma is a delimiter. By default, this is false.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLTextImportOptions.UseSpaceDelimiter">
            <summary>
            Indicates if a space character is a delimiter. By default, this is false.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLTextImportOptions.UseCustomDelimiter">
            <summary>
            Indicates if a custom character is used as a delimiter. By default, this is false. Use the CustomDelimiter property to set the custom delimiter character.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLTextImportOptions.CustomDelimiter">
            <summary>
            The custom delimiter character. This is used only when UseCustomDelimiter is true.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLTextImportOptions.MergeDelimiters">
            <summary>
            Indicates if consecutive delimiters are treated as one.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLTextImportOptions.HasTextQualifier">
            <summary>
            Indicates if data enclosed within text qualifiers is taken as text.
            The default is true.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLTextImportOptions.TextQualifier">
            <summary>
            Data enclosed within this qualifier will automatically be taken as text. The text qualifier
            will be removed. The default is the double quote character.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLTextImportOptions.ImportStartRowIndex">
            <summary>
            The row in the text data source to begin importing.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLTextImportOptions.Culture">
            <summary>
            The culture used for parsing numbers and dates. The default is the InvariantCulture.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLTextImportOptions.NumberStyles">
            <summary>
            The number styles used for parsing numeric data. The default is NumberStyles.Any.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLTextImportOptions.Encoding">
            <summary>
            The encoding used to read the data source. The default is Encoding.Default.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLTextImportOptions.PreserveSpace">
            <summary>
            Indicates if space characters in the data source are preserved (after data column separation by delimiters). By default, this is true.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLRun">
            <summary>
            Encapsulates properties and methods for rich text runs. This simulates the DocumentFormat.OpenXml.Spreadsheet.Run class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLRun.#ctor">
            <summary>
            Initializes an instance of SLRun.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLRun.Clone">
            <summary>
            Clone a new instance of SLRun.
            </summary>
            <returns>An SLRun object.</returns>
        </member>
        <member name="P:SpreadsheetLight.SLRun.Font">
            <summary>
            The font styles.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLRun.Text">
            <summary>
            The text.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLConvert">
            <summary>
            Encapsulates methods for miscellaneous convertions.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLConvert.ToColumnName(System.Int32)">
            <summary>
            Get the column name given the column index.
            </summary>
            <param name="ColumnIndex">The column index.</param>
            <returns>The column name.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLConvert.ToColumnIndex(System.String)">
            <summary>
            Get the column index given a cell reference or column name.
            </summary>
            <param name="Input">A cell reference such as "A1" or column name such as "A". If the input is invalid, then -1 is returned.</param>
            <returns>The column index.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLConvert.ToCellReference(System.Int32,System.Int32)">
            <summary>
            Get the cell reference given the row and column index. For example "A1".
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <returns>The cell reference.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLConvert.ToCellReference(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get the cell reference given the row and column index. For example "A1" or "$A$1".
            </summary>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <param name="IsAbsolute">True for absolute reference. False for relative reference.</param>
            <returns>The cell reference.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLConvert.ToCellReference(System.String,System.Int32,System.Int32)">
            <summary>
            Get the cell reference given the worksheet name, and row and column index. For example "Sheet1!A1".
            </summary>
            <param name="WorksheetName">The worksheet name.</param>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <returns>The cell reference.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLConvert.ToCellReference(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get the cell reference given the worksheet name, and row and column index. For example "Sheet1!A1" or "Sheet1!$A$1".
            </summary>
            <param name="WorksheetName">The worksheet name.</param>
            <param name="RowIndex">The row index.</param>
            <param name="ColumnIndex">The column index.</param>
            <param name="IsAbsolute">True for absolute reference. False for relative reference.</param>
            <returns>The cell reference.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLConvert.ToCellRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the cell range reference given a corner cell and its opposite corner cell in a cell range. For example "A1:C5".
            </summary>
            <param name="StartRowIndex">The row index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="StartColumnIndex">The column index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="EndRowIndex">The row index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="EndColumnIndex">The column index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <returns>The cell range reference.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLConvert.ToCellRange(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get the cell range reference given a corner cell and its opposite corner cell in a cell range. For example "A1:C5" or "$A$1:$C$5".
            </summary>
            <param name="StartRowIndex">The row index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="StartColumnIndex">The column index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="EndRowIndex">The row index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="EndColumnIndex">The column index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="IsAbsolute">True for absolute reference. False for relative reference.</param>
            <returns>The cell range reference.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLConvert.ToCellRange(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the cell range reference given a worksheet name, and a corner cell and its opposite corner cell in a cell range. For example "Sheet1!A1:C5".
            </summary>
            <param name="WorksheetName">The worksheet name.</param>
            <param name="StartRowIndex">The row index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="StartColumnIndex">The column index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="EndRowIndex">The row index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="EndColumnIndex">The column index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <returns>The cell range reference.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLConvert.ToCellRange(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get the cell range reference given a worksheet name, and a corner cell and its opposite corner cell in a cell range. For example "Sheet1!A1:C5" or "Sheet1!$A$1:$C$5".
            </summary>
            <param name="WorksheetName">The worksheet name.</param>
            <param name="StartRowIndex">The row index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="StartColumnIndex">The column index of the start cell of the cell range. This is typically the top-left cell.</param>
            <param name="EndRowIndex">The row index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="EndColumnIndex">The column index of the end cell of the cell range. This is typically the bottom-right cell.</param>
            <param name="IsAbsolute">True for absolute reference. False for relative reference.</param>
            <returns>The cell range reference.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLConvert.ToColor(System.String)">
            <summary>
            Convert a color in hexadecimal to a System.Drawing.Color structure.
            </summary>
            <param name="HexValue">The color in hexadecimal.</param>
            <returns>A System.Drawing.Color structure.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLConvert.ToColor(System.Double,System.Double,System.Double)">
            <summary>
            Convert a set of HSL color values to a System.Drawing.Color structure.
            </summary>
            <param name="Hue">The hue measured in degrees ranging from 0 to 360 degrees.</param>
            <param name="Saturation">The saturation ranging from 0.0 to 1.0, where 0.0 is grayscale and 1.0 is the most saturated.</param>
            <param name="Luminance">The luminance (sometimes known as brightness) ranging from 0.0 to 1.0, where 0.0 is effectively black and 1.0 is effectively white.</param>
            <returns>A System.Drawing.Color structure.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLConvert.FromInchToPoint(System.Double)">
            <summary>
            Converts inches to points.
            </summary>
            <param name="Data">A value measured in inches.</param>
            <returns>The converted value in points.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLConvert.FromPointToInch(System.Double)">
            <summary>
            Converts points to inches.
            </summary>
            <param name="Data">A value measured in points.</param>
            <returns>The converted value in inches.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLConvert.FromInchToCentimeter(System.Double)">
            <summary>
            Converts inches to centimeters.
            </summary>
            <param name="Data">A value measured in inches.</param>
            <returns>The converted value in centimeters.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLConvert.FromCentimeterToInch(System.Double)">
            <summary>
            Converts centimeters to inches.
            </summary>
            <param name="Data">A value measured in centimeters.</param>
            <returns>The converted value in inches.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLConvert.FromCentimeterToPoint(System.Double)">
            <summary>
            Converts centimeters to points.
            </summary>
            <param name="Data">A value measured in centimeters.</param>
            <returns>The converted value in points.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLConvert.FromPointToCentimeter(System.Double)">
            <summary>
            Converts points to centimeters.
            </summary>
            <param name="Data">A value measured in points.</param>
            <returns>The converted value in centimeters.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLConvert.FromInchToEmu(System.Double)">
            <summary>
            Converts inches to English Metric Units.
            </summary>
            <param name="Data">A value measured in inches.</param>
            <returns>The converted value in English Metric Units.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLConvert.FromEmuToInch(System.Double)">
            <summary>
            Converts English Metric Units to inches.
            </summary>
            <param name="Data">A value measured in English Metric Units.</param>
            <returns>The converted value in inches.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLConvert.FromPointToEmu(System.Double)">
            <summary>
            Converts points to English Metric Units.
            </summary>
            <param name="Data">A value measured in points.</param>
            <returns>The converted value in English Metric Units.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLConvert.FromEmuToPoint(System.Double)">
            <summary>
            Converts English Metric Units to points.
            </summary>
            <param name="Data">A value measured in English Metric Units.</param>
            <returns>The converted value in points.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLConvert.FromCentimeterToEmu(System.Double)">
            <summary>
            Converts centimeters to English Metric Units.
            </summary>
            <param name="Data">A value measured in centimeters.</param>
            <returns>The converted value in English Metric Units.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLConvert.FromEmuToCentimeter(System.Double)">
            <summary>
            Converts English Metric Units to centimeters.
            </summary>
            <param name="Data">A value measured in English Metric Units.</param>
            <returns>The converted value in centimeters.</returns>
        </member>
        <member name="T:SpreadsheetLight.SLDocumentProperties">
            <summary>
            Encapsulates properties and methods for setting spreadsheet document properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDocumentProperties.Category">
            <summary>
            The category of the document.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDocumentProperties.ContentStatus">
            <summary>
            The status of the content.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDocumentProperties.Creator">
            <summary>
            The creator of the document.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDocumentProperties.Description">
            <summary>
            The summary or abstract of the contents of the document. This might also be the comment section.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDocumentProperties.Keywords">
            <summary>
            A word or set of words describing the document.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDocumentProperties.LastModifiedBy">
            <summary>
            The document is last modified by this person.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDocumentProperties.Subject">
            <summary>
            The topic of the contents of the document.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDocumentProperties.Title">
            <summary>
            The title of the document.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLTextAxis">
            <summary>
            Encapsulates properties and methods for setting chart axes, specifically simulating
            DocumentFormat.OpenXml.Drawing.Charts.CategoryAxis,
            DocumentFormat.OpenXml.Drawing.Charts.DateAxis and
            DocumentFormat.OpenXml.Drawing.Charts.ValueAxis classes.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLTextAxis.ClearShapeProperties">
            <summary>
            Clear all styling shape properties. Use this if you want to start styling from a clean slate.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLTextAxis.SetAsCategoryAxis">
            <summary>
            Set this axis as a category axis. WARNING: This only works if it's a category/date axis. This fails if it's already a value axis.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLTextAxis.SetAsDateAxis">
            <summary>
            Set this axis as a date axis. WARNING: This only works if it's a category/date axis. This fails if it's already a value axis.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLTextAxis.SetAutomaticDateMajorUnit">
            <summary>
            Set the major unit for date axes to be automatic.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLTextAxis.SetDateMajorUnit(System.Int32,DocumentFormat.OpenXml.Drawing.Charts.TimeUnitValues)">
            <summary>
            Set the major unit for date axes.
            </summary>
            <param name="MajorUnit">A positive value. Suggested range is 1 to 999999999 (both inclusive).</param>
            <param name="MajorTimeUnit">The time unit.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLTextAxis.SetAutomaticDateMinorUnit">
            <summary>
            Set the minor unit for date axes to be automatic.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLTextAxis.SetDateMinorUnit(System.Int32,DocumentFormat.OpenXml.Drawing.Charts.TimeUnitValues)">
            <summary>
            Set the minor unit for date axes.
            </summary>
            <param name="MinorUnit">A positive value. Suggested range is 1 to 999999999 (both inclusive).</param>
            <param name="MinorTimeUnit">The time unit.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLTextAxis.SetDisplayUnits(DocumentFormat.OpenXml.Drawing.Charts.BuiltInUnitValues,System.Boolean)">
            <summary>
            Set the display units on the axis. This is for value axis.
            </summary>
            <param name="BuiltInUnit">Built-in unit types.</param>
            <param name="ShowDisplayUnitsLabel">True to show the display units label on the chart. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLTextAxis.RemoveDisplayUnits">
            <summary>
            Remove the display units on the axis. This is for value axis.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLTextAxis.SetAutomaticOtherAxisCrossing">
            <summary>
            Set the corresponding value axis to cross this axis at an automatic value.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLTextAxis.SetOtherAxisCrossing(System.Int32)">
            <summary>
            Set the corresponding value axis to cross this axis at a given category number. Suggested range is 1 to 31999 (both inclusive). This is for category axis. WARNING: Internally, this is used for category, date and value axes. Remember to set the axis type.
            </summary>
            <param name="CategoryNumber">Category number to cross at.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLTextAxis.SetOtherAxisCrossing(System.DateTime)">
            <summary>
            Set the corresponding value axis to cross this axis at a given date. This is for date axis. WARNING: Internally, this is used for category, date and value axes. Remember to set the axis type.
            </summary>
            <param name="DateToBeCrossed">Date to cross at.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLTextAxis.SetOtherAxisCrossing(System.Double)">
            <summary>
            Set the corresponding value axis to cross this axis at a given value. This is for value axis. WARNING: Internally, this is used for category, date and value axes. If it's already a value axis, you can't set the axis type.
            </summary>
            <param name="CrossingAxisValue">Axis value to cross at.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLTextAxis.SetMaximumOtherAxisCrossing">
            <summary>
            Set the corresponding value axis to cross this axis at the maximum value.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLTextAxis.TickLabelSkip">
            <summary>
            This is the interval between labels, and is at least 1. A suggested range is 1 to 255 (both inclusive). This is only for category axes.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLTextAxis.TickMarkSkip">
            <summary>
            This is the interval between tick marks, and is at least 1. A suggested range is 1 to 31999 (both inclusive). This is only for category axes.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLTextAxis.LabelAlignment">
            <summary>
            Label alignment for the category axis. This is ignored for date axes.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLTextAxis.LabelOffset">
            <summary>
            This is the label distance from the axis, ranging from 0 to 1000 (both inclusive). The default is 100.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLTextAxis.MaximumDate">
            <summary>
            The maximum value on the axis. A null value means it's automatically set. WARNING: This is used for date axes. It's also shared with value axes. If it's set for category axes, chart behaviour is not defined.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLTextAxis.MinimumDate">
            <summary>
            The minimum value on the axis. A null value means it's automatically set. WARNING: This is used for date axes. It's also shared with value axes. If it's set for category axes, chart behaviour is not defined.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLTextAxis.MaximumValue">
            <summary>
            The maximum value on the axis. A null value means it's automatically set. WARNING: This is used for value axis. It's also shared with date axes. If it's set for category axes, chart behaviour is not defined.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLTextAxis.MinimumValue">
            <summary>
            The minimum value on the axis. A null value means it's automatically set. WARNING: This is used for value axis. It's also shared with date axes. If it's set for category axes, chart behaviour is not defined.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLTextAxis.ValueMajorUnit">
            <summary>
            The major unit on the axis. A null value means it's automatically set. This is for the value axis.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLTextAxis.ValueMinorUnit">
            <summary>
            The minor unit on the axis. A null value means it's automatically set. This is for the value axis.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLTextAxis.LogarithmicScale">
            <summary>
            Logarithmic scale of the axis, ranging from 2 to 1000 (both inclusive). A null value means it's not used. This is for the value axis.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLTextAxis.BaseUnit">
            <summary>
            The base unit for date axes. A null value means it's automatically set.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLTextAxis.CrossBetween">
            <summary>
            This sets how the axis crosses regarding the tick marks (or position of the axis). Use Between for "between tick marks", and MidpointCategory for "on tick marks".
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLTextAxis.NoMultiLevelLabels">
            <summary>
            Indicates if labels are shown as flat text. If false, then the labels are shown as a hierarchy.
            This is used only for category axes. The default is true.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLBorder">
            <summary>
            Encapsulates properties and methods for specifying cell borders. This simulates the DocumentFormat.OpenXml.Spreadsheet.Border class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLBorder.#ctor">
            <summary>
            Initializes an instance of SLBorder. It is recommended to use CreateBorder() of the SLDocument class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLBorder.RemoveLeftBorder">
            <summary>
            Remove any existing left border.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLBorder.RemoveRightBorder">
            <summary>
            Remove any existing right border.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLBorder.RemoveTopBorder">
            <summary>
            Remove any existing top border.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLBorder.RemoveBottomBorder">
            <summary>
            Remove any existing bottom border.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLBorder.RemoveDiagonalBorder">
            <summary>
            Remove any existing diagonal border.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLBorder.RemoveVerticalBorder">
            <summary>
            Remove any existing vertical border.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLBorder.RemoveHorizontalBorder">
            <summary>
            Remove any existing horizontal border.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLBorder.RemoveAllBorders">
            <summary>
            Remove all borders.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLBorder.SetLeftBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,System.Drawing.Color)">
            <summary>
            Set the left border with a border style and a color.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The border color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLBorder.SetLeftBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set the left border with a border style and a theme color.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The theme color to be used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLBorder.SetLeftBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set the left border with a border style and a theme color, modifying the theme color with a tint value.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The theme color to be used.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLBorder.SetRightBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,System.Drawing.Color)">
            <summary>
            Set the right border with a border style and a color.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The border color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLBorder.SetRightBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set the right border with a border style and a theme color.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The theme color to be used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLBorder.SetRightBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set the right border with a border style and a theme color, modifying the theme color with a tint value.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The theme color to be used.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLBorder.SetTopBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,System.Drawing.Color)">
            <summary>
            Set the top border with a border style and a color.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The border color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLBorder.SetTopBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set the top border with a border style and a theme color.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The theme color to be used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLBorder.SetTopBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set the top border with a border style and a theme color, modifying the theme color with a tint value.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The theme color to be used.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLBorder.SetBottomBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,System.Drawing.Color)">
            <summary>
            Set the bottom border with a border style and a color.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The border color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLBorder.SetBottomBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set the bottom border with a border style and a theme color.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The theme color to be used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLBorder.SetBottomBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set the bottom border with a border style and a theme color, modifying the theme color with a tint value.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The theme color to be used.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLBorder.SetDiagonalBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,System.Drawing.Color)">
            <summary>
            Set the diagonal border with a border style and a color.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The border color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLBorder.SetDiagonalBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set the diagonal border with a border style and a theme color.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The theme color to be used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLBorder.SetDiagonalBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set the diagonal border with a border style and a theme color, modifying the theme color with a tint value.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The theme color to be used.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLBorder.SetVerticalBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,System.Drawing.Color)">
            <summary>
            Set the vertical border with a border style and a color.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The border color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLBorder.SetVerticalBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set the vertical border with a border style and a theme color.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The theme color to be used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLBorder.SetVerticalBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set the vertical border with a border style and a theme color, modifying the theme color with a tint value.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The theme color to be used.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLBorder.SetHorizontalBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,System.Drawing.Color)">
            <summary>
            Set the horizontal border with a border style and a color.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The border color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLBorder.SetHorizontalBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set the horizontal border with a border style and a theme color.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The theme color to be used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLBorder.SetHorizontalBorder(DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues,SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set the horizontal border with a border style and a theme color, modifying the theme color with a tint value.
            </summary>
            <param name="BorderStyle">The border style. Default is none.</param>
            <param name="BorderColor">The theme color to be used.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLBorder.FromBorder(DocumentFormat.OpenXml.Spreadsheet.Border)">
            <summary>
            Form SLBorder from DocumentFormat.OpenXml.Spreadsheet.Border class.
            </summary>
            <param name="border">The source DocumentFormat.OpenXml.Spreadsheet.Border class.</param>
        </member>
        <member name="M:SpreadsheetLight.SLBorder.ToBorder">
            <summary>
            Form a DocumentFormat.OpenXml.Spreadsheet.Border class from SLBorder.
            </summary>
            <returns>A DocumentFormat.OpenXml.Spreadsheet.Border with the properties of this SLBorder class.</returns>
        </member>
        <member name="P:SpreadsheetLight.SLBorder.LeftBorder">
            <summary>
            Encapsulates properties and methods for specifying the left border.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLBorder.RightBorder">
            <summary>
            Encapsulates properties and methods for specifying the right border.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLBorder.TopBorder">
            <summary>
            Encapsulates properties and methods for specifying the top border.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLBorder.BottomBorder">
            <summary>
            Encapsulates properties and methods for specifying the bottom border.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLBorder.DiagonalBorder">
            <summary>
            Encapsulates properties and methods for specifying the diagonal border.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLBorder.VerticalBorder">
            <summary>
            Encapsulates properties and methods for specifying the vertical border.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLBorder.HorizontalBorder">
            <summary>
            Encapsulates properties and methods for specifying the horizontal border.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLBorder.DiagonalUp">
            <summary>
            Specifies if there's a diagonal line from the bottom left corner of the cell to the top right corner of the cell.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLBorder.DiagonalDown">
            <summary>
            Specifies if there's a diagonal line from the top left corner of the cell to the bottom right corner of the cell.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLBorder.Outline">
            <summary>
            Specifies if the left, right, top and bottom borders should be applied to the outside borders of a cell range.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLBorderProperties">
            <summary>
            Encapsulates properties and methods of border properties. This simulates the (abstract) DocumentFormat.OpenXml.Spreadsheet.BorderPropertiesType class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLBorderProperties.SetBorderThemeColor(SpreadsheetLight.SLThemeColorIndexValues)">
            <summary>
            Set the color of the border with one of the theme colors.
            </summary>
            <param name="ThemeColorIndex">The theme color to be used.</param>
        </member>
        <member name="M:SpreadsheetLight.SLBorderProperties.SetBorderThemeColor(SpreadsheetLight.SLThemeColorIndexValues,System.Double)">
            <summary>
            Set the color of the border with one of the theme colors, modifying the theme color with a tint value.
            </summary>
            <param name="ThemeColorIndex">The theme color to be used.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
        </member>
        <member name="M:SpreadsheetLight.SLBorderProperties.RemoveColor">
            <summary>
            Remove any existing color.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLBorderProperties.RemoveBorderStyle">
            <summary>
            Remove any existing border style.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLBorderProperties.Color">
            <summary>
            The border color.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLBorderProperties.BorderStyle">
            <summary>
            The border style. Default is none.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLAlignmentReadingOrderValues">
            <summary>
            Specifies reading order.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLAlignmentReadingOrderValues.ContextDependent">
            <summary>
            Reading order is context dependent.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLAlignmentReadingOrderValues.LeftToRight">
            <summary>
            Reading order is from left to right.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLAlignmentReadingOrderValues.RightToLeft">
            <summary>
            Reading order is from right to left.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLAlignment">
            <summary>
            Encapsulates properties and methods for text alignment in cells. This simulates the DocumentFormat.OpenXml.Spreadsheet.Alignment class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLAlignment.#ctor">
            <summary>
            Initializes an instance of SLAlignment.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLAlignment.Horizontal">
            <summary>
            Specifies the horizontal alignment. Default value is General.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLAlignment.Vertical">
            <summary>
            Specifies the vertical alignment. Default value is Bottom.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLAlignment.TextRotation">
            <summary>
            Specifies the rotation angle of the text, ranging from -90 degrees to 90 degrees. Default value is 0 degrees.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLAlignment.WrapText">
            <summary>
            Specifies if the text in the cell should be wrapped.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLAlignment.Indent">
            <summary>
            Specifies the indent. Each unit value equals 3 spaces.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLAlignment.RelativeIndent">
            <summary>
            This property is used when the class is part of a SLDifferentialFormat class. It specifies the indent value in addition to the given Indent property.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLAlignment.JustifyLastLine">
            <summary>
            Specifies if the last line should be justified (usually for East Asian fonts).
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLAlignment.ShrinkToFit">
            <summary>
            Specifies if the text in the cell should be shrunk to fit the cell.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLAlignment.ReadingOrder">
            <summary>
            Specifies the reading order of the text in the cell.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Drawing.SLLinePropertiesType">
            <summary>
            Encapsulates properties and methods for setting line or border settings.
            This simulates the DocumentFormat.OpenXml.Drawing.LinePropertiesType class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLLinePropertiesType.SetAutomaticColor">
            <summary>
            Set color to be automatic.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLLinePropertiesType.SetNoLine">
            <summary>
            Set no line.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLLinePropertiesType.SetSolidLine(System.Drawing.Color,System.Decimal)">
            <summary>
            Set a solid line given a color for the line and the transparency of the color.
            </summary>
            <param name="Color">The color to be used.</param>
            <param name="Transparency">Transparency of the color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLLinePropertiesType.SetSolidLine(SpreadsheetLight.SLThemeColorIndexValues,System.Double,System.Decimal)">
            <summary>
            Set a solid line given a color for the line and the transparency of the color.
            </summary>
            <param name="Color">The theme color to be used.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="Transparency">Transparency of the color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLLinePropertiesType.SetLinearGradient(SpreadsheetLight.Drawing.SLGradientPresetValues,System.Decimal)">
            <summary>
            Set a linear gradient given a preset setting.
            </summary>
            <param name="Preset">The preset to be used.</param>
            <param name="Angle">The interpolation angle ranging from 0 degrees to 359.9 degrees. 0 degrees mean from left to right, 90 degrees mean from top to bottom, 180 degrees mean from right to left and 270 degrees mean from bottom to top. Accurate to 1/60000 of a degree.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLLinePropertiesType.SetRadialGradient(SpreadsheetLight.Drawing.SLGradientPresetValues,SpreadsheetLight.Drawing.SLGradientDirectionValues)">
            <summary>
            Set a radial gradient given a preset setting.
            </summary>
            <param name="Preset">The preset to be used.</param>
            <param name="Direction">The radial gradient direction.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLLinePropertiesType.SetRectangularGradient(SpreadsheetLight.Drawing.SLGradientPresetValues,SpreadsheetLight.Drawing.SLGradientDirectionValues)">
            <summary>
            Set a rectangular gradient given a preset setting.
            </summary>
            <param name="Preset">The preset to be used.</param>
            <param name="Direction">The rectangular gradient direction.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLLinePropertiesType.SetPathGradient(SpreadsheetLight.Drawing.SLGradientPresetValues)">
            <summary>
            Set a path gradient given a preset setting.
            </summary>
            <param name="Preset">The preset to be used.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLLinePropertiesType.AppendGradientStop(System.Drawing.Color,System.Decimal,System.Decimal)">
            <summary>
            Append a gradient stop given a color, the color's transparency and the position of gradient stop.
            </summary>
            <param name="Color">The color to be used.</param>
            <param name="Transparency">Transparency of the color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
            <param name="Position">The position in percentage ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLLinePropertiesType.AppendGradientStop(SpreadsheetLight.SLThemeColorIndexValues,System.Double,System.Decimal,System.Decimal)">
            <summary>
            Append a gradient stop given a color, the color's transparency and the position of gradient stop.
            </summary>
            <param name="Color">The theme color to be used.</param>
            <param name="Tint">The tint applied to the theme color, ranging from -1.0 to 1.0. Negative tints darken the theme color and positive tints lighten the theme color.</param>
            <param name="Transparency">Transparency of the color ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
            <param name="Position">The position in percentage ranging from 0% to 100%. Accurate to 1/1000 of a percent.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLLinePropertiesType.ClearGradientStops">
            <summary>
            Clear all gradient stops.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLLinePropertiesType.SetArrowHead(DocumentFormat.OpenXml.Drawing.LineEndValues,SpreadsheetLight.Drawing.SLLineSizeValues)">
            <summary>
            Set line arrow head settings. This only makes sense for lines and not border lines.
            </summary>
            <param name="HeadType">The arrow head type.</param>
            <param name="HeadSize">The arrow head size.</param>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLLinePropertiesType.SetArrowTail(DocumentFormat.OpenXml.Drawing.LineEndValues,SpreadsheetLight.Drawing.SLLineSizeValues)">
            <summary>
            Set line arrow tail settings. This only makes sense for lines and not border lines.
            </summary>
            <param name="TailType">The arrow tail type.</param>
            <param name="TailSize">The arrow tail size.</param>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLLinePropertiesType.DashType">
            <summary>
            The dash type.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLLinePropertiesType.JoinType">
            <summary>
            The join type.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLLinePropertiesType.Width">
            <summary>
            Width between 0 pt and 1584 pt. Accurate to 1/12700 of a point.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLLinePropertiesType.CapType">
            <summary>
            The cap type.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLLinePropertiesType.CompoundLineType">
            <summary>
            The compound type.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLLinePropertiesType.Alignment">
            <summary>
            The alignment.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Drawing.SLLineJoinValues">
            <summary>
            Specifies how the end points are joined.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLLineJoinValues.Round">
            <summary>
            For rounded joins.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLLineJoinValues.Bevel">
            <summary>
            For bevelled joins.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLLineJoinValues.Miter">
            <summary>
             For miter joins (square edges).
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Drawing.SLLineSizeValues">
            <summary>
            Specifies the size.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLLineSizeValues.Size1">
            <summary>
            Size 1. Width is small, length is small.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLLineSizeValues.Size2">
            <summary>
            Size 2. Width is small, length is medium.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLLineSizeValues.Size3">
            <summary>
            Size 3. Width is small, length is large.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLLineSizeValues.Size4">
            <summary>
            Size 4. Width is medium, length is small.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLLineSizeValues.Size5">
            <summary>
            Size 5. Width is medium, length is medium.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLLineSizeValues.Size6">
            <summary>
            Size 6. Width is medium, length is large.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLLineSizeValues.Size7">
            <summary>
            Size 7. Width is large, length is small.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLLineSizeValues.Size8">
            <summary>
            Size 8. Width is large, length is medium.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLLineSizeValues.Size9">
            <summary>
            Size 9. Width is large, length is large.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Drawing.SLGradientPresetValues">
            <summary>
            Built-in gradient preset colors.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLGradientPresetValues.EarlySunset">
            <summary>
            Early Sunset
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLGradientPresetValues.LateSunset">
            <summary>
            Late Sunset
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLGradientPresetValues.Nightfall">
            <summary>
            Nightfall
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLGradientPresetValues.Daybreak">
            <summary>
            Daybreak
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLGradientPresetValues.Horizon">
            <summary>
            Horizon
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLGradientPresetValues.Desert">
            <summary>
            Desert
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLGradientPresetValues.Ocean">
            <summary>
            Ocean
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLGradientPresetValues.CalmWater">
            <summary>
            Calm Water
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLGradientPresetValues.Fire">
            <summary>
            Fire
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLGradientPresetValues.Fog">
            <summary>
            Fog
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLGradientPresetValues.Moss">
            <summary>
            Moss
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLGradientPresetValues.Peacock">
            <summary>
            Peacock
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLGradientPresetValues.Wheat">
            <summary>
            Wheat
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLGradientPresetValues.Parchment">
            <summary>
            Parchment
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLGradientPresetValues.Mahogany">
            <summary>
            Mahogany
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLGradientPresetValues.Rainbow">
            <summary>
            Rainbow
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLGradientPresetValues.Rainbow2">
            <summary>
            Rainbow II
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLGradientPresetValues.Gold">
            <summary>
            Gold
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLGradientPresetValues.Gold2">
            <summary>
            Gold II
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLGradientPresetValues.Brass">
            <summary>
            Brass
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLGradientPresetValues.Chrome">
            <summary>
            Chrome
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLGradientPresetValues.Chrome2">
            <summary>
            Chrome II
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLGradientPresetValues.Silver">
            <summary>
            Silver
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLGradientPresetValues.Sapphire">
            <summary>
            Sapphire
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Drawing.SLGradientDirectionValues">
            <summary>
            Specifies the direction for a radial or rectangular gradient type.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLGradientDirectionValues.CenterToTopLeftCorner">
            <summary>
            From center to top left corner.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLGradientDirectionValues.CenterToTopRightCorner">
            <summary>
            From center to top right corner.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLGradientDirectionValues.Center">
            <summary>
            From center outwards.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLGradientDirectionValues.CenterToBottomLeftCorner">
            <summary>
            From center to bottom left corner.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLGradientDirectionValues.CenterToBottomRightCorner">
            <summary>
            From center to bottom right corner.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Drawing.SLShadowPresetValues">
            <summary>
            Built-in shadow preset values.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLShadowPresetValues.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLShadowPresetValues.OuterDiagonalBottomRight">
            <summary>
            Outer Diagonal Bottom Right
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLShadowPresetValues.OuterBottom">
            <summary>
            Outer Bottom
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLShadowPresetValues.OuterDiagonalBottomLeft">
            <summary>
            Outer Diagonal Bottom Left
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLShadowPresetValues.OuterRight">
            <summary>
            Outer Right
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLShadowPresetValues.OuterCenter">
            <summary>
            Outer Center
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLShadowPresetValues.OuterLeft">
            <summary>
            Outer Left
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLShadowPresetValues.OuterDiagonalTopRight">
            <summary>
            Outer Diagonal Top Right
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLShadowPresetValues.OuterTop">
            <summary>
            Outer Top
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLShadowPresetValues.OuterDiagonalTopLeft">
            <summary>
            Outer Diagonal Top Left
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLShadowPresetValues.InnerDiagonalTopLeft">
            <summary>
            Inner Diagonal Top Left
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLShadowPresetValues.InnerTop">
            <summary>
            Inner Top
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLShadowPresetValues.InnerDiagonalTopRight">
            <summary>
            Inner Diagonal Top Right
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLShadowPresetValues.InnerLeft">
            <summary>
            Inner Left
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLShadowPresetValues.InnerCenter">
            <summary>
            Inner Center
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLShadowPresetValues.InnerRight">
            <summary>
            Inner Right
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLShadowPresetValues.InnerDiagonalBottomLeft">
            <summary>
            Inner Diagonal Bottom Left
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLShadowPresetValues.InnerBottom">
            <summary>
            Inner Bottom
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLShadowPresetValues.InnerDiagonalBottomRight">
            <summary>
            Inner Diagonal Bottom Right
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLShadowPresetValues.PerspectiveDiagonalUpperLeft">
            <summary>
            Perspective Diagonal Upper Left
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLShadowPresetValues.PerspectiveDiagonalUpperRight">
            <summary>
            Perspective Diagonal Upper Right
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLShadowPresetValues.PerspectiveBelow">
            <summary>
            Perspective Below
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLShadowPresetValues.PerspectiveDiagonalLowerLeft">
            <summary>
            Perspective Diagonal Lower Left
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLShadowPresetValues.PerspectiveDiagonalLowerRight">
            <summary>
            Perspective Diagonal Lower Right
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Drawing.SLTextVerticalAlignment">
            <summary>
            Vertical text alignment.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLTextVerticalAlignment.Top">
            <summary>
            Top
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLTextVerticalAlignment.Middle">
            <summary>
            Middle
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLTextVerticalAlignment.Bottom">
            <summary>
            Bottom
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLTextVerticalAlignment.TopCentered">
            <summary>
            Top Centered
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLTextVerticalAlignment.MiddleCentered">
            <summary>
            Middle Centered
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLTextVerticalAlignment.BottomCentered">
            <summary>
            Bottom Centered
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Drawing.SLTextHorizontalAlignment">
            <summary>
            Horizontal text alignment.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLTextHorizontalAlignment.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLTextHorizontalAlignment.Center">
            <summary>
            Center
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLTextHorizontalAlignment.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLTextHorizontalAlignment.RightMiddle">
            <summary>
            Right Middle
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLTextHorizontalAlignment.CenterMiddle">
            <summary>
            Center Middle
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Drawing.SLTextHorizontalAlignment.LeftMiddle">
            <summary>
            Left Middle
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Drawing.SLShapeProperties.ToCShapeProperties(System.Boolean)">
            <summary>
            This is for C.ShapeProperties
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpreadsheetLight.Drawing.SLGradientFill.Angle">
            <summary>
            The interpolation angle ranging from 0 degrees to 359.9 degrees. 0 degrees mean from left to right, 90 degrees mean from top to bottom, 180 degrees mean from right to left and 270 degrees mean from bottom to top. Accurate to 1/60000 of a degree.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLSideWall">
            <summary>
            Encapsulates properties and methods for setting the side wall of 3D charts.
            This simulates the DocumentFormat.OpenXml.Drawing.Charts.SideWall class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLSideWall.ClearShapeProperties">
            <summary>
            Clear all styling shape properties. Use this if you want to start styling from a clean slate.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLSideWall.Fill">
            <summary>
            Fill properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLSideWall.Border">
            <summary>
            Border properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLSideWall.Shadow">
            <summary>
            Shadow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLSideWall.Glow">
            <summary>
            Glow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLSideWall.SoftEdge">
            <summary>
            Soft edge properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLSideWall.Format3D">
            <summary>
            3D format properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLSideWall.Rotation3D">
            <summary>
            3D rotation properties.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLTotalsRowFunctionValues">
            <summary>
            Totals row function types.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTotalsRowFunctionValues.Average">
            <summary>
            Average
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTotalsRowFunctionValues.Count">
            <summary>
            Count non-empty cells
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTotalsRowFunctionValues.CountNumbers">
            <summary>
            Count numbers
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTotalsRowFunctionValues.Maximum">
            <summary>
            Maximum
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTotalsRowFunctionValues.Minimum">
            <summary>
            Minimum
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTotalsRowFunctionValues.StandardDeviation">
            <summary>
            Standard deviation
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTotalsRowFunctionValues.Sum">
            <summary>
            Sum
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLTotalsRowFunctionValues.Variance">
            <summary>
            Variance
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLTable">
            <summary>
            Encapsulates properties and methods for specifying tables. This simulates the DocumentFormat.OpenXml.Spreadsheet.Table class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLTable.SetTableStyle(SpreadsheetLight.SLTableStyleTypeValues)">
            <summary>
            Set the table style with a built-in style.
            </summary>
            <param name="TableStyle">A built-in table style.</param>
        </member>
        <member name="M:SpreadsheetLight.SLTable.RemoveTotalRowLabelFunction(System.Int32)">
            <summary>
            Remove the label text or function in the totals row.
            </summary>
            <param name="TableColumnIndex">The table column index. For example, 1 for the 1st table column, 2 for the 2nd table column and so on.</param>
        </member>
        <member name="M:SpreadsheetLight.SLTable.SetTotalRowLabel(System.Int32,System.String)">
            <summary>
            Set the label text in the totals row. Be sure to set <see cref="P:SpreadsheetLight.SLTable.HasTotalRow"/> true first.
            </summary>
            <param name="TableColumnIndex">The table column index. For example, 1 for the 1st table column, 2 for the 2nd table column and so on.</param>
            <param name="Label">The label text.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLTable.SetTotalRowFunction(System.Int32,SpreadsheetLight.SLTotalsRowFunctionValues)">
            <summary>
            Set the function in the totals row. Be sure to set <see cref="P:SpreadsheetLight.SLTable.HasTotalRow"/> true first.
            </summary>
            <param name="TableColumnIndex">The table column index. For example, 1 for the 1st table column, 2 for the 2nd table column and so on.</param>
            <param name="TotalsRowFunction">The function type.</param>
            <returns>True if successful. False otherwise.</returns>
        </member>
        <member name="M:SpreadsheetLight.SLTable.Sort(System.Int32,System.Boolean)">
            <summary>
            To sort data within the table. Note that the sorting is only done when the table is inserted into the worksheet.
            </summary>
            <param name="TableColumnIndex">The table column index. For example, 1 for the 1st table column, 2 for the 2nd table column and so on.</param>
            <param name="SortAscending">True to sort in ascending order. False to sort in descending order.</param>
        </member>
        <member name="P:SpreadsheetLight.SLTable.HasAutoFilter">
            <summary>
            Indicates if the table has auto-filter.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLTable.DisplayName">
            <summary>
            There should be no spaces in the given value.
            Because display names of tables have to be unique across the entire spreadsheet,
            this can only be checked when the table is actually inserted into the worksheet.
            If the display name is duplicate, a new display name will be automatically assigned upon insertion.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLTable.HasTotalRow">
            <summary>
            Indicates if the table has a totals row.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLTable.HasBandedRows">
            <summary>
            Indicates if the table has banded rows.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLTable.HasBandedColumns">
            <summary>
            Indicates if the table has banded columns.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLTable.HasFirstColumnStyled">
            <summary>
            Indicates if the table has special formatting for the first column.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLTable.HasLastColumnStyled">
            <summary>
            Indicates if the table has special formatting for the last column.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLCellPointRange">
            <summary>
            This represents a cell reference range in numeric index form.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLCellPointRange.StartRowIndex">
            <summary>
            Start row index.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLCellPointRange.StartColumnIndex">
            <summary>
            Start column index.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLCellPointRange.EndRowIndex">
            <summary>
            End row index.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLCellPointRange.EndColumnIndex">
            <summary>
            End column index.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLCellPointRange.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes an instance of SLCellPointRange.
            </summary>
            <param name="StartRowIndex">The start row index.</param>
            <param name="StartColumnIndex">The start column index.</param>
            <param name="EndRowIndex">The end row index.</param>
            <param name="EndColumnIndex">The end column index.</param>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLInternalChartType">
            <summary>
            These correspond to the internal Open XML SDK classes
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLChartDataDisplayType">
            <summary>
            Data series display types.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartDataDisplayType.Normal">
            <summary>
            Normal or clustered.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartDataDisplayType.Stacked">
            <summary>
            Stacked.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartDataDisplayType.StackedMax">
            <summary>
            100% stacked.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLColumnChartType">
            <summary>
            Built-in column chart types.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLColumnChartType.ClusteredColumn">
            <summary>
            Clustered Column.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLColumnChartType.StackedColumn">
            <summary>
            Stacked Column.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLColumnChartType.StackedColumnMax">
            <summary>
            100% Stacked Column.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLColumnChartType.ClusteredColumn3D">
            <summary>
            3D Clustered Column.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLColumnChartType.StackedColumn3D">
            <summary>
            Stacked Column in 3D.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLColumnChartType.StackedColumnMax3D">
            <summary>
            100% Stacked Column in 3D.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLColumnChartType.Column3D">
            <summary>
            3D Column.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLColumnChartType.ClusteredCylinder">
            <summary>
            Clustered Cylinder.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLColumnChartType.StackedCylinder">
            <summary>
            Stacked Cylinder.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLColumnChartType.StackedCylinderMax">
            <summary>
            100% Stacked Cylinder.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLColumnChartType.Cylinder3D">
            <summary>
            3D Cylinder.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLColumnChartType.ClusteredCone">
            <summary>
            Clustered Cone.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLColumnChartType.StackedCone">
            <summary>
            Stacked Cone.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLColumnChartType.StackedConeMax">
            <summary>
            100% Stacked Cone.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLColumnChartType.Cone3D">
            <summary>
            3D Cone.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLColumnChartType.ClusteredPyramid">
            <summary>
            Clustered Pyramid.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLColumnChartType.StackedPyramid">
            <summary>
            Stacked Pyramid.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLColumnChartType.StackedPyramidMax">
            <summary>
            100% Stacked Pyramid.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLColumnChartType.Pyramid3D">
            <summary>
            3D Pyramid.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLLineChartType">
            <summary>
            Built-in line chart types.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLLineChartType.Line">
            <summary>
            Line.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLLineChartType.StackedLine">
            <summary>
            Stacked Line.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLLineChartType.StackedLineMax">
            <summary>
            100% Stacked Line.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLLineChartType.LineWithMarkers">
            <summary>
            Line with Markers.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLLineChartType.StackedLineWithMarkers">
            <summary>
            Stacked Line with Markers.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLLineChartType.StackedLineWithMarkersMax">
            <summary>
            100% Stacked Line with Markers.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLLineChartType.Line3D">
            <summary>
            3D Line.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLPieChartType">
            <summary>
            Built-in pie chart types.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLPieChartType.Pie">
            <summary>
            Pie.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLPieChartType.Pie3D">
            <summary>
            Pie in 3D.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLPieChartType.PieOfPie">
            <summary>
            Pie of Pie.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLPieChartType.ExplodedPie">
            <summary>
            Exploded Pie.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLPieChartType.ExplodedPie3D">
            <summary>
            Exploded Pie in 3D.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLPieChartType.BarOfPie">
            <summary>
            Bar of Pie
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLBarChartType">
            <summary>
            Built-in bar chart types.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLBarChartType.ClusteredBar">
            <summary>
            Clustered Bar.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLBarChartType.StackedBar">
            <summary>
            Stacked Bar.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLBarChartType.StackedBarMax">
            <summary>
            100% Stacked Bar.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLBarChartType.ClusteredBar3D">
            <summary>
            Clustered Bar in 3D.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLBarChartType.StackedBar3D">
            <summary>
            Stacked Bar in 3D.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLBarChartType.StackedBarMax3D">
            <summary>
            100% Stacked Bar in 3D.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLBarChartType.ClusteredHorizontalCylinder">
            <summary>
            Clustered Horizontal Cylinder.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLBarChartType.StackedHorizontalCylinder">
            <summary>
            Stacked Horizontal Cylinder.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLBarChartType.StackedHorizontalCylinderMax">
            <summary>
            100% Stacked Horizontal Cylinder.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLBarChartType.ClusteredHorizontalCone">
            <summary>
            Clustered Horizontal Cone.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLBarChartType.StackedHorizontalCone">
            <summary>
            Stacked Horizontal Cone.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLBarChartType.StackedHorizontalConeMax">
            <summary>
            100% Stacked Horizontal Cone.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLBarChartType.ClusteredHorizontalPyramid">
            <summary>
            Clustered Horizontal Pyramid.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLBarChartType.StackedHorizontalPyramid">
            <summary>
            Stacked Horizontal Pyramid.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLBarChartType.StackedHorizontalPyramidMax">
            <summary>
            100% Stacked Horizontal Pyramid.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLAreaChartType">
            <summary>
            Built-in area chart types.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLAreaChartType.Area">
            <summary>
            Area.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLAreaChartType.StackedArea">
            <summary>
            Stacked Area.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLAreaChartType.StackedAreaMax">
            <summary>
            100% Stacked Area.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLAreaChartType.Area3D">
            <summary>
            3D Area.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLAreaChartType.StackedArea3D">
            <summary>
            Stacked Area in 3D.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLAreaChartType.StackedAreaMax3D">
            <summary>
            100% Stacked Area in 3D.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLScatterChartType">
            <summary>
            Built-in scatter chart types.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLScatterChartType.ScatterWithOnlyMarkers">
            <summary>
            Scatter with only Markers.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLScatterChartType.ScatterWithSmoothLinesAndMarkers">
            <summary>
            Scatter with Smooth Lines and Markers.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLScatterChartType.ScatterWithSmoothLines">
            <summary>
            Scatter with Smooth Lines.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLScatterChartType.ScatterWithStraightLinesAndMarkers">
            <summary>
            Scatter with Straight Lines and Markers.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLScatterChartType.ScatterWithStraightLines">
            <summary>
            Scatter with Straight Lines.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLStockChartType">
            <summary>
            Built-in stock chart types.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLStockChartType.HighLowClose">
            <summary>
            High-Low-Close.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLStockChartType.OpenHighLowClose">
            <summary>
            Open-High-Low-Close.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLStockChartType.VolumeHighLowClose">
            <summary>
            Volume-High-Low-Close.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLStockChartType.VolumeOpenHighLowClose">
            <summary>
            Volume-Open-High-Low-Close.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLSurfaceChartType">
            <summary>
            Built-in surface chart types.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLSurfaceChartType.Surface3D">
            <summary>
            3D Surface.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLSurfaceChartType.WireframeSurface3D">
            <summary>
            Wiredframe 3D Surface.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLSurfaceChartType.Contour">
            <summary>
            Contour.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLSurfaceChartType.WireframeContour">
            <summary>
            Wireframe Contour.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLDoughnutChartType">
            <summary>
            Built-in doughnut chart types.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLDoughnutChartType.Doughnut">
            <summary>
            Doughnut.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLDoughnutChartType.ExplodedDoughnut">
            <summary>
            Exploded Doughnut.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLBubbleChartType">
            <summary>
            Built-in bubble chart types.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLBubbleChartType.Bubble">
            <summary>
            Bubble.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLBubbleChartType.Bubble3D">
            <summary>
            Bubble with a 3D effect.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLRadarChartType">
            <summary>
            Built-in radar chart types.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLRadarChartType.Radar">
            <summary>
            Radar.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLRadarChartType.RadarWithMarkers">
            <summary>
            Radar with Markers.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLRadarChartType.FilledRadar">
            <summary>
            Filled Radar.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLChartStyle">
            <summary>
            Built-in chart styles.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style1">
            <summary>
            Standard style in black and white.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style2">
            <summary>
            Standard style in theme colors. This is the default.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style3">
            <summary>
            Standard style in tints of accent 1 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style4">
            <summary>
            Standard style in tints of accent 2 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style5">
            <summary>
            Standard style in tints of accent 3 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style6">
            <summary>
            Standard style in tints of accent 4 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style7">
            <summary>
            Standard style in tints of accent 5 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style8">
            <summary>
            Standard style in tints of accent 6 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style9">
            <summary>
            Bordered data series in black and white.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style10">
            <summary>
            Bordered data series in theme colors.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style11">
            <summary>
            Bordered data series in tints of accent 1 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style12">
            <summary>
            Bordered data series in tints of accent 2 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style13">
            <summary>
            Bordered data series in tints of accent 3 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style14">
            <summary>
            Bordered data series in tints of accent 4 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style15">
            <summary>
            Bordered data series in tints of accent 5 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style16">
            <summary>
            Bordered data series in tints of accent 6 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style17">
            <summary>
            Softly blurred data series in black and white.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style18">
            <summary>
            Softly blurred data series in theme colors.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style19">
            <summary>
            Softly blurred data series in tints of accent 1 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style20">
            <summary>
            Softly blurred data series in tints of accent 2 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style21">
            <summary>
            Softly blurred data series in tints of accent 3 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style22">
            <summary>
            Softly blurred data series in tints of accent 4 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style23">
            <summary>
            Softly blurred data series in tints of accent 5 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style24">
            <summary>
            Softly blurred data series in tints of accent 6 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style25">
            <summary>
            Bevelled data series in black and white.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style26">
            <summary>
            Bevelled data series in theme colors.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style27">
            <summary>
            Bevelled data series in tints of accent 1 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style28">
            <summary>
            Bevelled data series in tints of accent 2 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style29">
            <summary>
            Bevelled data series in tints of accent 3 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style30">
            <summary>
            Bevelled data series in tints of accent 4 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style31">
            <summary>
            Bevelled data series in tints of accent 5 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style32">
            <summary>
            Bevelled data series in tints of accent 6 color.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style33">
            <summary>
            Standard style in black and white, with gray-filled plot area (side wall, back wall and floor for 3D charts).
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style34">
            <summary>
            Standard style in theme colors, with gray-filled plot area (side wall, back wall and floor for 3D charts).
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style35">
            <summary>
            Standard style in tints of accent 1 color, with gray-filled plot area (side wall, back wall and floor for 3D charts).
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style36">
            <summary>
            Standard style in tints of accent 2 color, with gray-filled plot area (side wall, back wall and floor for 3D charts).
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style37">
            <summary>
            Standard style in tints of accent 3 color, with gray-filled plot area (side wall, back wall and floor for 3D charts).
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style38">
            <summary>
            Standard style in tints of accent 4 color, with gray-filled plot area (side wall, back wall and floor for 3D charts).
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style39">
            <summary>
            Standard style in tints of accent 5 color, with gray-filled plot area (side wall, back wall and floor for 3D charts).
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style40">
            <summary>
            Standard style in tints of accent 6 color, with gray-filled plot area (side wall, back wall and floor for 3D charts).
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style41">
            <summary>
            Softly blurred and bevelled data series in black and white, with black chart area and gray-filled plot area (side wall, back wall and floor for 3D charts).
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style42">
            <summary>
            Softly blurred and bevelled data series in theme colors, with black chart area and gray-filled plot area (side wall, back wall and floor for 3D charts).
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style43">
            <summary>
            Softly blurred and bevelled data series in tints of accent 1 color, with black chart area and gray-filled plot area (side wall, back wall and floor for 3D charts).
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style44">
            <summary>
            Softly blurred and bevelled data series in tints of accent 2 color, with black chart area and gray-filled plot area (side wall, back wall and floor for 3D charts).
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style45">
            <summary>
            Softly blurred and bevelled data series in tints of accent 3 color, with black chart area and gray-filled plot area (side wall, back wall and floor for 3D charts).
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style46">
            <summary>
            Softly blurred and bevelled data series in tints of accent 4 color, with black chart area and gray-filled plot area (side wall, back wall and floor for 3D charts).
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style47">
            <summary>
            Softly blurred and bevelled data series in tints of accent 5 color, with black chart area and gray-filled plot area (side wall, back wall and floor for 3D charts).
            </summary>
        </member>
        <member name="F:SpreadsheetLight.Charts.SLChartStyle.Style48">
            <summary>
            Softly blurred and bevelled data series in tints of accent 6 color, with black chart area and gray-filled plot area (side wall, back wall and floor for 3D charts).
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLChart">
            <summary>
            Encapsulates properties and methods for a chart to be inserted into a worksheet.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.SetChartStyle(SpreadsheetLight.Charts.SLChartStyle)">
            <summary>
            Set the chart style using one of the built-in styles. WARNING: This is supposedly phased out in Excel 2013. Maybe it'll be replaced by something else, maybe not at all.
            </summary>
            <param name="ChartStyle">A built-in chart style.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.SetChartType(SpreadsheetLight.Charts.SLPieChartType)">
            <summary>
            Set a pie chart using one of the built-in pie chart types.
            </summary>
            <param name="ChartType">A built-in pie chart type.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.SetChartType(SpreadsheetLight.Charts.SLPieChartType,SpreadsheetLight.Charts.SLPieChartOptions)">
            <summary>
            Set a pie chart using one of the built-in pie chart types.
            </summary>
            <param name="ChartType">A built-in pie chart type.</param>
            <param name="Options">Chart customization options.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.SetChartType(SpreadsheetLight.Charts.SLSurfaceChartType)">
            <summary>
            Set a surface chart using one of the built-in surface chart types.
            </summary>
            <param name="ChartType">A built-in surface chart type.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.SetChartType(SpreadsheetLight.Charts.SLRadarChartType)">
            <summary>
            Set a radar chart using one of the built-in radar chart types.
            </summary>
            <param name="ChartType">A built-in radar chart type.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.SetChartType(SpreadsheetLight.Charts.SLBubbleChartType)">
            <summary>
            Set a bubble chart using one of the built-in bubble chart types.
            </summary>
            <param name="ChartType">A built-in bubble chart type.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.SetChartType(SpreadsheetLight.Charts.SLBubbleChartType,SpreadsheetLight.Charts.SLBubbleChartOptions)">
            <summary>
            Set a bubble chart using one of the built-in bubble chart types.
            </summary>
            <param name="ChartType">A built-in bubble chart type.</param>
            <param name="Options">Chart customization options.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.SetChartType(SpreadsheetLight.Charts.SLStockChartType)">
            <summary>
            Set a stock chart using one of the built-in stock chart types.
            </summary>
            <param name="ChartType">A built-in stock chart type.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.SetChartType(SpreadsheetLight.Charts.SLStockChartType,SpreadsheetLight.Charts.SLStockChartOptions)">
            <summary>
            Set a stock chart using one of the built-in stock chart types.
            </summary>
            <param name="ChartType">A built-in stock chart type.</param>
            <param name="Options">Chart customization options.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.SetChartType(SpreadsheetLight.Charts.SLDoughnutChartType)">
            <summary>
            Set a doughnut chart using one of the built-in doughnut chart types.
            </summary>
            <param name="ChartType">A built-in doughnut chart type.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.SetChartType(SpreadsheetLight.Charts.SLDoughnutChartType,SpreadsheetLight.Charts.SLPieChartOptions)">
            <summary>
            Set a doughnut chart using one of the built-in doughnut chart types.
            </summary>
            <param name="ChartType">A built-in doughnut chart type.</param>
            <param name="Options">Chart customization options.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.SetChartType(SpreadsheetLight.Charts.SLScatterChartType)">
            <summary>
            Set a scatter chart using one of the built-in scatter chart types.
            </summary>
            <param name="ChartType">A built-in scatter chart type.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.SetChartType(SpreadsheetLight.Charts.SLAreaChartType)">
            <summary>
            Set an area chart using one of the built-in area chart types.
            </summary>
            <param name="ChartType">A built-in area chart type.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.SetChartType(SpreadsheetLight.Charts.SLAreaChartType,SpreadsheetLight.Charts.SLAreaChartOptions)">
            <summary>
            Set an area chart using one of the built-in area chart types.
            </summary>
            <param name="ChartType">A built-in area chart type.</param>
            <param name="Options">Chart customization options.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.SetChartType(SpreadsheetLight.Charts.SLLineChartType)">
            <summary>
            Set a line chart using one of the built-in line chart types.
            </summary>
            <param name="ChartType">A built-in line chart type.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.SetChartType(SpreadsheetLight.Charts.SLLineChartType,SpreadsheetLight.Charts.SLLineChartOptions)">
            <summary>
            Set a line chart using one of the built-in line chart types.
            </summary>
            <param name="ChartType">A built-in line chart type.</param>
            <param name="Options">Chart customization options.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.SetChartType(SpreadsheetLight.Charts.SLColumnChartType)">
            <summary>
            Set a column chart using one of the built-in column chart types.
            </summary>
            <param name="ChartType">A built-in column chart type.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.SetChartType(SpreadsheetLight.Charts.SLColumnChartType,SpreadsheetLight.Charts.SLBarChartOptions)">
            <summary>
            Set a column chart using one of the built-in column chart types.
            </summary>
            <param name="ChartType">A built-in column chart type.</param>
            <param name="Options">Chart customization options.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.SetChartType(SpreadsheetLight.Charts.SLBarChartType)">
            <summary>
            Set a bar chart using one of the built-in bar chart types.
            </summary>
            <param name="ChartType">A built-in bar chart type.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.SetChartType(SpreadsheetLight.Charts.SLBarChartType,SpreadsheetLight.Charts.SLBarChartOptions)">
            <summary>
            Set a bar chart using one of the built-in bar chart types.
            </summary>
            <param name="ChartType">A built-in bar chart type.</param>
            <param name="Options">Chart customization options.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.SetPlotAreaValueAxes">
            <summary>
            This assumes SetPlotAreaAxes() is already called so fewer properties are set.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.SetChartPosition(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set the position of the chart relative to the top-left of the worksheet.
            </summary>
            <param name="Top">Top position of the chart based on row index. For example, 0.5 means at the half-way point of the 1st row, 2.5 means at the half-way point of the 3rd row.</param>
            <param name="Left">Left position of the chart based on column index. For example, 0.5 means at the half-way point of the 1st column, 2.5 means at the half-way point of the 3rd column.</param>
            <param name="Bottom">Bottom position of the chart based on row index. For example, 5.5 means at the half-way point of the 6th row, 7.5 means at the half-way point of the 8th row.</param>
            <param name="Right">Right position of the chart based on column index. For example, 5.5 means at the half-way point of the 6th column, 7.5 means at the half-way point of the 8th column.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.ShowChartTitle(System.Boolean)">
            <summary>
            Show the chart title.
            </summary>
            <param name="Overlay">True if the title overlaps the plot area. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.HideChartTitle">
            <summary>
            Hide the chart title.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.ShowChartLegend(DocumentFormat.OpenXml.Drawing.Charts.LegendPositionValues,System.Boolean)">
            <summary>
            Show the chart legend.
            </summary>
            <param name="Position">Position of the legend. Default is Right.</param>
            <param name="Overlay">True if the legend overlaps the plot area. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.HideChartLegend">
            <summary>
            Hide the chart legend.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.GetDataSeriesOptions(System.Int32)">
            <summary>
            Get the options for a specific data series.
            </summary>
            <param name="DataSeriesIndex">The index of the data series. This is 1-based indexing, so it's 1 for the 1st data series, 2 for the 2nd data series and so on.</param>
            <returns>The data series options for the specific data series. If the index is out of bounds, a default is returned.</returns>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.SetDataSeriesOptions(System.Int32,SpreadsheetLight.Charts.SLDataSeriesOptions)">
            <summary>
            Set the options for a given data series.
            </summary>
            <param name="DataSeriesIndex">The index of the data series. This is 1-based indexing, so it's 1 for the 1st data series, 2 for the 2nd data series and so on.</param>
            <param name="Options">The data series options.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.ShowPrimaryTextAxis">
            <summary>
            Show the primary text (category/date/value) axis. This has no effect if the chart has no primary axes.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.HidePrimaryTextAxis">
            <summary>
            Hide the primary text (category/date/value) axis. This has no effect if the chart has no primary axes.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.ShowPrimaryValueAxis">
            <summary>
            Show the primary value axis. This has no effect if the chart has no primary axes.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.HidePrimaryValueAxis">
            <summary>
            Hide the primary value axis. This has no effect if the chart has no primary axes.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.ShowDepthAxis">
            <summary>
            Show the depth axis. This has no effect if the chart has no depth axis (that is, not a true 3D chart).
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.HideDepthAxis">
            <summary>
            Hide the depth axis. This has no effect if the chart has no depth axis (that is, not a true 3D chart).
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.ShowSecondaryTextAxis">
            <summary>
            Show the secondary text (category/date/value) axis. This has no effect if the chart has no secondary axes.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.HideSecondaryTextAxis">
            <summary>
            Hide the secondary text (category/date/value) axis. This has no effect if the chart has no secondary axes.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.ShowSecondaryValueAxis">
            <summary>
            Show the secondary value axis. This has no effect if the chart has no secondary axes.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.HideSecondaryValueAxis">
            <summary>
            Hide the secondary value axis. This has no effect if the chart has no secondary axes.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.CreateAreaChartOptions">
            <summary>
            Creates an instance of SLAreaChartOptions with theme information.
            </summary>
            <returns>An SLAreaChartOptions object with theme information.</returns>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.CreateLineChartOptions">
            <summary>
            Creates an instance of SLLineChartOptions with theme information.
            </summary>
            <returns>An SLLineChartOptions object with theme information.</returns>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.CreatePieChartOptions">
            <summary>
            Creates an instance of SLPieChartOptions with theme information.
            </summary>
            <returns>An SLPieChartOptions object with theme information.</returns>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.CreateStockChartOptions">
            <summary>
            Creates an instance of SLStockChartOptions with theme information.
            </summary>
            <returns>An SLStockChartOptions object with theme information.</returns>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.PlotDataSeriesAsDoughnutChart(System.Int32,SpreadsheetLight.Charts.SLDoughnutChartType)">
            <summary>
            Plot a specific data series as a doughnut chart. WARNING: Only weak checks done on whether the resulting combination chart is valid. Use with caution.
            </summary>
            <param name="DataSeriesIndex">The index of the data series. This is 1-based indexing, so it's 1 for the 1st data series, 2 for the 2nd data series and so on.</param>
            <param name="ChartType">A built-in doughnut chart type for this specific data series.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.PlotDataSeriesAsDoughnutChart(System.Int32,SpreadsheetLight.Charts.SLDoughnutChartType,SpreadsheetLight.Charts.SLPieChartOptions)">
            <summary>
            Plot a specific data series as a doughnut chart. WARNING: Only weak checks done on whether the resulting combination chart is valid. Use with caution.
            </summary>
            <param name="DataSeriesIndex">Index of the data series. This is 1-based indexing, so it's 1 for the 1st data series, 2 for the 2nd data series and so on.</param>
            <param name="ChartType">A built-in doughnut chart type for this specific data series.</param>
            <param name="Options">Chart customization options.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.PlotDataSeriesAsBarOfPieChart(System.Int32)">
            <summary>
            Plot a specific data series as a bar-of-pie chart. WARNING: Only weak checks done on whether the resulting combination chart is valid. Use with caution.
            </summary>
            <param name="DataSeriesIndex">The index of the data series. This is 1-based indexing, so it's 1 for the 1st data series, 2 for the 2nd data series and so on.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.PlotDataSeriesAsBarOfPieChart(System.Int32,SpreadsheetLight.Charts.SLPieChartOptions)">
            <summary>
            Plot a specific data series as a bar-of-pie chart. WARNING: Only weak checks done on whether the resulting combination chart is valid. Use with caution.
            </summary>
            <param name="DataSeriesIndex">The index of the data series. This is 1-based indexing, so it's 1 for the 1st data series, 2 for the 2nd data series and so on.</param>
            <param name="Options">Chart customization options.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.PlotDataSeriesAsPieOfPieChart(System.Int32)">
            <summary>
            Plot a specific data series as a pie-of-pie chart. WARNING: Only weak checks done on whether the resulting combination chart is valid. Use with caution.
            </summary>
            <param name="DataSeriesIndex">The index of the data series. This is 1-based indexing, so it's 1 for the 1st data series, 2 for the 2nd data series and so on.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.PlotDataSeriesAsPieOfPieChart(System.Int32,SpreadsheetLight.Charts.SLPieChartOptions)">
            <summary>
            Plot a specific data series as a pie-of-pie chart. WARNING: Only weak checks done on whether the resulting combination chart is valid. Use with caution.
            </summary>
            <param name="DataSeriesIndex">The index of the data series. This is 1-based indexing, so it's 1 for the 1st data series, 2 for the 2nd data series and so on.</param>
            <param name="Options">Chart customization options.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.PlotDataSeriesAsPieChart(System.Int32,System.Boolean)">
            <summary>
            Plot a specific data series as a pie chart. WARNING: Only weak checks done on whether the resulting combination chart is valid. Use with caution.
            </summary>
            <param name="DataSeriesIndex">The index of the data series. This is 1-based indexing, so it's 1 for the 1st data series, 2 for the 2nd data series and so on.</param>
            <param name="IsExploded">True to explode this data series. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.PlotDataSeriesAsPieChart(System.Int32,System.Boolean,SpreadsheetLight.Charts.SLPieChartOptions)">
            <summary>
            Plot a specific data series as a pie chart. WARNING: Only weak checks done on whether the resulting combination chart is valid. Use with caution.
            </summary>
            <param name="DataSeriesIndex">The index of the data series. This is 1-based indexing, so it's 1 for the 1st data series, 2 for the 2nd data series and so on.</param>
            <param name="IsExploded">True to explode this data series. False otherwise.</param>
            <param name="Options">Chart customization options.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.PlotDataSeriesAsPrimaryRadarChart(System.Int32,SpreadsheetLight.Charts.SLRadarChartType)">
            <summary>
            Plot a specific data series as a radar chart on the primary axes. WARNING: Only weak checks done on whether the resulting combination chart is valid. Use with caution.
            </summary>
            <param name="DataSeriesIndex">The index of the data series. This is 1-based indexing, so it's 1 for the 1st data series, 2 for the 2nd data series and so on.</param>
            <param name="ChartType">A built-in radar chart type for this specific data series.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.PlotDataSeriesAsSecondaryRadarChart(System.Int32,SpreadsheetLight.Charts.SLRadarChartType)">
            <summary>
            Plot a specific data series as a radar chart on the secondary axes. If there are no primary axes, it will be plotted on the primary axes instead. WARNING: Only weak checks done on whether the resulting combination chart is valid. Use with caution.
            </summary>
            <param name="DataSeriesIndex">The index of the data series. This is 1-based indexing, so it's 1 for the 1st data series, 2 for the 2nd data series and so on.</param>
            <param name="ChartType">A built-in radar chart type for this specific data series.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.PlotDataSeriesAsPrimaryAreaChart(System.Int32,SpreadsheetLight.Charts.SLChartDataDisplayType)">
            <summary>
            Plot a specific data series as an area chart on the primary axes. WARNING: Only weak checks done on whether the resulting combination chart is valid. Use with caution.
            </summary>
            <param name="DataSeriesIndex">The index of the data series. This is 1-based indexing, so it's 1 for the 1st data series, 2 for the 2nd data series and so on.</param>
            <param name="DisplayType">Chart display type. This corresponds to the 3 typical types in most charts: normal (or clustered), stacked and 100% stacked.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.PlotDataSeriesAsPrimaryAreaChart(System.Int32,SpreadsheetLight.Charts.SLChartDataDisplayType,SpreadsheetLight.Charts.SLAreaChartOptions)">
            <summary>
            Plot a specific data series as an area chart on the primary axes. WARNING: Only weak checks done on whether the resulting combination chart is valid. Use with caution.
            </summary>
            <param name="DataSeriesIndex">The index of the data series. This is 1-based indexing, so it's 1 for the 1st data series, 2 for the 2nd data series and so on.</param>
            <param name="DisplayType">Chart display type. This corresponds to the 3 typical types in most charts: normal (or clustered), stacked and 100% stacked.</param>
            <param name="Options">Chart customization options.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.PlotDataSeriesAsSecondaryAreaChart(System.Int32,SpreadsheetLight.Charts.SLChartDataDisplayType)">
            <summary>
            Plot a specific data series as an area chart on the secondary axes. If there are no primary axes, it will be plotted on the primary axes instead. WARNING: Only weak checks done on whether the resulting combination chart is valid. Use with caution.
            </summary>
            <param name="DataSeriesIndex">The index of the data series. This is 1-based indexing, so it's 1 for the 1st data series, 2 for the 2nd data series and so on.</param>
            <param name="DisplayType">Chart display type. This corresponds to the 3 typical types in most charts: normal (or clustered), stacked and 100% stacked.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.PlotDataSeriesAsSecondaryAreaChart(System.Int32,SpreadsheetLight.Charts.SLChartDataDisplayType,SpreadsheetLight.Charts.SLAreaChartOptions)">
            <summary>
            Plot a specific data series as an area chart on the secondary axes. If there are no primary axes, it will be plotted on the primary axes instead. WARNING: Only weak checks done on whether the resulting combination chart is valid. Use with caution.
            </summary>
            <param name="DataSeriesIndex">The index of the data series. This is 1-based indexing, so it's 1 for the 1st data series, 2 for the 2nd data series and so on.</param>
            <param name="DisplayType">Chart display type. This corresponds to the 3 typical types in most charts: normal (or clustered), stacked and 100% stacked.</param>
            <param name="Options">Chart customization options.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.PlotDataSeriesAsPrimaryColumnChart(System.Int32,SpreadsheetLight.Charts.SLChartDataDisplayType)">
            <summary>
            Plot a specific data series as a column chart on the primary axes. WARNING: Only weak checks done on whether the resulting combination chart is valid. Use with caution.
            </summary>
            <param name="DataSeriesIndex">The index of the data series. This is 1-based indexing, so it's 1 for the 1st data series, 2 for the 2nd data series and so on.</param>
            <param name="DisplayType">Chart display type. This corresponds to the 3 typical types in most charts: normal (or clustered), stacked and 100% stacked.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.PlotDataSeriesAsPrimaryColumnChart(System.Int32,SpreadsheetLight.Charts.SLChartDataDisplayType,SpreadsheetLight.Charts.SLBarChartOptions)">
            <summary>
            Plot a specific data series as a column chart on the primary axes. WARNING: Only weak checks done on whether the resulting combination chart is valid. Use with caution.
            </summary>
            <param name="DataSeriesIndex">The index of the data series. This is 1-based indexing, so it's 1 for the 1st data series, 2 for the 2nd data series and so on.</param>
            <param name="DisplayType">Chart display type. This corresponds to the 3 typical types in most charts: normal (or clustered), stacked and 100% stacked.</param>
            <param name="Options">Chart customization options.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.PlotDataSeriesAsSecondaryColumnChart(System.Int32,SpreadsheetLight.Charts.SLChartDataDisplayType)">
            <summary>
            Plot a specific data series as a column chart on the secondary axes. If there are no primary axes, it will be plotted on the primary axes instead. WARNING: Only weak checks done on whether the resulting combination chart is valid. Use with caution.
            </summary>
            <param name="DataSeriesIndex">The index of the data series. This is 1-based indexing, so it's 1 for the 1st data series, 2 for the 2nd data series and so on.</param>
            <param name="DisplayType">Chart display type. This corresponds to the 3 typical types in most charts: normal (or clustered), stacked and 100% stacked.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.PlotDataSeriesAsSecondaryColumnChart(System.Int32,SpreadsheetLight.Charts.SLChartDataDisplayType,SpreadsheetLight.Charts.SLBarChartOptions)">
            <summary>
            Plot a specific data series as a column chart on the secondary axes. If there are no primary axes, it will be plotted on the primary axes instead. WARNING: Only weak checks done on whether the resulting combination chart is valid. Use with caution.
            </summary>
            <param name="DataSeriesIndex">The index of the data series. This is 1-based indexing, so it's 1 for the 1st data series, 2 for the 2nd data series and so on.</param>
            <param name="DisplayType">Chart display type. This corresponds to the 3 typical types in most charts: normal (or clustered), stacked and 100% stacked.</param>
            <param name="Options">Chart customization options.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.PlotDataSeriesAsPrimaryBarChart(System.Int32,SpreadsheetLight.Charts.SLChartDataDisplayType)">
            <summary>
            Plot a specific data series as a bar chart on the primary axes. WARNING: Only weak checks done on whether the resulting combination chart is valid. Use with caution.
            </summary>
            <param name="DataSeriesIndex">The index of the data series. This is 1-based indexing, so it's 1 for the 1st data series, 2 for the 2nd data series and so on.</param>
            <param name="DisplayType">Chart display type. This corresponds to the 3 typical types in most charts: normal (or clustered), stacked and 100% stacked.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.PlotDataSeriesAsPrimaryBarChart(System.Int32,SpreadsheetLight.Charts.SLChartDataDisplayType,SpreadsheetLight.Charts.SLBarChartOptions)">
            <summary>
            Plot a specific data series as a bar chart on the primary axes. WARNING: Only weak checks done on whether the resulting combination chart is valid. Use with caution.
            </summary>
            <param name="DataSeriesIndex">The index of the data series. This is 1-based indexing, so it's 1 for the 1st data series, 2 for the 2nd data series and so on.</param>
            <param name="DisplayType">Chart display type. This corresponds to the 3 typical types in most charts: normal (or clustered), stacked and 100% stacked.</param>
            <param name="Options">Chart customization options.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.PlotDataSeriesAsSecondaryBarChart(System.Int32,SpreadsheetLight.Charts.SLChartDataDisplayType)">
            <summary>
            Plot a specific data series as a bar chart on the secondary axes. If there are no primary axes, it will be plotted on the primary axes instead. WARNING: Only weak checks done on whether the resulting combination chart is valid. Use with caution.
            </summary>
            <param name="DataSeriesIndex">The index of the data series. This is 1-based indexing, so it's 1 for the 1st data series, 2 for the 2nd data series and so on.</param>
            <param name="DisplayType">Chart display type. This corresponds to the 3 typical types in most charts: normal (or clustered), stacked and 100% stacked.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.PlotDataSeriesAsSecondaryBarChart(System.Int32,SpreadsheetLight.Charts.SLChartDataDisplayType,SpreadsheetLight.Charts.SLBarChartOptions)">
            <summary>
            Plot a specific data series as a bar chart on the secondary axes. If there are no primary axes, it will be plotted on the primary axes instead. WARNING: Only weak checks done on whether the resulting combination chart is valid. Use with caution.
            </summary>
            <param name="DataSeriesIndex">The index of the data series. This is 1-based indexing, so it's 1 for the 1st data series, 2 for the 2nd data series and so on.</param>
            <param name="DisplayType">Chart display type. This corresponds to the 3 typical types in most charts: normal (or clustered), stacked and 100% stacked.</param>
            <param name="Options">Chart customization options.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.PlotDataSeriesAsPrimaryScatterChart(System.Int32,SpreadsheetLight.Charts.SLScatterChartType)">
            <summary>
            Plot a specific data series as a scatter chart on the primary axes. WARNING: Only weak checks done on whether the resulting combination chart is valid. Use with caution.
            </summary>
            <param name="DataSeriesIndex">The index of the data series. This is 1-based indexing, so it's 1 for the 1st data series, 2 for the 2nd data series and so on.</param>
            <param name="ChartType">A built-in scatter chart type for this specific data series.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.PlotDataSeriesAsSecondaryScatterChart(System.Int32,SpreadsheetLight.Charts.SLScatterChartType)">
            <summary>
            Plot a specific data series as a scatter chart on the secondary axes. If there are no primary axes, it will be plotted on the primary axes instead. WARNING: Only weak checks done on whether the resulting combination chart is valid. Use with caution.
            </summary>
            <param name="DataSeriesIndex">The index of the data series. This is 1-based indexing, so it's 1 for the 1st data series, 2 for the 2nd data series and so on.</param>
            <param name="ChartType">A built-in scatter chart type for this specific data series.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.PlotDataSeriesAsPrimaryLineChart(System.Int32,SpreadsheetLight.Charts.SLChartDataDisplayType,System.Boolean)">
            <summary>
            Plot a specific data series as a line chart on the primary axes. WARNING: Only weak checks done on whether the resulting combination chart is valid. Use with caution.
            </summary>
            <param name="DataSeriesIndex">The index of the data series. This is 1-based indexing, so it's 1 for the 1st data series, 2 for the 2nd data series and so on.</param>
            <param name="DisplayType">Chart display type. This corresponds to the 3 typical types in most charts: normal (or clustered), stacked and 100% stacked.</param>
            <param name="WithMarkers">True to display markers. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.PlotDataSeriesAsPrimaryLineChart(System.Int32,SpreadsheetLight.Charts.SLChartDataDisplayType,System.Boolean,SpreadsheetLight.Charts.SLLineChartOptions)">
            <summary>
            Plot a specific data series as a line chart on the primary axes. WARNING: Only weak checks done on whether the resulting combination chart is valid. Use with caution.
            </summary>
            <param name="DataSeriesIndex">The index of the data series. This is 1-based indexing, so it's 1 for the 1st data series, 2 for the 2nd data series and so on.</param>
            <param name="DisplayType">Chart display type. This corresponds to the 3 typical types in most charts: normal (or clustered), stacked and 100% stacked.</param>
            <param name="WithMarkers">True to display markers. False otherwise.</param>
            <param name="Options">Chart customization options.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.PlotDataSeriesAsSecondaryLineChart(System.Int32,SpreadsheetLight.Charts.SLChartDataDisplayType,System.Boolean)">
            <summary>
            Plot a specific data series as a line chart on the secondary axes. If there are no primary axes, it will be plotted on the primary axes instead. WARNING: Only weak checks done on whether the resulting combination chart is valid. Use with caution.
            </summary>
            <param name="DataSeriesIndex">The index of the data series. This is 1-based indexing, so it's 1 for the 1st data series, 2 for the 2nd data series and so on.</param>
            <param name="DisplayType">Chart display type. This corresponds to the 3 typical types in most charts: normal (or clustered), stacked and 100% stacked.</param>
            <param name="WithMarkers">True to display markers. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.PlotDataSeriesAsSecondaryLineChart(System.Int32,SpreadsheetLight.Charts.SLChartDataDisplayType,System.Boolean,SpreadsheetLight.Charts.SLLineChartOptions)">
            <summary>
            Plot a specific data series as a line chart on the secondary axes. If there are no primary axes, it will be plotted on the primary axes instead. WARNING: Only weak checks done on whether the resulting combination chart is valid. Use with caution.
            </summary>
            <param name="DataSeriesIndex">The index of the data series. This is 1-based indexing, so it's 1 for the 1st data series, 2 for the 2nd data series and so on.</param>
            <param name="DisplayType">Chart display type. This corresponds to the 3 typical types in most charts: normal (or clustered), stacked and 100% stacked.</param>
            <param name="WithMarkers">True to display markers. False otherwise.</param>
            <param name="Options">Chart customization options.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.CreateGroupDataLabelOptions">
            <summary>
            Creates an instance of SLGroupDataLabelOptions with theme information.
            </summary>
            <returns>An SLGroupDataLabelOptions with theme information.</returns>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.CreateDataLabelOptions">
            <summary>
            Creates an instance of SLDataLabelOptions with theme information.
            </summary>
            <returns>An SLDataLabelOptions with theme information.</returns>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.SetGroupDataLabelOptions(System.Int32,SpreadsheetLight.Charts.SLGroupDataLabelOptions)">
            <summary>
            Set data label options to a specific data series.
            </summary>
            <param name="DataSeriesIndex">The index of the data series. This is 1-based indexing, so it's 1 for the 1st data series, 2 for the 2nd data series and so on.</param>
            <param name="Options">Data label customization options.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.SetGroupDataLabelOptions(SpreadsheetLight.Charts.SLGroupDataLabelOptions)">
            <summary>
            Set data label options to all data series.
            </summary>
            <param name="Options">Data label customization options.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.SetDataLabelOptions(System.Int32,System.Int32,SpreadsheetLight.Charts.SLDataLabelOptions)">
            <summary>
            Set data label options to a specific data point in a specific data series.
            </summary>
            <param name="DataSeriesIndex">The index of the data series. This is 1-based indexing, so it's 1 for the 1st data series, 2 for the 2nd data series and so on.</param>
            <param name="DataPointIndex">The index of the data point. This is 1-based indexing, so it's 1 for the 1st data point, 2 for the 2nd data point and so on.</param>
            <param name="Options">Data label customization options.</param>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.CreateDataPointOptions">
            <summary>
            Creates an instance of SLDataPointOptions with theme information.
            </summary>
            <returns>An SLDataPointOptions with theme information.</returns>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLChart.SetDataPointOptions(System.Int32,System.Int32,SpreadsheetLight.Charts.SLDataPointOptions)">
            <summary>
            Set data point options to a specific data point in a specific data series.
            </summary>
            <param name="DataSeriesIndex">The index of the data series. This is 1-based indexing, so it's 1 for the 1st data series, 2 for the 2nd data series and so on.</param>
            <param name="DataPointIndex">The index of the data point. This is 1-based indexing, so it's 1 for the 1st data point, 2 for the 2nd data point and so on.</param>
            <param name="Options">Data point customization options.</param>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLChart.IsStylish">
            <summary>
            True if follow latest Excel styling defaults (but no guarantees because I might not
            be able to afford to keep buying latest Office/Excel).
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLChart.RoundedCorners">
            <summary>
            Specifies whether the chart has rounded corners. In Microsoft Excel, you might find this setting under "Border Styles" when formatting the chart area.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLChart.ShowEmptyCellsAs">
            <summary>
            The default is to show empty cells with a gap (or whichever option is appropriate for the chart). Note that "Zero" and "Span" are used mostly for line, scatter and radar charts. Use "Zero" to force a zero value, and "Span" to connect data points across the empty cell.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLChart.ShowDataLabelsOverMaximum">
            <summary>
            Indicates whether data labels over the maximum value of the chart is shown. The default value is true.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLChart.Perspective">
            <summary>
            This is double that's shown in Excel. Excel values range from 0 to 120 degrees.
            So this is 0 to 240 units. "Default" rotation angle is 30 (15 degrees).
            Did Microsoft want to make full use of the byte range value?
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLChart.ChartName">
            <summary>
            A friendly name for the chart. By default, this is in the form of "Chart #", where "#" is a number.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLChart.Title">
            <summary>
            The chart title. By default the chart title is hidden, so make sure to show it if chart title properties are set.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLChart.Floor">
            <summary>
            The floor of 3D charts.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLChart.SideWall">
            <summary>
            The side wall of 3D charts. Note that contour charts don't show the side wall, even though they're technically 3D charts.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLChart.BackWall">
            <summary>
            The back wall of 3D charts. Note that contour charts don't show the back wall, even though they're technically 3D charts.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLChart.PlotArea">
            <summary>
            The plot area.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLChart.PrimaryTextAxis">
            <summary>
            The primary chart text axis. This is usually the horizontal axis at the bottom (bar charts have them on the left).
            Depending on the type of chart, this can be a category, date or value axis.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLChart.PrimaryValueAxis">
            <summary>
            The primary chart value axis. This is usually the vertical axis on the left (bar charts have them at the bottom).
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLChart.DepthAxis">
            <summary>
            The depth axis for 3D charts.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLChart.SecondaryTextAxis">
            <summary>
            The secondary chart text axis. This is usually the horizontal axis at the top (bar charts have them on the left initially until you show this axis).
            Depending on the type of chart, this can be a category, date or value axis.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLChart.SecondaryValueAxis">
            <summary>
            The secondary chart value axis. This is usually the vertical axis on the right (bar charts have them at the top).
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLChart.ShowDataTable">
            <summary>
            Specifies if the data table is shown.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLChart.DataTable">
            <summary>
            The data table of the chart.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLChart.Legend">
            <summary>
            The chart legend.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLChart.Fill">
            <summary>
            Fill properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLChart.Border">
            <summary>
            Border properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLChart.Shadow">
            <summary>
            Shadow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLChart.Glow">
            <summary>
            Glow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLChart.SoftEdge">
            <summary>
            Soft edge properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLChart.Format3D">
            <summary>
            3D format properties.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLDataValidationAllowedValues">
            <summary>
            Data validation types.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLDataValidationAllowedValues.WholeNumber">
            <summary>
            Whole number.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLDataValidationAllowedValues.Decimal">
            <summary>
            Decimal.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLDataValidationAllowedValues.Date">
            <summary>
            Date.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLDataValidationAllowedValues.Time">
            <summary>
            Time.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLDataValidationAllowedValues.TextLength">
            <summary>
            Text length.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLDataValidationSingleOperandValues">
            <summary>
            Data validation operations with 1 operand.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLDataValidationSingleOperandValues.Equal">
            <summary>
            Equal.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLDataValidationSingleOperandValues.NotEqual">
            <summary>
            Not equal.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLDataValidationSingleOperandValues.GreaterThan">
            <summary>
            Greater than.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLDataValidationSingleOperandValues.LessThan">
            <summary>
            Less than.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLDataValidationSingleOperandValues.GreaterThanOrEqual">
            <summary>
            Greater than or equal.
            </summary>
        </member>
        <member name="F:SpreadsheetLight.SLDataValidationSingleOperandValues.LessThanOrEqual">
            <summary>
            Less than or equal.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.SLDataValidation">
            <summary>
            Encapsulates properties and methods for data validations.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLDataValidation.AllowAnyValue">
            <summary>
            Allow any value.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.SLDataValidation.AllowWholeNumber(System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Allow only whole numbers.
            </summary>
            <param name="IsBetween">True if the data is between 2 values. False otherwise.</param>
            <param name="Minimum">The minimum value.</param>
            <param name="Maximum">The maximum value.</param>
            <param name="IgnoreBlank">True if blanks are ignored. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDataValidation.AllowWholeNumber(System.Boolean,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Allow only whole numbers.
            </summary>
            <param name="IsBetween">True if the data is between 2 values. False otherwise.</param>
            <param name="Minimum">The minimum value.</param>
            <param name="Maximum">The maximum value.</param>
            <param name="IgnoreBlank">True if blanks are ignored. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDataValidation.AllowWholeNumber(System.Boolean,System.String,System.String,System.Boolean)">
            <summary>
            Allow only whole numbers.
            </summary>
            <param name="IsBetween">True if the data is between 2 values. False otherwise.</param>
            <param name="Minimum">The minimum value.</param>
            <param name="Maximum">The maximum value.</param>
            <param name="IgnoreBlank">True if blanks are ignored. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDataValidation.AllowWholeNumber(SpreadsheetLight.SLDataValidationSingleOperandValues,System.Int32,System.Boolean)">
            <summary>
            Allow only whole numbers.
            </summary>
            <param name="DataOperator">The type of operation.</param>
            <param name="DataValue">The data value.</param>
            <param name="IgnoreBlank">True if blanks are ignored. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDataValidation.AllowWholeNumber(SpreadsheetLight.SLDataValidationSingleOperandValues,System.Int64,System.Boolean)">
            <summary>
            Allow only whole numbers.
            </summary>
            <param name="DataOperator">The type of operation.</param>
            <param name="DataValue">The data value.</param>
            <param name="IgnoreBlank">True if blanks are ignored. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDataValidation.AllowWholeNumber(SpreadsheetLight.SLDataValidationSingleOperandValues,System.String,System.Boolean)">
            <summary>
            Allow only whole numbers.
            </summary>
            <param name="DataOperator">The type of operation.</param>
            <param name="DataValue">The data value.</param>
            <param name="IgnoreBlank">True if blanks are ignored. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDataValidation.AllowDecimal(System.Boolean,System.Single,System.Single,System.Boolean)">
            <summary>
            Allow decimal (floating point) values.
            </summary>
            <param name="IsBetween">True if the data is between 2 values. False otherwise.</param>
            <param name="Minimum">The minimum value.</param>
            <param name="Maximum">The maximum value.</param>
            <param name="IgnoreBlank">True if blanks are ignored. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDataValidation.AllowDecimal(System.Boolean,System.Double,System.Double,System.Boolean)">
            <summary>
            Allow decimal (floating point) values.
            </summary>
            <param name="IsBetween">True if the data is between 2 values. False otherwise.</param>
            <param name="Minimum">The minimum value.</param>
            <param name="Maximum">The maximum value.</param>
            <param name="IgnoreBlank">True if blanks are ignored. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDataValidation.AllowDecimal(System.Boolean,System.Decimal,System.Decimal,System.Boolean)">
            <summary>
            Allow decimal (floating point) values.
            </summary>
            <param name="IsBetween">True if the data is between 2 values. False otherwise.</param>
            <param name="Minimum">The minimum value.</param>
            <param name="Maximum">The maximum value.</param>
            <param name="IgnoreBlank">True if blanks are ignored. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDataValidation.AllowDecimal(System.Boolean,System.String,System.String,System.Boolean)">
            <summary>
            Allow decimal (floating point) values.
            </summary>
            <param name="IsBetween">True if the data is between 2 values. False otherwise.</param>
            <param name="Minimum">The minimum value.</param>
            <param name="Maximum">The maximum value.</param>
            <param name="IgnoreBlank">True if blanks are ignored. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDataValidation.AllowDecimal(SpreadsheetLight.SLDataValidationSingleOperandValues,System.Single,System.Boolean)">
            <summary>
            Allow decimal (floating point) values.
            </summary>
            <param name="DataOperator">The type of operation.</param>
            <param name="DataValue">The data value.</param>
            <param name="IgnoreBlank">True if blanks are ignored. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDataValidation.AllowDecimal(SpreadsheetLight.SLDataValidationSingleOperandValues,System.Double,System.Boolean)">
            <summary>
            Allow decimal (floating point) values.
            </summary>
            <param name="DataOperator">The type of operation.</param>
            <param name="DataValue">The data value.</param>
            <param name="IgnoreBlank">True if blanks are ignored. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDataValidation.AllowDecimal(SpreadsheetLight.SLDataValidationSingleOperandValues,System.Decimal,System.Boolean)">
            <summary>
            Allow decimal (floating point) values.
            </summary>
            <param name="DataOperator">The type of operation.</param>
            <param name="DataValue">The data value.</param>
            <param name="IgnoreBlank">True if blanks are ignored. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDataValidation.AllowDecimal(SpreadsheetLight.SLDataValidationSingleOperandValues,System.String,System.Boolean)">
            <summary>
            Allow decimal (floating point) values.
            </summary>
            <param name="DataOperator">The type of operation.</param>
            <param name="DataValue">The data value.</param>
            <param name="IgnoreBlank">True if blanks are ignored. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDataValidation.AllowList(System.String,System.Boolean,System.Boolean)">
            <summary>
            Allow a list of values.
            </summary>
            <param name="DataSource">The data source. For example, "$A$1:$A$5"</param>
            <param name="IgnoreBlank">True if blanks are ignored. False otherwise.</param>
            <param name="InCellDropDown">True if a dropdown list appears for selecting. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDataValidation.AllowDate(System.Boolean,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Allow date values.
            </summary>
            <param name="IsBetween">True if the data is between 2 values. False otherwise.</param>
            <param name="Minimum">The minimum value.</param>
            <param name="Maximum">The maximum value.</param>
            <param name="IgnoreBlank">True if blanks are ignored. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDataValidation.AllowDate(System.Boolean,System.String,System.String,System.Boolean)">
            <summary>
            Allow date values.
            </summary>
            <param name="IsBetween">True if the data is between 2 values. False otherwise.</param>
            <param name="Minimum">The minimum value. Any valid date formatted value is fine. It is suggested to just copy the value you have in Excel interface.</param>
            <param name="Maximum">The maximum value. Any valid date formatted value is fine. It is suggested to just copy the value you have in Excel interface.</param>
            <param name="IgnoreBlank">True if blanks are ignored. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDataValidation.AllowDate(SpreadsheetLight.SLDataValidationSingleOperandValues,System.DateTime,System.Boolean)">
            <summary>
            Allow date values.
            </summary>
            <param name="DataOperator">The type of operation.</param>
            <param name="DataValue">The data value. Any valid date formatted value is fine. It is suggested to just copy the value you have in Excel interface.</param>
            <param name="IgnoreBlank">True if blanks are ignored. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDataValidation.AllowDate(SpreadsheetLight.SLDataValidationSingleOperandValues,System.String,System.Boolean)">
            <summary>
            Allow date values.
            </summary>
            <param name="DataOperator">The type of operation.</param>
            <param name="DataValue">The data value. Any valid date formatted value is fine. It is suggested to just copy the value you have in Excel interface.</param>
            <param name="IgnoreBlank">True if blanks are ignored. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDataValidation.AllowTime(System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Allow time values.
            </summary>
            <param name="IsBetween">True if the data is between 2 values. False otherwise.</param>
            <param name="StartHour">The start hour between 0 to 23 (both inclusive).</param>
            <param name="StartMinute">The start minute between 0 to 59 (both inclusive).</param>
            <param name="StartSecond">The start second between 0 to 59 (both inclusive).</param>
            <param name="EndHour">The end hour between 0 to 23 (both inclusive).</param>
            <param name="EndMinute">The end minute between 0 to 59 (both inclusive).</param>
            <param name="EndSecond">The end second between 0 to 59 (both inclusive).</param>
            <param name="IgnoreBlank">True if blanks are ignored. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDataValidation.AllowTime(System.Boolean,System.String,System.String,System.Boolean)">
            <summary>
            Allow time values.
            </summary>
            <param name="IsBetween">True if the data is between 2 values. False otherwise.</param>
            <param name="StartTime">The start time. Any valid time formatted value is fine. It is suggested to just copy the value you have in Excel interface.</param>
            <param name="EndTime">The end time. Any valid time formatted value is fine. It is suggested to just copy the value you have in Excel interface.</param>
            <param name="IgnoreBlank">True if blanks are ignored. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDataValidation.AllowTime(SpreadsheetLight.SLDataValidationSingleOperandValues,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Allow time values.
            </summary>
            <param name="DataOperator">The type of operation.</param>
            <param name="Hour">The hour between 0 to 23 (both inclusive).</param>
            <param name="Minute">The minute between 0 to 59 (both inclusive).</param>
            <param name="Second">The second between 0 to 59 (both inclusive).</param>
            <param name="IgnoreBlank">True if blanks are ignored. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDataValidation.AllowTime(SpreadsheetLight.SLDataValidationSingleOperandValues,System.String,System.Boolean)">
            <summary>
            Allow time values.
            </summary>
            <param name="DataOperator">The type of operation.</param>
            <param name="Time">The time. Any valid time formatted value is fine. It is suggested to just copy the value you have in Excel interface.</param>
            <param name="IgnoreBlank">True if blanks are ignored. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDataValidation.AllowTextLength(System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Allow data according to text length.
            </summary>
            <param name="IsBetween">True if the data is between 2 values. False otherwise.</param>
            <param name="Minimum">The minimum value.</param>
            <param name="Maximum">The maximum value.</param>
            <param name="IgnoreBlank">True if blanks are ignored. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDataValidation.AllowTextLength(System.Boolean,System.String,System.String,System.Boolean)">
            <summary>
            Allow data according to text length.
            </summary>
            <param name="IsBetween">True if the data is between 2 values. False otherwise.</param>
            <param name="Minimum">The minimum value.</param>
            <param name="Maximum">The maximum value.</param>
            <param name="IgnoreBlank">True if blanks are ignored. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDataValidation.AllowTextLength(SpreadsheetLight.SLDataValidationSingleOperandValues,System.Int32,System.Boolean)">
            <summary>
            Allow data according to text length.
            </summary>
            <param name="DataOperator">The type of operation.</param>
            <param name="Length">The text length for comparison.</param>
            <param name="IgnoreBlank">True if blanks are ignored. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDataValidation.AllowTextLength(SpreadsheetLight.SLDataValidationSingleOperandValues,System.String,System.Boolean)">
            <summary>
            Allow data according to text length.
            </summary>
            <param name="DataOperator">The type of operation.</param>
            <param name="Length">The text length for comparison.</param>
            <param name="IgnoreBlank">True if blanks are ignored. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDataValidation.AllowCustom(System.String,System.Boolean)">
            <summary>
            Allow custom validation.
            </summary>
            <param name="Formula">The formula used for validation.</param>
            <param name="IgnoreBlank">True if blanks are ignored. False otherwise.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDataValidation.SetInputMessage(System.String,System.String)">
            <summary>
            Set the input message.
            </summary>
            <param name="Title">The title of the input message.</param>
            <param name="Message">The input message.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDataValidation.SetErrorAlert(DocumentFormat.OpenXml.Spreadsheet.DataValidationErrorStyleValues,System.String,System.String)">
            <summary>
            Set the error alert.
            </summary>
            <param name="ErrorStyle">The error style.</param>
            <param name="Title">The title of the error alert.</param>
            <param name="Message">The error message.</param>
        </member>
        <member name="M:SpreadsheetLight.SLDataValidation.SetErrorAlert(System.String,System.String)">
            <summary>
            Set the error alert.
            </summary>
            <param name="Title">The title of the error alert.</param>
            <param name="Message">The error message.</param>
        </member>
        <member name="P:SpreadsheetLight.SLDataValidation.ShowInputMessage">
            <summary>
            Specifies if the input message is shown.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.SLDataValidation.ShowErrorMessage">
            <summary>
            Specifies if the error message is shown.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Drawing.SLEffectList">
            <summary>
            Encapsulates properties and methods for specifying effects such as glow, shadows, reflection and soft edges.
            This simulates the DocumentFormat.OpenXml.Drawing.EffectList class.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLLegend">
            <summary>
            Encapsulates properties and methods for setting chart legends.
            This simulates the DocumentFormat.OpenXml.Drawing.Charts.Legend class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLLegend.ClearShapeProperties">
            <summary>
            Clear all styling shape properties. Use this if you want to start styling from a clean slate.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLLegend.LegendPosition">
            <summary>
            The position of the legend.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLLegend.Overlay">
            <summary>
            Specifies if the legend is overlayed. True if the legend overlaps the plot area, false otherwise.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLLegend.Fill">
            <summary>
            Fill properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLLegend.Border">
            <summary>
            Border properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLLegend.Shadow">
            <summary>
            Shadow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLLegend.Glow">
            <summary>
            Glow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLLegend.SoftEdge">
            <summary>
            Soft edge properties.
            </summary>
        </member>
        <member name="T:SpreadsheetLight.Charts.SLDownBars">
            <summary>
            Encapsulates properties and methods for down bars.
            This simulates the DocumentFormat.OpenXml.Drawing.Charts.DownBars class.
            </summary>
        </member>
        <member name="M:SpreadsheetLight.Charts.SLDownBars.ClearShapeProperties">
            <summary>
            Clear all styling shape properties. Use this if you want to start styling from a clean slate.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDownBars.Fill">
            <summary>
            Fill properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDownBars.Border">
            <summary>
            Border properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDownBars.Shadow">
            <summary>
            Shadow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDownBars.Glow">
            <summary>
            Glow properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDownBars.SoftEdge">
            <summary>
            Soft edge properties.
            </summary>
        </member>
        <member name="P:SpreadsheetLight.Charts.SLDownBars.Format3D">
            <summary>
            3D format properties.
            </summary>
        </member>
    </members>
</doc>
