<ConnectionProxies>
  <Items>
    <ConnectionProxy>
      <Items>
        <ConnectionProxyRuleSet>
          <Items>
            <ConnectionProxySyntaxItem>
              <Items>
                <Rule>
                  <Items />
                  <RegExp>
                  </RegExp>
                  <IgnoreCase>False</IgnoreCase>
                  <ValueType>stringType</ValueType>
                  <UsePasswordChar>False</UsePasswordChar>
                  <Description>
                  </Description>
                  <Label>
                  </Label>
                  <ShowInGui>True</ShowInGui>
                  <IsDefaultItem>False</IsDefaultItem>
                  <IsEmpty>False</IsEmpty>
                </Rule>
              </Items>
              <DefaultValue>
              </DefaultValue>
              <Description>Provide the hostname, an IPv4 address, or an IPv6 address enclosed in "[ ]". Examples: www.cooldomain.com, 192.168.2.3 or [2001:db8:85a3:8d3:1319:8a2e:370:7348]. This value is overriden with the log's value when #MULTICONNECTION is used.</Description>
              <Label>Host</Label>
              <ShowInGui>True</ShowInGui>
              <IsDefaultItem>False</IsDefaultItem>
              <IsEmpty>False</IsEmpty>
            </ConnectionProxySyntaxItem>
            <ConnectionProxySyntaxItem>
              <Items>
                <Rule>
                  <Items />
                  <RegExp>
                  </RegExp>
                  <IgnoreCase>False</IgnoreCase>
                  <ValueType>stringType</ValueType>
                  <UsePasswordChar>False</UsePasswordChar>
                  <Description>
                  </Description>
                  <Label>
                  </Label>
                  <ShowInGui>True</ShowInGui>
                  <IsDefaultItem>False</IsDefaultItem>
                  <IsEmpty>False</IsEmpty>
                </Rule>
              </Items>
              <DefaultValue>http</DefaultValue>
              <Description>Fill in https for example. If nothing is filled in, http is used. This value is overriden with the log's value when #MULTICONNECTION is used.</Description>
              <Label>Protocol</Label>
              <ShowInGui>True</ShowInGui>
              <IsDefaultItem>False</IsDefaultItem>
              <IsEmpty>False</IsEmpty>
            </ConnectionProxySyntaxItem>
            <ConnectionProxySyntaxItem>
              <Items>
                <Rule>
                  <Items />
                  <RegExp>
                  </RegExp>
                  <IgnoreCase>False</IgnoreCase>
                  <ValueType>ushortType</ValueType>
                  <UsePasswordChar>False</UsePasswordChar>
                  <Description>
                  </Description>
                  <Label>
                  </Label>
                  <ShowInGui>True</ShowInGui>
                  <IsDefaultItem>False</IsDefaultItem>
                  <IsEmpty>False</IsEmpty>
                </Rule>
              </Items>
              <DefaultValue>80</DefaultValue>
              <Description>Port used to connect to the webserver.By default this is set to 80 (use 443 for https). Beware to update the used port to match the protocol. This value is overriden with the log's value when #MULTICONNECTION is used.</Description>
              <Label>Port</Label>
              <ShowInGui>True</ShowInGui>
              <IsDefaultItem>False</IsDefaultItem>
              <IsEmpty>False</IsEmpty>
            </ConnectionProxySyntaxItem>
          </Items>
          <Connected>False</Connected>
          <TracertField>1</TracertField>
          <ChildDelimiter>&lt;16 0C 02 12$&gt;</ChildDelimiter>
          <Description>
          </Description>
          <ShowInGui>True</ShowInGui>
          <IsDefaultItem>False</IsDefaultItem>
          <IsEmpty>False</IsEmpty>
        </ConnectionProxyRuleSet>
        <ConnectionProxyCode>
          <Items />
          <Code>/*
    ConnectionProxy generated by vApus
    vApus is Copyrighted by Sizing Servers Lab
    University College of West-Flanders, Department GKG
    
    Note: If you want to edit this connection proxy code you need to know what you are doing. You might break your stresstest.
    
    VERSION STABLE-V1-20151020130630
*/

// The following line is used to add references when compiling, you can edit this here or in the references tab page. Please use the 'Browse...' button for dlls that are not in the GAC.
// dllreferences:System.dll;System.Data.dll;vApus.Util.dll;vApus.Stresstest.dll;System.Web.dll;System.Windows.Forms.dll;System.Core.dll;

#region Preprocessors
    // Enable debug mode
    //#define DEBUGMODE
    
    // This preprocessor disabes .NET's own cookieparser and uses our own implementation instead. This should only be used when
    // the cookiedomain is different than the used Connection, when cookies from another domain are discarded. For example a
    // website sets its cookiedomain to ".cooldomain.com" but for testing we use a plain IP as Connection. In this case .NET
    // would discard our cookies, which could break our test. Using this preprocessor rewrites the Connection Proxy to use a
    // custom parser that works around this security feature.
    //#define USECUSTOMCOOKIEPARSER
    
    // When used, the Connection set in vApus will be ignored for the stresstest. The logged "destination host" is used instead.
    // This is sometimes necessary if for example authentication is redirected to a secondary server or if cookie-free
    // subdomains (or CDNs) are used to serve static content.
    // Note: It is recommended to use this setting when testing a HTTPS website.
    //#define USEMULTICONNECTION
    
    // Set the logged Referer HTTP header in requests.
    //#define USEREFERER
    
    // Some applications use custom HTTP headers. Use this preprocessor in combination with the _customHeaders array to
    // to add this fucntionality to the test.
    //#define USECUSTOMHEADERS
#endregion // Preprocessors

#region Usings
    using System;
    using System.Data;
    using System.Diagnostics;
    using System.IO;
    using System.IO.Compression;
    using System.Linq;
    using System.Net;
    using System.Net.Security;
    using System.Web;
    using System.Windows.Forms;
    using System.Security.Cryptography.X509Certificates;
    using vApus.Util;
#endregion // Usings

namespace vApus.Stresstest {
    public class ConnectionProxy : IConnectionProxy {
        
        #region Fields
            Stopwatch _stopwatch = new Stopwatch();
            bool _isDisposed;
            // Please do not edit the following lines (RuleSetFields).
            // -- RuleSetFields --
            System.String _connectionProxySyntaxItem0 = string.Empty; // Host
            System.String _connectionProxySyntaxItem1 = "http"; // Protocol [The default value for this syntax item is used if no value is provided in the connection.]
            System.UInt16 _connectionProxySyntaxItem2 = 80; // Port [The default value for this syntax item is used if no value is provided in the connection.]
            // -- RuleSetFields --
            
            StringTree _parameterizedLogEntry;
            HttpWebRequest _httpWebRequest;
            HttpWebResponse _httpWebResponse;
            CookieCollection _cookieCollection;
            CookieDecoder _cookieDecoder;
            StreamReader _streamReader;
            char[] _buffer = new char[1024]; int _count = -1;
            
            // A 60 second timeout should be reasonable.
            const int REQUEST_TIMEOUT_IN_MS = 60000;
            
            // Labels, for the index values of the StringTree nodes (eg. int ip = 0).
            enum SyntaxItem {
                RelativeUrl = 0, RequestMethod, GetData, PostData, Cookies, UserAgent, ContentType, SourceIP, DestinationIP, DestinationHost, BeginTimestamp, EndTimestamp, DestinationPort, Protocol, Accept, Referer
            }
            
            // EXAMPLE CUSTOM CP (Drupal): VARS
            //string _formBuildId = string.Empty, _formToken = string.Empty, _redirectNode = string.Empty;
            
            #if USECUSTOMHEADERS
                string[] _customHeaders = { };
            #endif
        #endregion // Fields
        
        #region Properties
            public bool IsConnectionOpen { get { return true; } }
            public bool IsDisposed { get { return _isDisposed; } }
        #endregion // Properties
        
        public ConnectionProxy() {
            // Trust all certificates for https testing.
            ServicePointManager.ServerCertificateValidationCallback = (object sender, X509Certificate cert, X509Chain chain, SslPolicyErrors errors) =&gt; { return true; };
            
            #if DEBUGMODE
                EventPanel.AddEvent("Enabled preprocessors:");
                #if USECUSTOMCOOKIEPARSER
                    EventPanel.AddEvent("  USECUSTOMCOOKIEPARSER");
                #endif
                #if USEMULTICONNECTION
                    EventPanel.AddEvent("  USEMULTICONNECTION");
                #endif
                #if USEREFERER
                    EventPanel.AddEvent("  USEREFERER");
                #endif
                #if USECUSTOMHEADERS
                    EventPanel.AddEvent("  USECUSTOMHEADERS");
                #endif
                
                EventPanel.AddEvent("ConnectionProxy Syntax Items:"
                + "\n  0: " + _connectionProxySyntaxItem0
                + "\n  1: " + _connectionProxySyntaxItem1
                + "\n  2: " + _connectionProxySyntaxItem2);
            #endif
        }
        
        #region Functions
            public void TestConnection(out string error) {
                error = null;
                
                try {
                    _httpWebRequest                   = (HttpWebRequest)WebRequest.Create(new Uri(string.Format("{0}://{1}:{2}", _connectionProxySyntaxItem1, _connectionProxySyntaxItem0, _connectionProxySyntaxItem2)));
                    _httpWebRequest.UserAgent         = "vApus - Test connection function";
                    _httpWebRequest.Timeout           = REQUEST_TIMEOUT_IN_MS;
                    _httpWebRequest.ReadWriteTimeout  = _httpWebRequest.Timeout;
                    _httpWebRequest.AllowAutoRedirect = false;
                    _httpWebRequest.Method            = "GET";
                    _httpWebRequest.ContentLength     = 0;
                    
                    _httpWebResponse = _httpWebRequest.GetResponse() as HttpWebResponse;
                }
                catch (Exception ex) {
                    error = ex.ToString();
                }
                finally {
                    if (_streamReader != null) {
                        try {
                            _streamReader.Close();
                            _streamReader.Dispose();
                            _streamReader = null;
                        }
                        catch {
                        }
                    }
                }
            }
            
            public void OpenConnection() { }
            
            public void CloseConnection() { }
            
            public void SendAndReceive(StringTree parameterizedLogEntry, out DateTime sentAt, out TimeSpan timeToLastByte, out Exception exception) {
                _parameterizedLogEntry = parameterizedLogEntry;
                exception = null;
                
                //
                // parameterizedLogEntry is the log entry parsed to a String Tree using the Log Rule Set.
                // String Tree is a simple class: it can have either a value (property: string Value) or childs who are also String Trees (e.g. StringTree foo = parameterizedLogEntry[n] where n is an integer value).
                // You can get the combined value of the childs using the function CombineValues() (not shallow, returns a string), this uses the child delimiters in the rule set to glue these values together.
                //
                
                if (_isDisposed) {
                    sentAt = DateTime.Now;
                    timeToLastByte = new TimeSpan();
                    return;
                }
                try {
                    sentAt = DateTime.Now;
                    _stopwatch.Start();
                    try {
                        InitHttpWebRequest();
                        InitCookies();
                        HandleCookiesBeforeRequest();
                        ApplyPostData();
                        _httpWebResponse = _httpWebRequest.GetResponse() as HttpWebResponse;
                        
                        if (_httpWebResponse.ContentEncoding.ToLower().Contains("gzip")) {
                            _streamReader = new StreamReader(new GZipStream(_httpWebResponse.GetResponseStream(), CompressionMode.Decompress));
                        }
                        else if(_httpWebResponse.ContentEncoding.ToLower().Contains("deflate")){
                            _streamReader = new StreamReader(new DeflateStream(_httpWebResponse.GetResponseStream(), CompressionMode.Decompress));
                        }
                        else {
                            _streamReader = new StreamReader(_httpWebResponse.GetResponseStream(), _httpWebResponse.ContentEncoding.Length != 0 ?
                            System.Text.Encoding.GetEncoding(_httpWebResponse.ContentEncoding) : System.Text.Encoding.GetEncoding(1252));
                        }
                        
                        // EXAMPLE CUSTOM CP (Drupal): DATA EXTRACTION FROM RESPONSE
                        // IMPORTANT: be sure to
                        //      1) always execute DownloadResponse()
                        //      2) execute it only once in every specific case
                        /*
                            string relUrl = _parameterizedLogEntry[(int)SyntaxItem.RelativeUrl].Value;
                            string method = _parameterizedLogEntry[(int)SyntaxItem.RequestMethod].Value;
                            string getData = _parameterizedLogEntry[(int)SyntaxItem.GetData].CombineValues();
                            string location = _httpWebResponse.GetResponseHeader("Location");
                            
                            if (relUrl == "/node/add/article" &amp;&amp; method == "GET") {
                                string response = DownloadResponse(false); // Get full response in memory
                                _formBuildId = GetStringBetween(response, "&lt;input type=\"hidden\" name=\"form_build_id\" value=\"", "\" /&gt;");
                                _formToken   = GetStringBetween(response, "&lt;input type=\"hidden\" name=\"form_token\" value=\"", "\" /&gt;");  
                            }
                            else {
                                DownloadResponse(); // Discard response while it gets downloaded
                            }
                            
                            if (relUrl == "/node/add/article" &amp;&amp; !string.IsNullOrEmpty(location)) {
                                _redirectNode = location.Substring(location.IndexOf("/blog/", StringComparison.InvariantCultureIgnoreCase) + "/blog/".Length);
                            }
                        */
                        
                        // Remove this instance of DownloadResponse() if already used above this line for data extraction
                        DownloadResponse();
                        
                        HandleCookiesAfterRequest();
                        
                    }
                    catch (Exception ex) {
                        exception = ex;
                        #if DEBUGMODE
                            EventPanel.AddEvent("SendAndReceive Exception: " + parameterizedLogEntry.CombineValues() + " " + exception);
                        #endif
                    }
                    finally {
                        if (_streamReader != null) {
                            try {
                                _streamReader.Close();
                                _streamReader.Dispose();
                            }
                            finally {
                                _streamReader = null;
                            }
                        }
                    }
                }
                catch {
                    //
                    // Always throw the exception, if any, if 'stuff' cannot be closed.
                    // vApus will handle it as a connection problem.
                    //
                    
                    throw;
                }
                finally {
                    _stopwatch.Stop();
                    timeToLastByte = _stopwatch.Elapsed;
                    _stopwatch.Reset();
                }
            }
            
            public void Dispose() {
                if (!_isDisposed) {
                    _isDisposed = true;
                    try {
                        // Timeout immediately.
                        if(_httpWebRequest != null) {
                            _httpWebRequest.Abort();
                        }
                    } 
                    catch { 
                    }
                    _httpWebRequest = null;
                    _httpWebResponse = null;
                    _cookieCollection= null;
                    _cookieDecoder = null;
                    if (_streamReader != null) {
                        try {
                            _streamReader.Close();
                            _streamReader.Dispose();
                            _streamReader = null;
                        } 
                        catch { 
                        }
                    }
                }
            }
        #endregion // Functions
        
        #region Free Coding
            private void InitHttpWebRequest() {
                string relUrl = _parameterizedLogEntry[(int)SyntaxItem.RelativeUrl].Value;
                string getData = _parameterizedLogEntry[(int)SyntaxItem.GetData].CombineValues();
                
                // EXAMPLE CUSTOM CP (Drupal): USE EXTRACTED DATA IN relUrl
                // Here you can also change getData if needed
                /*
                    if (relUrl == "/blog/@replaceNode" &amp;&amp; _redirectNode != string.Empty) {
                        relUrl = relUrl.Replace("@replaceNode", _redirectNode);
                    }
                */
                
                _httpWebRequest = (HttpWebRequest)WebRequest.Create(CreateUri(relUrl, getData));
                // Set the HTTP request method (GET/POST).
                _httpWebRequest.Method    = _parameterizedLogEntry[(int)SyntaxItem.RequestMethod].Value;
                // Set the User Agent.
                _httpWebRequest.UserAgent = "vApus";
                // Set the Accept header.
                _httpWebRequest.Accept = _parameterizedLogEntry[(int)SyntaxItem.Accept].Value;
                // Set the Referer header.
                #if USEREFERER
                    _httpWebRequest.Referer = _parameterizedLogEntry[(int)SyntaxItem.Referer].Value;
                #endif
                _httpWebRequest.Timeout = REQUEST_TIMEOUT_IN_MS;
                _httpWebRequest.ReadWriteTimeout = _httpWebRequest.Timeout;
                // Allow keepalive.
                _httpWebRequest.KeepAlive = true;
                // Allow compression.
                _httpWebRequest.Headers.Add("Accept-Encoding: gzip, deflate");
                // Set the Accept-Language header.
                _httpWebRequest.Headers.Add("Accept-Language: en-US");
                // Don't autoredirect: redirects are already logged.
                _httpWebRequest.AllowAutoRedirect = false;
                // Set the initial content length to 0.
                _httpWebRequest.ContentLength = 0;
                // Send post data with the same request.
                _httpWebRequest.ServicePoint.Expect100Continue = false;
                // Set the connection limit to our concurrency.
                _httpWebRequest.ServicePoint.ConnectionLimit = (this.GetParent() as ConnectionProxyPool).PoolSize;
                
                #if DEBUGMODE
                    _httpWebRequest.Headers.Add("vApus-User: " + System.Threading.Thread.CurrentThread.Name);
                #endif
                
                #if USECUSTOMHEADERS
                    foreach (string header in _customHeaders) {
                        _httpWebRequest.Headers.Add(header);
                    }
                #endif
            }
            
            private void InitCookies() {
                if (_cookieCollection == null) {
                    _httpWebRequest.CookieContainer = new CookieContainer();
                    _cookieCollection = new CookieCollection();
                    _cookieDecoder = new CookieDecoder();
                }
            }
            
            private void ApplyPostData() {
                string relUrl = _parameterizedLogEntry[(int)SyntaxItem.RelativeUrl].Value;
                string postData = _parameterizedLogEntry[(int)SyntaxItem.PostData].Value;
                if (postData.Length != 0) {
                    
                    // EXAMPLE CUSTOM CP (Drupal): CHANGE POSTDATA
                    /*
                        if (relUrl == "/node/add/article" &amp;&amp; _formBuildId != string.Empty &amp;&amp; _formToken != string.Empty) {
                            postData = postData.Replace("@replaceFormBuildId", _formBuildId).Replace("@replaceFormToken", _formToken);
                        }
                    */
                    
                    _httpWebRequest.ContentLength = postData.Length;
                    _httpWebRequest.ContentType   = _parameterizedLogEntry[(int)SyntaxItem.ContentType].Value;
                    using (Stream postStream = _httpWebRequest.GetRequestStream()) {
                        using (StreamWriter postStreamWriter = new StreamWriter(postStream)) {
                            postStreamWriter.Write(postData);
                            postStreamWriter.Flush();
                        }
                    }
                }                               
            }
            
            private void HandleCookiesBeforeRequest() {
                #if USECUSTOMCOOKIEPARSER
                    // Domain for the cookies should be determined here.
                    string domain = _httpWebRequest.RequestUri.GetLeftPart(UriPartial.Authority);
                    if(domain.StartsWith("http://")) {
                        domain = domain.Substring(7);
                    }
                    else if(domain.StartsWith("https://")) {
                        domain = domain.Substring(8);
                    }
                    
                    if(domain.Contains(":")) domain = domain.Split(':')[0];
                    
                    // Support for top level domains; we probably don't need this.
                    // TODO: Should be tested with a URL (not IP) to verify this.
                    /*
                        IPAddress ipAddress;
                        if(!IPAddress.TryParse(authority, out ipAddress)) {
                            int dotIndex = authority.IndexOf('.');
                            if (dotIndex != -1 &amp;&amp; dotIndex != authority.Length - 1) {
                                domain = authority.Substring(dotIndex + 1);
                            }
                        }
                    */
                    
                    foreach (Cookie cookie in _cookieCollection) {
                        cookie.Domain = domain;
                    }
                #endif
                
                _httpWebRequest.CookieContainer = new CookieContainer();
                _httpWebRequest.CookieContainer.Add(_cookieCollection);
            }
            
            private void HandleCookiesAfterRequest() {
                #if USECUSTOMCOOKIEPARSER
                    var newCookieCollection = GetCookies(_httpWebResponse.Headers);
                    var requestCookieCollection = GetCookies(_httpWebRequest.Headers);
                    #else
                    var newCookieCollection = _httpWebResponse.Cookies;
                    var requestCookieCollection = _httpWebRequest.CookieContainer.GetCookies(_httpWebRequest.RequestUri);
                #endif
                
                // Add ASP authentication cookies and old cookies that might be important (better sending too many cookies than too few).
                foreach (Cookie cookie in requestCookieCollection) {
                    if (GetCookieIndex(cookie, newCookieCollection) == -1) {
                        newCookieCollection.Add(cookie);
                    }
                }
                // Copy the cached cookies that are not yet in the collection, the check happens on the name of the cookie.
                foreach (Cookie cookie in _cookieCollection) {
                    if (GetCookieIndex(cookie, newCookieCollection) == -1) {
                        newCookieCollection.Add(cookie);
                    }
                }
                _cookieCollection = newCookieCollection;
            }
            
            private int GetCookieIndex(Cookie cookie, CookieCollection cookieCollection) {
                for (int i = 0; i &lt; cookieCollection.Count; i++) {
                    if (cookieCollection[i].Name == cookie.Name) {
                        return i;
                    }
                }
                return -1;
            }
            
            private CookieCollection GetCookies(WebHeaderCollection headers) {
                var cookieCollection = new CookieCollection();
                foreach (string headerName in headers.Keys) {
                    string lowerheaderName = headerName.ToLower();
                    if (lowerheaderName == "set-cookie" || lowerheaderName == "cookie") {
                        foreach (Cookie cookie in _cookieDecoder.Decode(headers[headerName])) {
                            int cookieIndex = GetCookieIndex(cookie, cookieCollection);
                            if (cookieIndex == -1) {
                                cookieCollection.Add(cookie);
                            }
                            else {
                                cookieCollection[cookieIndex].Value = cookie.Value;
                            }
                        }
                    }
                }
                return cookieCollection;
            }
            
            private Uri CreateUri(string relUrl = "", string getData = "") {
                string uri = string.Empty;
                
                #if USEMULTICONNECTION
                    uri = string.Format("{0}://{1}:{2}", _parameterizedLogEntry[(int)SyntaxItem.Protocol].Value, _parameterizedLogEntry[(int)SyntaxItem.DestinationHost].Value, _parameterizedLogEntry[(int)SyntaxItem.DestinationPort].Value);
                    #else
                    uri = string.Format("{0}://{1}:{2}", _connectionProxySyntaxItem1, _connectionProxySyntaxItem0, _connectionProxySyntaxItem2);
                #endif
                
                if(relUrl.Length != 0) {
                    uri += relUrl;
                    if(getData.Length != 0) {
                        uri += "?" + getData;
                    }
                }
                
                return new Uri(uri);
            }
            
            // alternativeAfter needed for hidden fields: can be , "\" /&gt;" or , "\"/&gt;".
            private string GetStringBetween(string source, string before, string after, string alternativeAfter = "") {
                source = source.Substring(source.IndexOf(before, StringComparison.InvariantCultureIgnoreCase) + before.Length);
                int endIndex = source.IndexOf(after, StringComparison.InvariantCultureIgnoreCase);
                if(endIndex == -1 &amp;&amp; alternativeAfter.Length != 0) {
                    endIndex = source.IndexOf(alternativeAfter, StringComparison.InvariantCultureIgnoreCase);
                }
                return source.Substring(0, endIndex);
            }
            
            // Downloads the full response and returns the page.
            // If discard is set (default), the response will be buffered in small blocks and discarded.
            // If we want to keep the full response for parsing, set discard = false.
            private string DownloadResponse(bool discard = true) {
                if (discard) {
                    do {
                        _count = _streamReader.Read(_buffer, 0, 1024);
                    } while (_count != 0);
                }
                else {
                    return _streamReader.ReadToEnd();
                }
                
                return string.Empty;
            }
        #endregion // Free Coding
    } // ConnectionProxy
    
} // vApus.Stresstest</Code>
          <ShowInGui>True</ShowInGui>
          <IsDefaultItem>False</IsDefaultItem>
          <IsEmpty>False</IsEmpty>
        </ConnectionProxyCode>
      </Items>
      <Label>HTTP(S) STABLE-V1-20151020130630</Label>
      <ShowInGui>True</ShowInGui>
      <IsDefaultItem>False</IsDefaultItem>
      <IsEmpty>False</IsEmpty>
    </ConnectionProxy>
  </Items>
</ConnectionProxies>
