<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SizingServers.IPC</name>
    </assembly>
    <members>
        <member name="T:SizingServers.IPC.MessageEventArgs">
            <summary>
            </summary>
        </member>
        <member name="P:SizingServers.IPC.MessageEventArgs.Message">
            <summary>
            </summary>
        </member>
        <member name="T:SizingServers.IPC.Receiver">
            <summary>
            <para>Add a new Receiver in the code of the process you want to receive messages. Make sure the handles matches the one of the Sender.</para>
            <para>This inter process communication only works on the same machine and in the same Windows session.</para>
            </summary>
        </member>
        <member name="E:SizingServers.IPC.Receiver.MessageReceived">
            <summary>
            
            </summary>
        </member>
        <member name="P:SizingServers.IPC.Receiver.IsDisposed">
            <summary>
            
            </summary>
        </member>
        <member name="P:SizingServers.IPC.Receiver.Handle">
            <summary>
            <para>The handle is a value shared by a Sender and its Receivers.</para>
            <para>It links both parties so messages from a Sender get to the right Receivers.</para>
            <para>Make sure this is a unique value: use a GUID for instance:</para>
            <para>There is absolutely no checking to see if this handle is used in another Sender - Receivers relation.</para>
            </summary>
        </member>
        <member name="M:SizingServers.IPC.Receiver.#ctor(System.String)">
            <summary>
            Receives messages of a Sender having the same handle.
            </summary>
            <param name="handle">
            <para>The handle is a value shared by a Sender and its Receivers.</para>
            <para>It links both parties so messages from a Sender get to the right Receivers.</para>
            <para>Make sure this is a unique value: use a GUID for instance:</para>
            <para>There is absolutely no checking to see if this handle is used in another Sender - Receivers relation.</para>
            </param>
        </member>
        <member name="M:SizingServers.IPC.Receiver.HandleReceive(System.Net.Sockets.TcpClient)">
            <summary>
            <para>Reads handle size, handle, 1 if message is byte array or 0, message size and message from the stream.</para>
            <para>If the handle in the message is invalid the connection will be closed.</para>
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:SizingServers.IPC.Receiver.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:SizingServers.IPC.Sender">
            <summary>
            <para>Add a new Sender in the code of the process you want to send messages. Make sure the handles matches the one of the Receivers.</para>
            <para>This inter process communication only works on the same machine and in the same Windows session.</para>
            <para>Suscribe to OnSendFailed for error handeling. Please not Sending will always fail when a Receiver disappears.</para>
            </summary>
        </member>
        <member name="E:SizingServers.IPC.Sender.BeforeMessageSent">
            <summary>
            
            </summary>
        </member>
        <member name="E:SizingServers.IPC.Sender.AfterMessageSent">
            <summary>
            
            </summary>
        </member>
        <member name="E:SizingServers.IPC.Sender.OnSendFailed">
            <summary>
            
            </summary>
        </member>
        <member name="F:SizingServers.IPC.Sender._hashcode">
            <summary>
            Hashcode of the message. When resending the same data it is not serialized again.
            </summary>
        </member>
        <member name="P:SizingServers.IPC.Sender.Buffered">
            <summary>
            <para>When true, a message (+ encapsulation) you send is kept in memory. When you resend the same message it will not be serialized again.</para>
            </summary>
        </member>
        <member name="P:SizingServers.IPC.Sender.Handle">
            <summary>
            
            </summary>
        </member>
        <member name="P:SizingServers.IPC.Sender.IsDisposed">
            <summary>
            </summary>
        </member>
        <member name="M:SizingServers.IPC.Sender.#ctor(System.String,System.Boolean)">
            <summary>
            <para>Add a new Sender in the code of the process you want to send messages. Make sure the handles matches the one of the Receivers.</para>
            <para>This inter process communication only works on the same machine and in the same Windows session.</para>
            <para>Suscribe to OnSendFailed for error handeling. Please not Sending will always fail when a Receiver disappears.</para>
            </summary>
            <param name="handle">A unique identifier to match the right sender with the right receivers.</param>
            <param name="buffered">
            <para>When true, a message (+ encapsulation) you send is kept in memory. When you resend the same message it will not be serialized again.</para>
            </param>
        </member>
        <member name="M:SizingServers.IPC.Sender.Send(System.Object)">
            <summary>
            Send a message to the Receivers. This is a blocking function.
            </summary>
            <param name="message">
            If the given object is a byte array, it will not be serialized. Otherwise, the object will be serialized using a binary formatter.
            </param>
        </member>
        <member name="M:SizingServers.IPC.Sender.SerializeMessage(System.Object)">
            <summary>
            Writes the handle size, the handle (UTF8 encoding), 1 if message is byte array or 0, the message size and the message to an array.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:SizingServers.IPC.Sender.SetSenders">
            <summary>
            Clean up the stored tcp clients (_senders) and add new ones if need be.
            </summary>
        </member>
        <member name="M:SizingServers.IPC.Sender.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="F:SizingServers.IPC.EndPointManager.KEY">
            <summary>
            Used for a key in the registry to store the end points.
            </summary>
        </member>
        <member name="M:SizingServers.IPC.EndPointManager.RegisterReceiver(System.String)">
            <summary>
            Add a new port tot the endpoint for the receiver.
            </summary>
            <param name="handle">
            <para>The handle is a value shared by a Sender and its Receivers.</para>
            <para>It links both parties so messages from a Sender get to the right Receivers.</para>
            <para>Make sure this is a unique value: use a GUID for instance:</para>
            <para>There is absolutely no checking to see if this handle is used in another Sender - Receivers relation.</para>
            </param>
            <returns></returns>
        </member>
        <member name="M:SizingServers.IPC.EndPointManager.GetReceiverEndPoints(System.String)">
            <summary>
            The sender must use this to be able to send data to the correct receivers.
            </summary>
            <param name="handle">
            <para>The handle is a value shared by a Sender and its Receivers.</para>
            <para>It links both parties so messages from a Sender get to the right Receivers.</para>
            <para>Make sure this is a unique value: use a GUID for instance:</para>
            <para>There is absolutely no checking to see if this handle is used in another Sender - Receivers relation.</para>
            </param>
            <returns></returns>
        </member>
        <member name="M:SizingServers.IPC.EndPointManager.GetUsedTcpPorts">
            <summary>
            Only take used tcp ports into accounts. What's been registered in the registry does not matter.
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
