<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HelperSharp</name>
    </assembly>
    <members>
        <member name="T:HelperSharp.ExpressionHelper">
            <summary>
            Expression helpers.
            </summary>
        </member>
        <member name="M:HelperSharp.ExpressionHelper.GetMemberExpression``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets a member expression from the expression.
            </summary>
            <sample>
            This method is useful when we want to map a property from a type, like this:
            var expression = ExpressionHelper.GetMemberExpression&lt;DateTime&gt;>(d => d.Day);
            var memberName = expression.Member.Name; // "Day";
            </sample>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="expression">The expression to get the member.</param>
            <returns>The MemberExpression if the specified expression is a MemberExpression, otherwise false.</returns>
        </member>
        <member name="T:HelperSharp.MD5Helper">
            <summary>
            MD5 cryptography algorithm helpers.
            </summary>
        </member>
        <member name="M:HelperSharp.MD5Helper.Encrypt(System.String)">
            <summary>
            Encrypt the specified string using MD5 algorithm.
            </summary>
            <param name="original">The string to be encrypt.</param>
            <returns>The encrypted string.</returns>
        </member>
        <member name="M:HelperSharp.MD5Helper.IsEncrypted(System.String)">
            <summary>
            Check if the specified string is encrypted using MD5.
            </summary>
            <param name="value">The encrypted string.</param>
            <returns>True if is MD5 encrypted, false otherwise.</returns>
        </member>
        <member name="T:HelperSharp.NameValueCollectionExtensions">
            <summary>
            NameValueCollection extensions.
            </summary>
        </member>
        <member name="M:HelperSharp.NameValueCollectionExtensions.GetBoolean(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Gets a boolean value with the specified name.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name of value.</param>
            <returns>The boolean value.</returns>
        </member>
        <member name="M:HelperSharp.NameValueCollectionExtensions.GetInt32(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Gets a integer value with the specified name.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name of value.</param>
            <returns>The integer value.</returns>
        </member>
        <member name="M:HelperSharp.NameValueCollectionExtensions.GetSingle(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Gets a single value with the specified name.
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name of value.</param>
            <returns>The single value.</returns>
        </member>
        <member name="T:HelperSharp.ObjectHelper">
            <summary>
            Object helper.
            </summary>
        </member>
        <member name="M:HelperSharp.ObjectHelper.IsNullOrDefault``1(``0)">
            <summary>
            Check if argument is null or default value of T type.
            <remarks>
            Original source code from: http://stackoverflow.com/a/6553276/956886 .
            </remarks>
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="argument">The argument value.</param>
            <returns>True if is null or default.</returns>
        </member>
        <member name="M:HelperSharp.ObjectHelper.CreateShallowCopy(System.Object)">
            <summary>
            Creates a shallow copy of the specified source.
            </summary>
            <remarks>
            It can be useful to remove out the proxy in ORM like EF.
            </remarks>
            <param name="source">The source object to be copied.</param>
            <returns>The shallow copy.</returns>
        </member>
        <member name="T:HelperSharp.CurrencyHelper">
            <summary>
            Currency helper.
            </summary>
        </member>
        <member name="M:HelperSharp.CurrencyHelper.#cctor">
            <summary>
            Initializes static members of the <see cref="T:HelperSharp.CurrencyHelper"/> class.
            </summary>
        </member>
        <member name="M:HelperSharp.CurrencyHelper.IsValidIsoCurrencySymbol(System.String)">
            <summary>
            Determines if is valid ISO currency symbol.
            </summary>
            <returns><c>true</c> if is valid ISO currency symbol; otherwise, <c>false</c>.</returns>
            <param name="symbol">The symbol to validate.</param>
        </member>
        <member name="T:HelperSharp.ArrayExtensions">
            <summary>
            Arrays extensions.
            </summary>
        </member>
        <member name="M:HelperSharp.ArrayExtensions.RemoveDuplicates``1(``0[])">
            <summary>
            Removes the duplicates items from array.
            </summary>
            <returns>The duplicates.</returns>
            <param name="items">The items.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="T:HelperSharp.CharExtensions">
            <summary>
            Char extensions.
            </summary>
        </member>
        <member name="M:HelperSharp.CharExtensions.HasAccent(System.Char)">
            <summary>
            Determines if char is an accent.
            </summary>
            <returns><c>true</c> if char is an accent; otherwise, <c>false</c>.</returns>
            <param name="value">The char.</param>
        </member>
        <member name="T:HelperSharp.ConvertibleExtensions">
            <summary>
            Convertible extensions.
            </summary>
        </member>
        <member name="M:HelperSharp.ConvertibleExtensions.To``1(System.IConvertible)">
            <summary>
            Converts the type to specified T.
            </summary>
            <param name="self">The convertible it self.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
            <returns>The converted.</returns>
        </member>
        <member name="T:HelperSharp.DateTimeExtensions">
            <summary>
            Date time extensions.
            </summary>
        </member>
        <member name="M:HelperSharp.DateTimeExtensions.GetBeginOfMonth(System.DateTime)">
            <summary>
            Gets the begin of month.
            </summary>
            <returns>The begin of month.</returns>
            <param name="value">The DateTime it self.</param>
        </member>
        <member name="M:HelperSharp.DateTimeExtensions.GetEndOfMonth(System.DateTime)">
            <summary>
            Gets the end of month.
            </summary>
            <returns>The end of month.</returns>
            <param name="value">The DateTime it self.</param>
        </member>
        <member name="M:HelperSharp.DateTimeExtensions.GetBeginOfDay(System.DateTime)">
            <summary>
            Gets the begin of day.
            </summary>
            <returns>The begin of day.</returns>
            <param name="value">The DateTime it self.</param>
        </member>
        <member name="M:HelperSharp.DateTimeExtensions.GetEndOfDay(System.DateTime)">
            <summary>
            Gets the end of day.
            </summary>
            <returns>The end of day.</returns>
            <param name="value">The DateTime it self.</param>
        </member>
        <member name="T:HelperSharp.EnumerableExtensions">
            <summary>
            Enumerable extensions.
            </summary>
        </member>
        <member name="M:HelperSharp.EnumerableExtensions.GetTypes(System.Collections.IEnumerable)">
            <summary>
            Gets the types of the specified objects.
            </summary>
            <returns>The types.</returns>
            <param name="objects">The objects.</param>
        </member>
        <member name="M:HelperSharp.EnumerableExtensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Iterates in the collection calling the action for each item.
            </summary>
            <param name="self">The enumerable it self.</param>
            <param name="action">The each action.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:HelperSharp.EnumerableExtensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Iterates in the collection calling the action for each item using index.
            </summary>
            <param name="self">The enumerable it self.</param>
            <param name="action">The each action.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:HelperSharp.EnumerableExtensions.ToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object})">
            <summary>
            Iterates in the collection calling the action for each item and concatenating the result.
            </summary>
            <returns>The string.</returns>
            <param name="self">The enumerable it self.</param>
            <param name="function">The ToString function.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:HelperSharp.EnumerableExtensions.ToString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Iterates in the collection calling the action for each item using String.Format.
            </summary>
            <returns>The string.</returns>
            <param name="self">The enumerable it self.</param>
            <param name="format">The string format.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="T:HelperSharp.ReflectionHelper">
            <summary>
            Reflection helpers.
            </summary>
        </member>
        <member name="M:HelperSharp.ReflectionHelper.GetProperty(System.Type,System.String)">
            <summary>
            Gets the property with the specified name.
            </summary>
            <param name="type">The type.</param>
            <param name="propertyName">The property name.</param>
            <returns>The property.</returns>
        </member>
        <member name="M:HelperSharp.ReflectionHelper.GetPropertyValue(System.Object,System.String)">
            <summary>
            Gets the property's value.
            </summary>
            <param name="instance">The object.</param>
            <param name="propertyName">The property name.</param>
            <returns>The property's value.</returns>
        </member>
        <member name="M:HelperSharp.ReflectionHelper.InvokeMethod(System.Object,System.String,System.Object[])">
            <summary>
            Invokes the method with the specified parameters.
            </summary>
            <param name="target">The target object where the method will be called.</param>
            <param name="methodName">The method's name.</param>
            <param name="parameters">The method's parameters.</param>
            <returns>The method's result.</returns>
        </member>
        <member name="M:HelperSharp.ReflectionHelper.GetSubclassesOf(System.Type,System.Boolean)">
            <summary>
            Gets the subclasses of the specified type.
            </summary>
            <param name="type">The base type.</param>
            <param name="onlyConcrete">If should return only concrete subclasses or if should return abstract and interfaces too. Default is true.</param>
            <returns>The subclasses.</returns>
        </member>
        <member name="M:HelperSharp.ReflectionHelper.GetSubclassesOf``1(System.Boolean)">
            <summary>
            Gets the subclasses of the specified type.
            </summary>
            <typeparam name="TType">The base type.</typeparam>
            <param name="onlyConcrete">If should return only concrete subclasses or if should return abstract and interfaces too. Default is true.</param>
            <returns>The subclasses.</returns>
        </member>
        <member name="T:HelperSharp.StringExtensions">
            <summary>
            String extensions.
            </summary>
        </member>
        <member name="M:HelperSharp.StringExtensions.GetWordFromIndex(System.String,System.Int32)">
            <summary>
            Gets the word in the specified index.
            </summary>
            <returns>The word from index.</returns>
            <param name="source">The source string.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:HelperSharp.StringExtensions.GetWordFromIndex(System.String,System.Int32,System.Int32@)">
            <summary>
            Gets the word in the specified index.
            </summary>
            <returns>The word from index.</returns>
            <param name="source">The source string.</param>
            <param name="index">The index.</param>
            <param name="wordStartIndex">Word start index.</param>
        </member>
        <member name="M:HelperSharp.StringExtensions.CountWords(System.String)">
            <summary>
            Counts the words.
            </summary>
            <returns>The words.</returns>
            <param name="source">The source string.</param>
        </member>
        <member name="M:HelperSharp.StringExtensions.RemoveAccents(System.String)">
            <summary>
            Removes the accents.
            </summary>
            <returns>The accents.</returns>
            <param name="source">The source string.</param>
        </member>
        <member name="M:HelperSharp.StringExtensions.RemoveNonAlphanumeric(System.String)">
            <summary>
            Removes the non alphanumeric chars.
            </summary>
            <returns>The non alphanumeric.</returns>
            <param name="source">The source string.</param>
        </member>
        <member name="M:HelperSharp.StringExtensions.RemoveNonNumeric(System.String)">
            <summary>
            Removes the non numeric chars.
            </summary>
            <returns>The non numeric.</returns>
            <param name="source">The source string.</param>
        </member>
        <member name="M:HelperSharp.StringExtensions.RemoveFromBorders(System.String,System.String)">
            <summary>
            Removes the specified string from borders.
            </summary>
            <returns>The from borders.</returns>
            <param name="source">The source string.</param>
            <param name="remove">The string to remove.</param>
        </member>
        <member name="M:HelperSharp.StringExtensions.RemoveFromBorders(System.String,System.Char[])">
            <summary>
            Removes the chars "remove" from source borders.
            </summary>
            <returns>The from borders.</returns>
            <param name="source">The source string.</param>
            <param name="remove">The chars to remove.</param>
        </member>
        <member name="M:HelperSharp.StringExtensions.RemovePunctuations(System.String)">
            <summary>
            Removes the punctuations.
            </summary>
            <returns>The clean string.</returns>
            <param name="source">The source string.</param>
        </member>
        <member name="M:HelperSharp.StringExtensions.EscapeAccentsToHex(System.String)">
            <summary>
            Escapes the accents to hexadecimal equivalent.
            </summary>
            <returns>The accents to hex.</returns>
            <param name="source">The source string.</param>
        </member>
        <member name="M:HelperSharp.StringExtensions.EscapeAccentsToHtmlEntities(System.String)">
            <summary>
            Escapes the accents to html entities.
            </summary>
            <returns>The accents to html entities.</returns>
            <param name="source">The source string.</param>
        </member>
        <member name="M:HelperSharp.StringExtensions.EndsWithPunctuation(System.String)">
            <summary>
            Verify if source ends the with punctuation.
            </summary>
            <returns><c>true</c>, if with punctuation was the end, <c>false</c> otherwise.</returns>
            <param name="source">The source string.</param>
        </member>
        <member name="M:HelperSharp.StringExtensions.HasAccent(System.String)">
            <summary>
            Determines if has accent.
            </summary>
            <returns><c>true</c> if has accent the specified source; otherwise, <c>false</c>.</returns>
            <param name="source">The source string.</param>
        </member>
        <member name="M:HelperSharp.StringExtensions.InsertUnderscoreBeforeUppercase(System.String)">
            <summary>
            Inserts the underscore before every upper case char.
            </summary>
            <returns>The result string.</returns>
            <param name="input">The source string.</param>
        </member>
        <member name="M:HelperSharp.StringExtensions.With(System.String,System.Object[])">
            <summary>
            Format the specified string. Is a String.Format(CultureInfo.InvariantCulture,..) shortcut.
            </summary>
            <param name="source">The source string.</param>
            <param name="args">The arguments.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:HelperSharp.StringExtensions.Capitalize(System.String,System.Int32)">
            <summary>
            Capitalize the string.
            </summary>
            <param name="source">The source string.</param>
            <param name="ignoreWordsLowerThanChars">The words lower than specified chars will be ignored.</param>
            <returns>The capitalized string.</returns>
        </member>
        <member name="M:HelperSharp.StringExtensions.ContainsIgnoreCase(System.String,System.String)">
            <summary>
             Returns a value indicating whether the specified substring occurs within this string 
             <remarks>
             Based on http://stackoverflow.com/a/444818/956886. 
            </remarks>
            </summary>
            <param name="source">The source.</param>
            <param name="substring">The substring.</param>
            <returns>True se if substring occurs, otherwise false.</returns>
        </member>
        <member name="T:HelperSharp.EnumerableHelper">
            <summary>
            Enumerable helper.
            </summary>
        </member>
        <member name="M:HelperSharp.EnumerableHelper.AreEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Verify if collections are equal comparing each item. Order is considered.
            </summary>
            <returns><c>true</c>, if are equal, <c>false</c> otherwise.</returns>
            <param name="first">The first enumerable to compare.</param>
            <param name="second">The second enumerable to compare..</param>
            <typeparam name="TType">The 1st type parameter.</typeparam>
        </member>
        <member name="M:HelperSharp.EnumerableHelper.CalculateHashCode(System.Collections.IEnumerable)">
            <summary>
            Calculates the hash code using all items.
            </summary>
            <returns>The hash code.</returns>
            <param name="items">The items.</param>
        </member>
        <member name="T:HelperSharp.ExceptionHelper">
            <summary>
            Exception helper.
            </summary>
        </member>
        <member name="M:HelperSharp.ExceptionHelper.ThrowIfNull(System.String,System.Object)">
            <summary>
            Throws an ArgumentNullException if argument is null.
            </summary>
            <param name="argumentName">The argument name.</param>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:HelperSharp.ExceptionHelper.ThrowIfNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an ArgumentNullException if argument is null or an ArgumentException if string is empty.
            </summary>
            <param name="argumentName">The argument name.</param>
            <param name="argument">The argument.</param>
        </member>
        <member name="T:HelperSharp.GravatarHelper">
            <summary>
            Gravatar helper.
            </summary>
        </member>
        <member name="M:HelperSharp.GravatarHelper.GetAvatarUrl(System.String,System.Int32,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Gets the avatar URL for the specified e-mail.
            Original source code from: https://gist.github.com/danesparza/973923.
            </summary>
            <remarks>
            Take a look on https://en.gravatar.com/site/implement/images/ to see the paremeters options
            </remarks>
            <returns>The avatar URL.</returns>
            <param name="email">The e-mail.</param>
            <param name="size">The image size. Default is 80px.</param>
            <param name="defaultImage">The default image. See options on https://en.gravatar.com/site/implement/images/.</param>
            <param name="forceDefaultImage">If for some reason you wanted to force the default image to always load.</param>
            <param name="rating">Gravatar allows users to self-rate their images so that they can indicate if an image is appropriate for a certain audience. Default 'g'.</param>
            <param name="secureRequest">If you're displaying Gravatars on a page that is being served over SSL (e.g. the page URL starts with HTTPS), then you'll want to serve your Gravatars via SSL as well, otherwise you'll get annoying security warnings in most browsers.</param>
        </member>
    </members>
</doc>
