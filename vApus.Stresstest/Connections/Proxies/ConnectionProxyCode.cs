/*
 * Copyright 2010 (c) Sizing Servers Lab
 * University College of West-Flanders, Department GKG
 * 
 * Author(s):
 *    Dieter Vandroemme
 */
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.Serialization;
using System.Text;
using System.Windows.Forms;
using vApus.SolutionTree;
using vApus.Util;

namespace vApus.Stresstest
{
    [ContextMenu(new string[] { "Activate_Click" }, new string[] { "Edit" })]
    [Hotkeys(new string[] { "Activate_Click" }, new Keys[] { Keys.Enter })]
    [DisplayName("Connection Proxy Code"), Serializable]
    public class ConnectionProxyCode : BaseItem, ISerializable
    {
        #region Fields
        private int _threads = 1;
        private Log _testLog;
        private int _testLogEntryIndex = -1;
        private string _testConnectionString = string.Empty;
        private string _code = ConnectionProxyCode.DEFAULTCODE;
        private const string DEFAULTCODE =
@"//Connection Proxy Document
/*
ConnectionProxy generated by vApus
vApus is Copyrighted by Sizing Servers Lab
University College of West-Flanders, Department GKG
*/

// dllreferences:System.dll;System.Data.dll;vApus.Util.dll;vApus.Stresstest.dll;

#region Preprocessors
//
// e.g. #define NOTMUCHUSEDFEATURE
//
// Further in code:
// #if NOTMUCHUSEDFEATURE
// do stuff...
// #endif
#endregion //Preprocessors
#region Default Usings
using System;
using System.Data;
using System.Diagnostics;
// Contains the StringTree class.
using vApus.Util;
#endregion //Default Usings
#region Custom Usings

#endregion //Custom Usings
namespace vApus.Stresstest {
public class ConnectionProxy : IConnectionProxy {
#region Default Fields
Stopwatch _stopwatch = new Stopwatch();
bool _isDisposed;
// -- RuleSetFields --
// -- RuleSetFields --
#endregion //Default Fields
#region Custom Fields
//
// Here you can put labels, for instance, for the index values of the String Tree nodes (eg. int ip = 0).
//
#endregion //Custom Fields
#region Properties
public bool IsConnectionOpen { get {
//
// ...
//
}} //IsConnectionOpen
public bool IsDisposed { get {
return _isDisposed;
}} //IsDisposed
#endregion //Properties
public ConnectionProxy() {

} //ConnectionProxy
#region Functions
public void TestConnection(out string error) {
error = null;
try
{
	OpenConnection();
	if(IsConnectionOpen)
	{
		CloseConnection();
	}
	else
	{
		error = " + "\"Could not open the connection.\";" + @"
	}
}
catch (Exception ex)
{
	error = ex.ToString();
}
} //TestConnection
public void OpenConnection() {
if(!IsConnectionOpen)
{
//
// ...
//
}
} //OpenConnection
public void CloseConnection() {
if(IsConnectionOpen)
{
//
// ...
//
}
} //CloseConnection
public void SendAndReceive(StringTree parameterizedLogEntry, out DateTime sentAt, out TimeSpan timeToLastByte, out Exception exception) {
exception = null;

//
// parameterizedLogEntry is the log entry parsed to a String Tree using the Log Rule Set.
// String Tree is a simple class: it can have either a value (string Value { get; }) or childs who are also String Trees (e.g. StringTree foo = parameterizedLogEntry[n] where n is an integer value).
// You can get the combined value of the childs using the function CombineValues() (not shallow, returns a string), this uses the child delimiters in the rule set to glue these values together. 
//

//
// Initiate other stuff here.
// (eg. Fields or functions from the free coding section.)
//

if (_isDisposed)
{
sentAt = DateTime.Now;
timeToLastByte = new TimeSpan();
return;
}
try
{
sentAt = DateTime.Now;
_stopwatch.Start();
try
{
//
// Send the request to the server here.
//
}
catch (Exception ex)
{
	exception = ex;
}
finally
{
//
// Close stuff if needed.
//
}
}
catch
{
//
// Always throw the exception, if any, if 'stuff' cannot be closed.
// vApus will handle it as a connection problem.
//

throw;
}
finally
{
 _stopwatch.Stop();
timeToLastByte = _stopwatch.Elapsed;
_stopwatch.Reset();
}
} //SendAndReceive
public void TestSendAndReceive(StringTree parameterizedLogEntry, out DateTime sentAt, out TimeSpan timeToLastByte, out Exception exception) {
//
// Serves at making a unit test, you can for example save the output here eg a htm page.
// You are adviced to always test the send and receive function here, otherwise this is a useless function.
//

SendAndReceive(parameterizedLogEntry, out sentAt, out timeToLastByte, out exception);
} //TestSendAndReceive
public void Dispose() {
if (!_isDisposed)
{
_isDisposed = true;
// A call to CloseConnection() is not necessary, if the connection proxy pool is being disposed it will get called.

//
// ...
//
}
} //Dispose
#endregion //Functions
#region Free Coding
//
// Anything you want...
//
#endregion //Free Coding
} //ConnectionProxy
} //vApus.Stresstest";
        #endregion

        #region Properties
        //Never use this in a distributed test.
        public ConnectionProxyRuleSet ConnectionProxyRuleSet
        {
            get { return Parent[0] as ConnectionProxyRuleSet; }
        }
        [SavableCloneable]
        [DisplayName("Threads")]
        public int Threads
        {
            get { return _threads; }
            set { _threads = value; }
        }
        [DisplayName("Test Log")]
        public Log TestLog
        {
            get { return _testLog; }
            set
            {
                value.ParentIsNull -= _testLog_ParentIsNull;
                _testLog = value;
                _testLog.ParentIsNull += _testLog_ParentIsNull;
            }
        }
        [DisplayName("Test Log Entry Index"), Description("- 1 for all.")]
        public int TestLogEntryIndex
        {
            get { return _testLogEntryIndex; }
            set
            {
                if (value < -1)
                    throw new ArgumentOutOfRangeException("Cannot be smaller than -1.");
                _testLogEntryIndex = value;
            }
        }
        [DisplayName("Test Connection String")]
        public string TestConnectionString
        {
            get { return _testConnectionString; }
            set { _testConnectionString = value; }
        }
        [SavableCloneable]
        public string Code
        {
            get { return _code; }
            set
            {
                if (!string.IsNullOrEmpty(value))
                    _code = value;
            }
        }
        #endregion

        #region Constructor
        public ConnectionProxyCode()
        {
            if (Solution.ActiveSolution != null)
                TestLog = SolutionComponent.GetNextOrEmptyChild(typeof(Log), Solution.ActiveSolution.GetSolutionComponent(typeof(Logs))) as Log;
            else
                Solution.ActiveSolutionChanged += new EventHandler<ActiveSolutionChangedEventArgs>(Solution_ActiveSolutionChanged);
        }
        /// <summary>
        /// Only for sending from master to slave.
        /// </summary>
        /// <param name="info"></param>
        /// <param name="ctxt"></param>
        public ConnectionProxyCode(SerializationInfo info, StreamingContext ctxt)
        {
            SerializationReader sr;
            using (sr = SerializationReader.GetReader(info))
            {
                _code = sr.ReadString();
            }
            sr = null;
            //Not pretty, but helps against mem saturation.
            GC.Collect();
        }
        #endregion

        #region Functions
        private void Solution_ActiveSolutionChanged(object sender, ActiveSolutionChangedEventArgs e)
        {
            Solution.ActiveSolutionChanged -= Solution_ActiveSolutionChanged;
            TestLog = SolutionComponent.GetNextOrEmptyChild(typeof(Log), Solution.ActiveSolution.GetSolutionComponent(typeof(Logs))) as Log;
        }
        private void _testLog_ParentIsNull(object sender, EventArgs e)
        {
            TestLog = SolutionComponent.GetNextOrEmptyChild(typeof(Log), Solution.ActiveSolution.GetSolutionComponent(typeof(Logs))) as Log;
        }
        public string BuildConnectionProxyClass(ConnectionProxyRuleSet connectionProxyRuleSet, string connectionString)
        {
            string[] split = _code.Split(new string[] { "// -- RuleSetFields --" }, StringSplitOptions.None);
            split[1] = BuildRuleSetFields(connectionProxyRuleSet, connectionString);

            string connectionProxyClass = string.Empty;
            for (int i = 0; i < split.Length; i++)
                connectionProxyClass += split[i].Trim() + '\n';

            return connectionProxyClass.Trim();
        }
        private string BuildRuleSetFields(ConnectionProxyRuleSet connectionProxyRuleSet, string connectionString = "")
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("// -- RuleSetFields --");
            List<string> splitInput = string.IsNullOrEmpty(connectionString) ? null : new List<string>(connectionString.Split(new string[] { connectionProxyRuleSet.ChildDelimiter }, StringSplitOptions.None));

            for (int i = 0; i < connectionProxyRuleSet.Count; i++)
            {
                ConnectionProxySyntaxItem syntaxItem = connectionProxyRuleSet[i] as ConnectionProxySyntaxItem;
                Type valueType = (syntaxItem.Count > 0 && syntaxItem[0] is Rule) ? Rule.GetType((syntaxItem[0] as Rule).ValueType) : typeof(string);
                string name = syntaxItem.GetType().Name;
                name = name[0].ToString().ToLower() + name.Substring(1);

                sb.AppendLine("// " + syntaxItem.Label);
                if (splitInput != null && i < splitInput.Count)
                {
                    if (valueType == typeof(string))
                        sb.AppendFormat("{0} _{1}{2} = \"{3}\";", valueType, name, i, splitInput[i]);
                    else
                        sb.AppendFormat("{0} _{1}{2} = {3};", valueType, name, i, splitInput[i].ToLower());
                }
                else
                {
                    if (valueType == typeof(string))
                        sb.AppendFormat("{0} _{1}{2} = string.Empty;", valueType, name, i);
                    else
                        sb.AppendFormat("{0} _{1}{2};", valueType, name, i);
                }
                sb.AppendLine();
            }
            sb.AppendLine("// -- RuleSetFields --");
            return sb.ToString();
        }
        public override void Activate()
        {
            SolutionComponentViewManager.Show(this);
        }

        /// <summary>
        /// Only for sending from master to slave.
        /// </summary>
        /// <param name="info"></param>
        /// <param name="context"></param>
        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            SerializationWriter sw;
            using (sw = SerializationWriter.GetWriter())
            {
                sw.Write(_code);
                sw.AddToInfo(info);
            }
            sw = null;
            //Not pretty, but helps against mem saturation.
            GC.Collect();
        }
        #endregion
    }
}
